{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\"; // @custom-component-imports ------------------------------------------------------------------------ \n\nimport DataTable from 'react-data-table-component';\nimport DataTableExtensions from 'react-data-table-component-extensions';\nimport 'react-data-table-component-extensions/dist/index.css';\nimport { Button, Modal, notification } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\"; // @actions-imports ----------------------------------------------------------------------------------\n\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\";\nimport { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"; //-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n  const {\n    getCustomerList,\n    getCustomerListState\n  } = props;\n  const [tableData, setTableData] = useState([]);\n\n  const openNotificationWithIcon = (type, message, description = \"\") => {\n    notification[type]({\n      message: message,\n      description: description\n    });\n  };\n\n  const confirm = data => {\n    console.clear();\n    console.log(data); // Modal.confirm({\n    //   title: 'Confirm',\n    //   icon: <ExclamationCircleOutlined />,\n    //   content: 'Do you really want to block the customer ?',\n    //   okText: 'Yes',\n    //   cancelText: 'No',\n    //   onOk: function() { openNotificationWithIcon('success','Customer status','Customer status updated successfully') },\n    // });\n  };\n\n  const [columns, setColumns] = useState([{\n    name: 'Customer Name',\n    selector: data => data.name,\n    sortable: true\n  }, {\n    name: 'Customer Email',\n    selector: data => data.email,\n    sortable: true\n  }, {\n    name: 'Customer Contact No.',\n    selector: data => data.contact_no,\n    sortable: true\n  }, {\n    name: 'Customer Status',\n    selector: data => data.status,\n    sortable: true\n  }, {\n    name: 'Register Date',\n    selector: data => data.date,\n    sortable: true\n  }, {\n    name: 'Action',\n    selector: data => /*#__PURE__*/React.createElement(Button, {\n      onClick: () => confirm(data),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 31\n      }\n    }, data.status, \" || \"),\n    sortable: true\n  }]);\n  /* callbacks -------------------------------------------------------------------------------------------------*/\n\n  useEffect(() => {\n    getCustomerList();\n  }, []);\n  useEffect(() => {\n    if (getCustomerListState.apiState === \"success\") {\n      const customerList = getCustomerListState.list.map(data => {\n        const serverDate = date => date.toISOString().slice(0, 10);\n\n        data.created_at = serverDate(new Date(data.created_at));\n        return {\n          name: data.name,\n          email: data.email,\n          date: data.created_at,\n          status: data.status,\n          contact_no: data.contact_no\n        };\n      });\n      setTableData(customerList);\n    }\n  }, [getCustomerListState]);\n  /* ----------------------------------------------------------------------------------------------------------*/\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    title: \"Customer List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DataTableExtensions, {\n    print: false,\n    columns: columns,\n    data: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    noHeader: true,\n    defaultSortField: \"id\",\n    defaultSortAsc: false,\n    pagination: true,\n    highlightOnHover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  getOrderListState: state.getOrderList,\n  getCustomerListState: state.getCustomerList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getOrderList: params => dispatch(getOrderList(params)),\n  getOrderListReset: () => dispatch(getOrderListReset()),\n  getCustomerList: params => dispatch(getCustomerList(params)),\n  getCustomerListReset: () => dispatch(getCustomerListReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js"],"names":["React","useEffect","useState","connect","DataTable","DataTableExtensions","Button","Modal","notification","ExclamationCircleOutlined","Header","PageContainer","getOrderList","getOrderListReset","getCustomerList","getCustomerListReset","CustomerList","props","getCustomerListState","tableData","setTableData","openNotificationWithIcon","type","message","description","confirm","data","console","clear","log","columns","setColumns","name","selector","sortable","email","contact_no","status","date","apiState","customerList","list","map","serverDate","toISOString","slice","created_at","Date","mapStateToProps","state","getOrderListState","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n    import {  Button, Modal,notification   } from 'antd'\n    import { ExclamationCircleOutlined } from '@ant-design/icons';\n \n    import Header from \"../../component/Header/Header\"\n    import { PageContainer } from \"../../component/Xcomponent\"\n    \n\n// @actions-imports ----------------------------------------------------------------------------------\n\n    import { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n    import { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\n \n//-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n   \n    const { getCustomerList, getCustomerListState } = props\n    const [tableData, setTableData] = useState([])\n\n    const openNotificationWithIcon = (type,message,description = \"\") => {\n        notification[type]({\n          message     : message,\n          description : description,\n        });\n    };\n  \n    const confirm = (data) => {\n\n      console.clear(); console.log(data);\n\n        // Modal.confirm({\n        //   title: 'Confirm',\n        //   icon: <ExclamationCircleOutlined />,\n        //   content: 'Do you really want to block the customer ?',\n        //   okText: 'Yes',\n        //   cancelText: 'No',\n        //   onOk: function() { openNotificationWithIcon('success','Customer status','Customer status updated successfully') },\n        // });\n      };\n\n    const [columns,setColumns] = useState([{\n            name: 'Customer Name',\n            selector: data => data.name,\n            sortable: true,\n        },{\n            name: 'Customer Email',\n            selector: data => data.email,\n            sortable: true,\n        },{\n            name: 'Customer Contact No.',\n            selector: data => data.contact_no,\n            sortable: true,\n        },{\n            name: 'Customer Status',\n            selector: data => data.status,\n            sortable: true,\n        },{\n            name: 'Register Date',\n            selector: data => data.date,\n            sortable: true,\n        },{\n            name: 'Action',\n            selector: data => <Button onClick={() => confirm(data)}>{data.status} || </Button>,\n            sortable: true,\n        }\n    ])\n\n    \n\n/* callbacks -------------------------------------------------------------------------------------------------*/\n\n    useEffect(() => { getCustomerList()}, [])\n    useEffect(() => {\n        \n        if (getCustomerListState.apiState === \"success\") {\n\n            const customerList = getCustomerListState.list.map(data => {\n\n                const serverDate = date => date.toISOString().slice(0, 10);\n\n                data.created_at = serverDate(new Date(data.created_at))\n       \n                return  {\n                    name   : data.name,\n                    email  : data.email,\n                    date   : data.created_at,\n                    status : data.status,\n                    contact_no: data.contact_no,\n                }\n            })\n\n            setTableData(customerList);\n        }\n    }, [getCustomerListState])\n\n/* ----------------------------------------------------------------------------------------------------------*/\n\n    return (\n        <React.Fragment>\n            <Header title=\"Customer List\"/>\n            <PageContainer>     \n                <DataTableExtensions print={false} columns={columns} data={tableData} >\n                    <DataTable\n                        noHeader\n                        defaultSortField=\"id\"\n                        defaultSortAsc={false}\n                        pagination\n                        highlightOnHover\n                    />\n                </DataTableExtensions>\n            </PageContainer>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = (state) => ({\n    getOrderListState    : state.getOrderList,\n    getCustomerListState : state.getCustomerList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList:         (params) => dispatch(getOrderList(params)),\n    getOrderListReset:    ()       => dispatch(getOrderListReset()),\n    getCustomerList:      (params) => dispatch(getCustomerList(params)),\n    getCustomerListReset: ()       => dispatch(getCustomerListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)"]},"metadata":{},"sourceType":"module"}
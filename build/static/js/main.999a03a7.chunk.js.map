{"version":3,"sources":["icons/logo.jpg","action/loginAction.js","reducer/loginReducer.js","action/getCategoryTreeAction.js","reducer/getCategoryTreeReducer.js","action/createCategoryAction.js","reducer/createCategoryReducer.js","action/getCategoryViewAction.js","reducer/getCategoryViewReducer.js","action/updateCategoryAction.js","reducer/updateCategoryReducer.js","action/deleteCategoryAction.js","reducer/deleteCategoryReducer.js","action/createProductAction.js","reducer/createProductReducer.js","action/getProductListAction.js","reducer/getProductListReducer.js","action/getProductViewAction.js","reducer/getProductViewReducer.js","action/updateProductAction.js","reducer/updateProductReducer.js","action/getAttributeListAction.js","reducer/getAttributeListReducer.js","action/saveAttributeForVariantsAction.js","reducer/saveAttributeForVariantsReducer.js","action/createProductVariantAction.js","reducer/createProductVariantReducer.js","action/getProductVariantListAction.js","reducer/getProductVariantListReducer.js","action/saveSpProdDataAction.js","reducer/saveSpProdDataReducer.js","action/saveSpImgDataAction.js","reducer/saveSpImgDataReducer.js","action/saveProdImgAction.js","reducer/saveProdImgReducer.js","action/delProdImgAction.js","reducer/delProdImgReducer.js","action/markImgThumbAction.js","reducer/markImgThumbReducer.js","action/delProdVarAction.js","reducer/delProdVarReducer.js","action/saveSliderImagesAction.js","reducer/saveSliderImagesReducer.js","action/getSliderListAction.js","reducer/getSliderListReducer.js","action/delSliderAction.js","reducer/delSliderReducer.js","action/saveTestimonialAction.js","reducer/saveTestimonialReducer.js","action/getTestimonialListAction.js","reducer/getTestimonialListReducer.js","action/delTestimonialAction.js","reducer/delTestimonialReducer.js","action/addDescriptionAction.js","reducer/addDescriptionReducer.js","action/listDescriptionAction.js","reducer/listDescriptionReducer.js","action/getDescriptionViewAction.js","reducer/getDescriptionViewReducer.js","action/updateDescriptionAction.js","reducer/updateDescriptionReducer.js","action/addRelProdAction.js","reducer/addRelProdReducer.js","action/listRelProdAction.js","reducer/listRelProdReducer.js","action/delRelProdAction.js","reducer/delRelProdReducer.js","action/updateSettingAction.js","reducer/updateSettingReducer.js","action/getSettingAction.js","reducer/getSettingReducer.js","action/updateShippingAction.js","reducer/updateShippingReducer.js","action/getVoucherListAction.js","reducer/getVoucherListReducer.js","action/createVoucherAction.js","reducer/createVoucherReducer.js","action/getVoucherViewAction.js","reducer/getVoucherViewReducer.js","action/updateVoucherAction.js","reducer/updateVoucherReducer.js","action/getOrderListAction.js","reducer/getOrderListReducer.js","action/getCustomerListAction.js","reducer/getCustomerListReducer.js","action/getOrderDetailsAction.js","reducer/getOrderDetailsReducer.js","action/updateOrderAction.js","reducer/updateOrderReducer.js","reducer.js","config.js","api/loginApi.js","saga/loginSaga.js","api/getCategoryTreeApi.js","saga/getCategoryTreeSaga.js","api/createCategoryApi.js","saga/createCategorySaga.js","api/getCategoryViewApi.js","saga/getCategoryViewSaga.js","api/updateCategoryApi.js","saga/updateCategorySaga.js","api/deleteCategoryApi.js","saga/deleteCategorySaga.js","api/createProductApi.js","saga/createProductSaga.js","api/getProductListApi.js","saga/getProductListSaga.js","api/getProductViewApi.js","saga/getProductViewSaga.js","api/updateProductApi.js","saga/updateProductSaga.js","api/getAttributeListApi.js","saga/getAttributeListSaga.js","api/saveAttributeForVariantsApi.js","saga/saveAttributeForVariantsSaga.js","api/createProductVariantApi.js","saga/createProductVariantSaga.js","api/getProductVariantListApi.js","saga/getProductVariantListSaga.js","api/saveSpProdDataApi.js","saga/saveSpProdDataSaga.js","api/saveSpImgDataApi.js","saga/saveSpImgDataSaga.js","api/saveProdImgApi.js","saga/saveProdImgSaga.js","api/delProdImgApi.js","saga/delProdImgSaga.js","api/markImgThumbApi.js","saga/markImgThumbSaga.js","api/delProdVarApi.js","saga/delProdVarSaga.js","api/saveSliderImagesApi.js","saga/saveSliderImagesSaga.js","api/getSliderListApi.js","saga/getSliderListSaga.js","api/delSliderApi.js","saga/delSliderSaga.js","api/saveTestimonialApi.js","saga/saveTestimonialSaga.js","api/getTestimonialListApi.js","saga/getTestimonialListSaga.js","api/delTestimonialApi.js","saga/delTestimonialSaga.js","api/addDescriptionApi.js","saga/addDescriptionSaga.js","api/listDescriptionApi.js","saga/listDescriptionSaga.js","api/getDescriptionViewApi.js","saga/getDescriptionViewSaga.js","api/updateDescriptionApi.js","saga/updateDescriptionSaga.js","api/addRelProdApi.js","saga/addRelProdSaga.js","api/listRelProdApi.js","saga/listRelProdSaga.js","api/delRelProdApi.js","saga/delRelProdSaga.js","api/updateSettingApi.js","saga/updateSettingSaga.js","api/getSettingApi.js","saga/getSettingSaga.js","api/updateShippingApi.js","saga/updateShippingSaga.js","api/getVoucherListApi.js","saga/getVoucherListSaga.js","api/createVoucherApi.js","saga/createVoucherSaga.js","api/getVoucherViewApi.js","saga/getVoucherViewSaga.js","api/updateVoucherApi.js","saga/updateVoucherSaga.js","api/getOrderListApi.js","saga/getOrderListSaga.js","api/getCustomerListApi.js","saga/getCustomerListSaga.js","api/getOrderDetailsApi.js","saga/getOrderDetailsSaga.js","api/updateOrderApi.js","saga/updateOrderSaga.js","store.js","component/Sidebar/Sidebar.js","utils.js","component/PrivateRoute.js","component/Header/Header.js","component/Xcomponent.js","page/Home/Home.js","page/CategoryAdd/CategoryAdd.js","page/CategoryList/CategoryList.js","page/CategoryEdit/CategoryEdit.js","page/ProductList/ProductListStyle.js","page/ProductList/ProductList.js","page/ProductAdd/ProductAdd.js","component/ProductTabs/ProductTabs.js","page/ProductEdit/ProductEdit.js","page/ProductVariants/ProductVariants.js","page/ProductImages/ProductImages.js","page/ProductDescription/ProductDescription.js","page/ProductDescriptionEdit/ProductDescriptionEdit.js","page/RelatedProducts/RelatedProducts.js","page/HomeSlider/HomeSlider.js","page/Testimonial/Testimonial.js","page/NotFound/NotFound.js","page/Login/Login.js","page/Logout.js","page/Setting/setting.js","page/ShippingCharge/ShippingCharge.js","page/VoucherList/VoucherListStyle.js","page/VoucherList/VoucherList.js","page/VoucherAdd/VoucherAdd.js","page/VoucherEdit/VoucherEdit.js","page/OrderList/OrderList.js","page/OrderList/OrderListStyle.js","modules/Mount.js","api/updateCustomerStatus.js","api/sendCustomerEmail.js","page/CustomerList/CustomerList.js","page/OrderDetails/OrderDetails.js","page/OrderUpdate/OrderUpdate.js","page/Masters/Coupons/CouponsList.js","page/Masters/Coupons/CouponsAdd.js","page/Masters/Coupons/CouponsEdit.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","loginSuccess","response","type","loginFail","initialState","apiState","message","data","getCategoryTree","params","getCategoryTreeSuccess","getCategoryTreeFail","tree","createCategorySuccess","createCategoryFail","getCategoryViewSuccess","getCategoryViewFail","category","updateCategorySuccess","updateCategoryFail","deleteCategorySuccess","deleteCategoryFail","createProductSuccess","createProductFail","getProductList","getProductListSuccess","getProductListFail","list","getProductView","getProductViewSuccess","getProductViewFail","product","images","attr_data_for_sp_img","updateProductSuccess","updateProductFail","getAttributeListSuccess","getAttributeListFail","saveAttributeForVariantsSuccess","saveAttributeForVariantsFail","createProductVariantSuccess","createProductVariantFail","getProductVariantListSuccess","getProductVariantListFail","saveSpProdDataSuccess","saveSpProdDataFail","saveSpImgDataSuccess","saveSpImgDataFail","saveProdImgSuccess","saveProdImgFail","delProdImgSuccess","delProdImgFail","markImgThumbSuccess","markImgThumbFail","delProdVarSuccess","delProdVarFail","saveSliderImagesSuccess","saveSliderImagesFail","getSliderListSuccess","getSliderListFail","delSliderSuccess","delSliderFail","saveTestimonialSuccess","saveTestimonialFail","getTestimonialListSuccess","getTestimonialListFail","delTestimonialSuccess","delTestimonialFail","addDescriptionSuccess","addDescriptionFail","listDescriptionSuccess","listDescriptionFail","getDescriptionViewSuccess","getDescriptionViewFail","description","updateDescriptionSuccess","updateDescriptionFail","addRelProdSuccess","addRelProdFail","listRelProdSuccess","listRelProdFail","delRelProdSuccess","delRelProdFail","updateSettingSuccess","updateSettingFail","getSetting","getSettingSuccess","getSettingFail","updateShippingSuccess","updateShippingFail","getVoucherListSuccess","getVoucherListFail","createVoucherSuccess","createVoucherFail","getVoucherViewSuccess","getVoucherViewFail","coupon","updateVoucherSuccess","updateVoucherFail","getOrderList","getOrderListSuccess","getOrderListFail","getCustomerListSuccess","getCustomerListFail","getOrderDetails","getOrderDetailsSuccess","getOrderDetailsFail","order","updateOrderSuccess","updateOrderFail","combineReducers","login","state","action","strings","api_err_msg","createCategory","getCategoryView","updateCategory","deleteCategory","createProduct","updateProduct","getAttributeList","saveAttributeForVariants","createProductVariant","getProductVariantList","saveSpProdData","saveSpImgData","saveProdImg","delProdImg","markImgThumb","delProdVar","saveSliderImages","getSliderList","delSlider","saveTestimonial","getTestimonialList","delTestimonial","addDescription","listDescription","getDescriptionView","updateDescription","addRelProd","listRelProd","delRelProd","updateSetting","updateShipping","getVoucherList","createVoucher","getVoucherView","updateVoucher","getCustomerList","updateOrder","cnf","api","base_url","s3_base_url","domain","tinyKey","loginApi","a","axios","method","url","headers","loginSaga","MySaga","call","put","takeLatest","getCategoryTreeApi","getCategoryTreeSaga","createCategoryApi","createCategorySaga","getCategoryViewApi","getCategoryViewSaga","updateCategoryApi","updateCategorySaga","deleteCategoryApi","deleteCategorySaga","createProductApi","createProductSaga","getProductListApi","getProductListSaga","getProductViewApi","getProductViewSaga","updateProductApi","console","log","updateProductSaga","getAttributeListApi","getAttributeListSaga","saveAttributeForVariantsApi","saveAttributeForVariantsSaga","createProductVariantApi","createProductVariantSaga","getProductVariantListApi","getProductVariantListSaga","saveSpProdDataApi","saveSpProdDataSaga","saveSpImgDataApi","saveSpImgDataSaga","saveProdImgApi","saveProdImgSaga","delProdImgApi","delProdImgSaga","markImgThumbApi","markImgThumbSaga","delProdVarApi","delProdVarSaga","saveSliderImagesApi","saveSliderImagesSaga","getSliderListApi","getSliderListSaga","delSliderApi","delSliderSaga","saveTestimonialApi","saveTestimonialSaga","getTestimonialListApi","getTestimonialListSaga","delTestimonialApi","delTestimonialSaga","addDescriptionApi","addDescriptionSaga","listDescriptionApi","listDescriptionSaga","getDescriptionViewApi","getDescriptionViewSaga","updateDescriptionApi","updateDescriptionSaga","addRelProdApi","addRelProdSaga","listRelProdApi","listRelProdSaga","delRelProdApi","delRelProdSaga","updateSettingApi","getSettingApi","getSettingSaga","UpdateShippingApi","updateShippingSaga","updateShippingApi","getVoucherListApi","getVoucherListSaga","createVoucherApi","createVoucherSaga","getVoucherViewApi","getVoucherViewSaga","updateVoucherApi","updateVoucherSaga","getOrderListApi","getOrderListSaga","getCustomerListApi","getCustomerListSaga","getOrderDetailsApi","getOrderDetailsSaga","updateOrderApi","updateOrderSaga","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","run","updateSettingSaga","Sidebar","props","style","padding","textAlign","backgroundColor","src","Logo","alt","width","mode","theme","Item","key","to","SubMenu","title","validateImageFile","file","ext","status","getS3SingedUrl","filename","Promise","resolve","reject","fetch","localStorage","getItem","then","res","result","json","all","catch","PrivateRoute","Component","component","rest","render","Header","height","background","display","alignItems","justifyContent","borderBottom","position","top","zIndex","margin","actionBtn","placement","content","trigger","icon","UserOutlined","LoginContainer","styled","div","PageContainer","Home","onChange","date","dateString","Fragment","className","gutter","span","placeholder","TreeNode","TreeSelect","connect","getCategoryTreeState","createCategoryState","dispatch","getCategoryTreeReset","createCategoryReset","useState","parent_category_id","name","url_key","image","banner_img","m_banner_img","formData","setFormData","set_image","set_banner_img","set_m_banner_img","submitLoading","setSubmitLoading","redirect","setRedirect","useEffect","success","error","handleSubmit","image_filename","uuidv4","banner_img_filename","m_banner_img_filename","imageValRes","bannerImageValRes","mBannerImageValRes","alert","s3UrlRes1","s3UrlRes2","s3UrlRes3","layout","onFinish","label","showSearch","filterTreeNode","input","treeNode","toLowerCase","indexOf","dropdownStyle","maxHeight","overflow","allowClear","treeDefaultExpandAll","value","node","categoryOptions","finalJsx","map","children","length","push","id","rules","required","e","target","pattern","RegExp","addonBefore","extra","files","htmlType","loading","deleteCategoryState","deleteCategoryReset","refresh","setRefresh","active","border","treeData","getTreeData","finalArray","size","EditOutlined","onConfirm","category_id","okText","cancelText","okType","DeleteOutlined","showLine","showLeafIcon","showIcon","selectable","getCategoryViewState","updateCategoryState","getCategoryViewReset","updateCategoryReset","match","Form","useForm","form","imgChanged","setImgChanged","setFieldsValue","_","merge","maxWidth","Indicator","green","css","red","getProductListState","getProductListReset","tableData","setTableData","columns","dataIndex","textTransform","obj","is_sale_price","textDecoration","color","price","sale_price","row","dataSource","pagination","createProductState","createProductReset","gst","handleChange","handleNumberChange","onSelect","v","Option","defaultValue","min","ProductTabs","Tabs","TabPane","serRedirect","activeKey","tab","getProductViewState","updateProductState","getProductViewReset","updateProductReset","product_id","categories","is_exclusive","sku","short_description","tags","stock","meta_title","meta_keyword","meta_description","meta_image_url","xs","sm","md","lg","xl","disabled","TextArea","multiple","handleSelect","showCheckedStrategy","SHOW_ALL","checkedChildren","unCheckedChildren","checked","defaultChecked","getAttributeListState","saveAttributeForVariantsState","createProductVariantState","getProductVariantListState","saveSpProdDataState","saveSpImgDataState","delProdVarState","getAttributeListReset","saveAttributeForVariantsReset","createProductVariantReset","getProductVariantListReset","saveSpProdDataReset","saveSpImgDataReset","delProdVarReset","attributes_for_variants","set_attributes_for_variants","form2","form3","attributes","variant_data","set_variant_data","set_columns","display_separate","attribute_id","separateProductData","setSeparateProductData","separateImgData","setSeparateImgData","nature","split","variant_count","display_separate_product_by_attribute","display_separate_attribute_id","display_separate_img","attribute_for_separate_images","display_separate_img_attribute_id","product_variant_id","p","rowObj","option_value","attr","marginBottom","jsx","includes","arr","findIndex","attr_id","filter","item","handleAttributeChange","option_id","options","option","renderVariantForm","marginTop","onClick","saveProdImgState","delProdImgState","markImgThumbState","saveProdImgReset","delProdImgReset","markImgThumbReset","attribute_option_id","imgAttr","setImgAttr","handleImgSub","clear","img","marginRight","img_id","is_thumbnail","StarOutlined","addDescriptionState","listDescriptionState","addDescriptionReset","listDescriptionReset","tblData","sequence","getDescriptionViewState","updateDescriptionState","getDescriptionViewReset","updateDescriptionReset","description_id","initialValue","decodeURIComponent","apiKey","init","menubar","plugins","toolbar","fontsize_formats","onEditorChange","editor","encodeURI","addRelProdState","listRelProdState","delRelProdState","addRelProdReset","listRelProdReset","delRelProdReset","related_product_id","filterOption","saveSliderImagesState","getSliderListState","delSliderState","saveSliderImagesReset","getSliderListReset","delSliderReset","initial_values","mobile_image","resetFields","ar","m_image","saveTestimonialState","getTestimonialListState","delTestimonialState","saveTestimonialReset","getTestimonialListReset","delTestimonialReset","s3UrlRes","NotFound","loginState","loginReset","email","password","setItem","token","JSON","stringify","user","borderRadius","minWidth","Password","block","Logout","removeItem","notification","updateSettingState","getSettingState","updateSettingReset","getSettingReset","international_price","admin_email","offer_strip","IP","find","AE","OS","meta_value","updateShippingState","updateShippingReset","minimun_cart_value","shipping_price","international_shipping","SP","MCV","ISP","getVoucherListState","getVoucherListReset","code","discount","valid_from","Date","formattedDate","getMonth","getDate","getFullYear","valid_to","discountData","RangePicker","DatePicker","createVoucherState","createVoucherReset","no_of_usage_for_all","minimum_cart_value","maximum_discount_amount","showTime","format","updateVoucherState","getVoucherViewState","updateVoucherReset","getVoucherViewReset","voucher_id","validity","moment","getOrderListState","getOrderListReset","s_phone","order_no","order_date","payment_type","total","toUpperCase","CopyOutlined","customer_name","s_fname","s_lname","s_email","Mount","condition","undefined","Error","updateStatus","sendEmail","getCustomerListState","getCustomerListReset","selectedRows","setSelectedRows","clearSelectedRows","updateClearSelectedRows","openNotificationWithIcon","cell","String","sortable","contact_no","Modal","confirm","ExclamationCircleOutlined","onOk","updateCustomerStatus","showStatusChangeModal","export","sendCustomerEmail","customerList","created_at","toISOString","slice","print","exportHeaders","noHeader","defaultSortField","defaultSortAsc","highlightOnHover","selectableRows","onSelectedRowsChange","getOrderDetailsState","getOrderDetailsReset","order_id","orderData","setOrderData","product_name","quantity","items","thumbnail","b_fname","b_lname","b_email","grand_total","payment_mode","shipping_charge","coupon_code","b_phone","b_company_name","b_country","b_state","b_city","b_street","b_landmark","s_company_name","s_country","s_state","s_city","s_street","s_landmark","updateOrderState","updateOrderReset","currencyType","CouponsList","CouponsEdit","device","mobileS","mobileM","mobileL","mobileXL","tablet","laptopS","laptop","laptopL","desktop","desktopL","colors","primary","black","Sider","Layout","Footer","Content","App","path","exact","left","marginLeft","CouponsAdd","CategoryList","CategoryAdd","CategoryEdit","ProductList","ProductAdd","ProductEdit","ProductVariants","ProductImages","ProductDescription","ProductDescriptionEdit","RelatedProducts","HomeSlider","Testimonial","setting","ShippingCharge","VoucherList","VoucherAdd","VoucherEdit","OrderList","CustomerList","OrderDetails","OrderUpdate","Login","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.999a03a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0d9c2e82.jpg\";","export const LOGIN = 'LOGIN'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\nexport const LOGIN_RESET = 'LOGIN_RESET'\n\nexport const login = (params) => {\n    return { type: LOGIN, params }\n}\n\nexport const loginSuccess = (response) => {\n    return { type: LOGIN_SUCCESS, response }\n}\n\nexport const loginFail = (response) => {\n    return { type: LOGIN_FAIL, response }\n}\n\nexport const loginReset = () => {\n    return { type: LOGIN_RESET }\n}","import {\n    LOGIN,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGIN_RESET\n} from '../action/loginAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    data: {},\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                data: action.response.data\n            }\n\n        case LOGIN_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case LOGIN_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_CATEGORY_TREE = 'GET_CATEGORY_TREE'\nexport const GET_CATEGORY_TREE_SUCCESS = 'GET_CATEGORY_TREE_SUCCESS'\nexport const GET_CATEGORY_TREE_FAIL = 'GET_CATEGORY_TREE_FAIL'\nexport const GET_CATEGORY_TREE_RESET = 'GET_CATEGORY_TREE_RESET'\n\nexport const getCategoryTree = (params) => {\n    return { type: GET_CATEGORY_TREE, params }\n}\n\nexport const getCategoryTreeSuccess = (response) => {\n    return { type: GET_CATEGORY_TREE_SUCCESS, response }\n}\n\nexport const getCategoryTreeFail = (response) => {\n    return { type: GET_CATEGORY_TREE_FAIL, response }\n}\n\nexport const getCategoryTreeReset = () => {\n    return { type: GET_CATEGORY_TREE_RESET }\n}","import {\n    GET_CATEGORY_TREE,\n    GET_CATEGORY_TREE_SUCCESS,\n    GET_CATEGORY_TREE_FAIL,\n    GET_CATEGORY_TREE_RESET\n} from '../action/getCategoryTreeAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    tree: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_CATEGORY_TREE:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_CATEGORY_TREE_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                tree: action.response.data.tree\n            }\n\n        case GET_CATEGORY_TREE_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_CATEGORY_TREE_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const CREATE_CATEGORY = 'CREATE_CATEGORY'\nexport const CREATE_CATEGORY_SUCCESS = 'CREATE_CATEGORY_SUCCESS'\nexport const CREATE_CATEGORY_FAIL = 'CREATE_CATEGORY_FAIL'\nexport const CREATE_CATEGORY_RESET = 'CREATE_CATEGORY_RESET'\n\nexport const createCategory = (params) => {\n    return { type: CREATE_CATEGORY, params }\n}\n\nexport const createCategorySuccess = (response) => {\n    return { type: CREATE_CATEGORY_SUCCESS, response }\n}\n\nexport const createCategoryFail = (response) => {\n    return { type: CREATE_CATEGORY_FAIL, response }\n}\n\nexport const createCategoryReset = () => {\n    return { type: CREATE_CATEGORY_RESET }\n}","import {\n    CREATE_CATEGORY,\n    CREATE_CATEGORY_SUCCESS,\n    CREATE_CATEGORY_FAIL,\n    CREATE_CATEGORY_RESET\n} from '../action/createCategoryAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_CATEGORY:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case CREATE_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case CREATE_CATEGORY_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case CREATE_CATEGORY_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_CATEGORY_VIEW = 'GET_CATEGORY_VIEW'\nexport const GET_CATEGORY_VIEW_SUCCESS = 'GET_CATEGORY_VIEW_SUCCESS'\nexport const GET_CATEGORY_VIEW_FAIL = 'GET_CATEGORY_VIEW_FAIL'\nexport const GET_CATEGORY_VIEW_RESET = 'GET_CATEGORY_VIEW_RESET'\n\nexport const getCategoryView = (params) => {\n    return { type: GET_CATEGORY_VIEW, params }\n}\n\nexport const getCategoryViewSuccess = (response) => {\n    return { type: GET_CATEGORY_VIEW_SUCCESS, response }\n}\n\nexport const getCategoryViewFail = (response) => {\n    return { type: GET_CATEGORY_VIEW_FAIL, response }\n}\n\nexport const getCategoryViewReset = () => {\n    return { type: GET_CATEGORY_VIEW_RESET }\n}","import {\n    GET_CATEGORY_VIEW,\n    GET_CATEGORY_VIEW_SUCCESS,\n    GET_CATEGORY_VIEW_FAIL,\n    GET_CATEGORY_VIEW_RESET\n} from '../action/getCategoryViewAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    category: {},\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_CATEGORY_VIEW:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_CATEGORY_VIEW_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                category: action.response.data.category\n            }\n\n        case GET_CATEGORY_VIEW_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_CATEGORY_VIEW_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_CATEGORY = 'UPDATE_CATEGORY'\nexport const UPDATE_CATEGORY_SUCCESS = 'UPDATE_CATEGORY_SUCCESS'\nexport const UPDATE_CATEGORY_FAIL = 'UPDATE_CATEGORY_FAIL'\nexport const UPDATE_CATEGORY_RESET = 'UPDATE_CATEGORY_RESET'\n\nexport const updateCategory = (params) => {\n    return { type: UPDATE_CATEGORY, params }\n}\n\nexport const updateCategorySuccess = (response) => {\n    return { type: UPDATE_CATEGORY_SUCCESS, response }\n}\n\nexport const updateCategoryFail = (response) => {\n    return { type: UPDATE_CATEGORY_FAIL, response }\n}\n\nexport const updateCategoryReset = () => {\n    return { type: UPDATE_CATEGORY_RESET }\n}","import {\n    UPDATE_CATEGORY,\n    UPDATE_CATEGORY_SUCCESS,\n    UPDATE_CATEGORY_FAIL,\n    UPDATE_CATEGORY_RESET\n} from '../action/updateCategoryAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_CATEGORY:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_CATEGORY_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_CATEGORY_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DELETE_CATEGORY = 'DELETE_CATEGORY'\nexport const DELETE_CATEGORY_SUCCESS = 'DELETE_CATEGORY_SUCCESS'\nexport const DELETE_CATEGORY_FAIL = 'DELETE_CATEGORY_FAIL'\nexport const DELETE_CATEGORY_RESET = 'DELETE_CATEGORY_RESET'\n\nexport const deleteCategory = (params) => {\n    return { type: DELETE_CATEGORY, params }\n}\n\nexport const deleteCategorySuccess = (response) => {\n    return { type: DELETE_CATEGORY_SUCCESS, response }\n}\n\nexport const deleteCategoryFail = (response) => {\n    return { type: DELETE_CATEGORY_FAIL, response }\n}\n\nexport const deleteCategoryReset = () => {\n    return { type: DELETE_CATEGORY_RESET }\n}","import {\n    DELETE_CATEGORY,\n    DELETE_CATEGORY_SUCCESS,\n    DELETE_CATEGORY_FAIL,\n    DELETE_CATEGORY_RESET\n} from '../action/deleteCategoryAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DELETE_CATEGORY:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DELETE_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DELETE_CATEGORY_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DELETE_CATEGORY_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const CREATE_PRODUCT = 'CREATE_PRODUCT'\nexport const CREATE_PRODUCT_SUCCESS = 'CREATE_PRODUCT_SUCCESS'\nexport const CREATE_PRODUCT_FAIL = 'CREATE_PRODUCT_FAIL'\nexport const CREATE_PRODUCT_RESET = 'CREATE_PRODUCT_RESET'\n\nexport const createProduct = (params) => {\n    return { type: CREATE_PRODUCT, params }\n}\n\nexport const createProductSuccess = (response) => {\n    return { type: CREATE_PRODUCT_SUCCESS, response }\n}\n\nexport const createProductFail = (response) => {\n    return { type: CREATE_PRODUCT_FAIL, response }\n}\n\nexport const createProductReset = () => {\n    return { type: CREATE_PRODUCT_RESET }\n}","import {\n    CREATE_PRODUCT,\n    CREATE_PRODUCT_SUCCESS,\n    CREATE_PRODUCT_FAIL,\n    CREATE_PRODUCT_RESET\n} from '../action/createProductAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    data: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_PRODUCT:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case CREATE_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                data: action.response.data.data,\n            }\n\n        case CREATE_PRODUCT_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case CREATE_PRODUCT_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_PRODUCT_LIST = 'GET_PRODUCT_LIST'\nexport const GET_PRODUCT_LIST_SUCCESS = 'GET_PRODUCT_LIST_SUCCESS'\nexport const GET_PRODUCT_LIST_FAIL = 'GET_PRODUCT_LIST_FAIL'\nexport const GET_PRODUCT_LIST_RESET = 'GET_PRODUCT_LIST_RESET'\n\nexport const getProductList = (params) => {\n    return { type: GET_PRODUCT_LIST, params }\n}\n\nexport const getProductListSuccess = (response) => {\n    return { type: GET_PRODUCT_LIST_SUCCESS, response }\n}\n\nexport const getProductListFail = (response) => {\n    return { type: GET_PRODUCT_LIST_FAIL, response }\n}\n\nexport const getProductListReset = () => {\n    return { type: GET_PRODUCT_LIST_RESET }\n}","import {\n    GET_PRODUCT_LIST,\n    GET_PRODUCT_LIST_SUCCESS,\n    GET_PRODUCT_LIST_FAIL,\n    GET_PRODUCT_LIST_RESET\n} from '../action/getProductListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PRODUCT_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_PRODUCT_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_PRODUCT_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_PRODUCT_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_PRODUCT_VIEW = 'GET_PRODUCT_VIEW'\nexport const GET_PRODUCT_VIEW_SUCCESS = 'GET_PRODUCT_VIEW_SUCCESS'\nexport const GET_PRODUCT_VIEW_FAIL = 'GET_PRODUCT_VIEW_FAIL'\nexport const GET_PRODUCT_VIEW_RESET = 'GET_PRODUCT_VIEW_RESET'\n\nexport const getProductView = (params) => {\n    return { type: GET_PRODUCT_VIEW, params }\n}\n\nexport const getProductViewSuccess = (response) => {\n    return { type: GET_PRODUCT_VIEW_SUCCESS, response }\n}\n\nexport const getProductViewFail = (response) => {\n    return { type: GET_PRODUCT_VIEW_FAIL, response }\n}\n\nexport const getProductViewReset = () => {\n    return { type: GET_PRODUCT_VIEW_RESET }\n}","import {\n    GET_PRODUCT_VIEW,\n    GET_PRODUCT_VIEW_SUCCESS,\n    GET_PRODUCT_VIEW_FAIL,\n    GET_PRODUCT_VIEW_RESET\n} from '../action/getProductViewAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    product: {},\n    images: [],\n    attr_data_for_sp_img: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PRODUCT_VIEW:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_PRODUCT_VIEW_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                product: action.response.data.product,\n                images: action.response.data.images,\n                attr_data_for_sp_img: action.response.data.attr_data_for_sp_img,\n            }\n\n        case GET_PRODUCT_VIEW_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_PRODUCT_VIEW_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_PRODUCT = 'UPDATE_PRODUCT'\nexport const UPDATE_PRODUCT_SUCCESS = 'UPDATE_PRODUCT_SUCCESS'\nexport const UPDATE_PRODUCT_FAIL = 'UPDATE_PRODUCT_FAIL'\nexport const UPDATE_PRODUCT_RESET = 'UPDATE_PRODUCT_RESET'\n\nexport const updateProduct = (params) => {\n    return { type: UPDATE_PRODUCT, params }\n}\n\nexport const updateProductSuccess = (response) => {\n    return { type: UPDATE_PRODUCT_SUCCESS, response }\n}\n\nexport const updateProductFail = (response) => {\n    return { type: UPDATE_PRODUCT_FAIL, response }\n}\n\nexport const updateProductReset = () => {\n    return { type: UPDATE_PRODUCT_RESET }\n}","import {\n    UPDATE_PRODUCT,\n    UPDATE_PRODUCT_SUCCESS,\n    UPDATE_PRODUCT_FAIL,\n    UPDATE_PRODUCT_RESET\n} from '../action/updateProductAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_PRODUCT:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_PRODUCT_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_PRODUCT_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_ATTRIBUTE_LIST = 'GET_ATTRIBUTE_LIST'\nexport const GET_ATTRIBUTE_LIST_SUCCESS = 'GET_ATTRIBUTE_LIST_SUCCESS'\nexport const GET_ATTRIBUTE_LIST_FAIL = 'GET_ATTRIBUTE_LIST_FAIL'\nexport const GET_ATTRIBUTE_LIST_RESET = 'GET_ATTRIBUTE_LIST_RESET'\n\nexport const getAttributeList = (params) => {\n    return { type: GET_ATTRIBUTE_LIST, params }\n}\n\nexport const getAttributeListSuccess = (response) => {\n    return { type: GET_ATTRIBUTE_LIST_SUCCESS, response }\n}\n\nexport const getAttributeListFail = (response) => {\n    return { type: GET_ATTRIBUTE_LIST_FAIL, response }\n}\n\nexport const getAttributeListReset = () => {\n    return { type: GET_ATTRIBUTE_LIST_RESET }\n}","import {\n    GET_ATTRIBUTE_LIST,\n    GET_ATTRIBUTE_LIST_SUCCESS,\n    GET_ATTRIBUTE_LIST_FAIL,\n    GET_ATTRIBUTE_LIST_RESET\n} from '../action/getAttributeListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ATTRIBUTE_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_ATTRIBUTE_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_ATTRIBUTE_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_ATTRIBUTE_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_ATTRIBUTE_FOR_VARIANTS = 'SAVE_ATTRIBUTE_FOR_VARIANTS'\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS = 'SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS'\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL = 'SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL'\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_RESET = 'SAVE_ATTRIBUTE_FOR_VARIANTS_RESET'\n\nexport const saveAttributeForVariants = (params) => {\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS, params }\n}\n\nexport const saveAttributeForVariantsSuccess = (response) => {\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS, response }\n}\n\nexport const saveAttributeForVariantsFail = (response) => {\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL, response }\n}\n\nexport const saveAttributeForVariantsReset = () => {\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_RESET }\n}","import {\n    SAVE_ATTRIBUTE_FOR_VARIANTS,\n    SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS,\n    SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL,\n    SAVE_ATTRIBUTE_FOR_VARIANTS_RESET\n} from '../action/saveAttributeForVariantsAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_ATTRIBUTE_FOR_VARIANTS:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const CREATE_PRODUCT_VARIANT = 'CREATE_PRODUCT_VARIANT'\nexport const CREATE_PRODUCT_VARIANT_SUCCESS = 'CREATE_PRODUCT_VARIANT_SUCCESS'\nexport const CREATE_PRODUCT_VARIANT_FAIL = 'CREATE_PRODUCT_VARIANT_FAIL'\nexport const CREATE_PRODUCT_VARIANT_RESET = 'CREATE_PRODUCT_VARIANT_RESET'\n\nexport const createProductVariant = (params) => {\n    return { type: CREATE_PRODUCT_VARIANT, params }\n}\n\nexport const createProductVariantSuccess = (response) => {\n    return { type: CREATE_PRODUCT_VARIANT_SUCCESS, response }\n}\n\nexport const createProductVariantFail = (response) => {\n    return { type: CREATE_PRODUCT_VARIANT_FAIL, response }\n}\n\nexport const createProductVariantReset = () => {\n    return { type: CREATE_PRODUCT_VARIANT_RESET }\n}","import {\n    CREATE_PRODUCT_VARIANT,\n    CREATE_PRODUCT_VARIANT_SUCCESS,\n    CREATE_PRODUCT_VARIANT_FAIL,\n    CREATE_PRODUCT_VARIANT_RESET\n} from '../action/createProductVariantAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    data: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_PRODUCT_VARIANT:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case CREATE_PRODUCT_VARIANT_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                data: action.response.data.data,\n            }\n\n        case CREATE_PRODUCT_VARIANT_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case CREATE_PRODUCT_VARIANT_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_PRODUCT_VARIANT_LIST = 'GET_PRODUCT_VARIANT_LIST'\nexport const GET_PRODUCT_VARIANT_LIST_SUCCESS = 'GET_PRODUCT_VARIANT_LIST_SUCCESS'\nexport const GET_PRODUCT_VARIANT_LIST_FAIL = 'GET_PRODUCT_VARIANT_LIST_FAIL'\nexport const GET_PRODUCT_VARIANT_LIST_RESET = 'GET_PRODUCT_VARIANT_LIST_RESET'\n\nexport const getProductVariantList = (params) => {\n    return { type: GET_PRODUCT_VARIANT_LIST, params }\n}\n\nexport const getProductVariantListSuccess = (response) => {\n    return { type: GET_PRODUCT_VARIANT_LIST_SUCCESS, response }\n}\n\nexport const getProductVariantListFail = (response) => {\n    return { type: GET_PRODUCT_VARIANT_LIST_FAIL, response }\n}\n\nexport const getProductVariantListReset = () => {\n    return { type: GET_PRODUCT_VARIANT_LIST_RESET }\n}","import {\n    GET_PRODUCT_VARIANT_LIST,\n    GET_PRODUCT_VARIANT_LIST_SUCCESS,\n    GET_PRODUCT_VARIANT_LIST_FAIL,\n    GET_PRODUCT_VARIANT_LIST_RESET\n} from '../action/getProductVariantListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_PRODUCT_VARIANT_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_PRODUCT_VARIANT_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_PRODUCT_VARIANT_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_PRODUCT_VARIANT_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_SP_PROD_DATA = 'SAVE_SP_PROD_DATA'\nexport const SAVE_SP_PROD_DATA_SUCCESS = 'SAVE_SP_PROD_DATA_SUCCESS'\nexport const SAVE_SP_PROD_DATA_FAIL = 'SAVE_SP_PROD_DATA_FAIL'\nexport const SAVE_SP_PROD_DATA_RESET = 'SAVE_SP_PROD_DATA_RESET'\n\nexport const saveSpProdData = (params) => {\n    return { type: SAVE_SP_PROD_DATA, params }\n}\n\nexport const saveSpProdDataSuccess = (response) => {\n    return { type: SAVE_SP_PROD_DATA_SUCCESS, response }\n}\n\nexport const saveSpProdDataFail = (response) => {\n    return { type: SAVE_SP_PROD_DATA_FAIL, response }\n}\n\nexport const saveSpProdDataReset = () => {\n    return { type: SAVE_SP_PROD_DATA_RESET }\n}","import {\n    SAVE_SP_PROD_DATA,\n    SAVE_SP_PROD_DATA_SUCCESS,\n    SAVE_SP_PROD_DATA_FAIL,\n    SAVE_SP_PROD_DATA_RESET\n} from '../action/saveSpProdDataAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_SP_PROD_DATA:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_SP_PROD_DATA_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_SP_PROD_DATA_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_SP_PROD_DATA_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_SP_IMG_DATA = 'SAVE_SP_IMG_DATA'\nexport const SAVE_SP_IMG_DATA_SUCCESS = 'SAVE_SP_IMG_DATA_SUCCESS'\nexport const SAVE_SP_IMG_DATA_FAIL = 'SAVE_SP_IMG_DATA_FAIL'\nexport const SAVE_SP_IMG_DATA_RESET = 'SAVE_SP_IMG_DATA_RESET'\n\nexport const saveSpImgData = (params) => {\n    return { type: SAVE_SP_IMG_DATA, params }\n}\n\nexport const saveSpImgDataSuccess = (response) => {\n    return { type: SAVE_SP_IMG_DATA_SUCCESS, response }\n}\n\nexport const saveSpImgDataFail = (response) => {\n    return { type: SAVE_SP_IMG_DATA_FAIL, response }\n}\n\nexport const saveSpImgDataReset = () => {\n    return { type: SAVE_SP_IMG_DATA_RESET }\n}","import {\n    SAVE_SP_IMG_DATA,\n    SAVE_SP_IMG_DATA_SUCCESS,\n    SAVE_SP_IMG_DATA_FAIL,\n    SAVE_SP_IMG_DATA_RESET\n} from '../action/saveSpImgDataAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_SP_IMG_DATA:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_SP_IMG_DATA_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_SP_IMG_DATA_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_SP_IMG_DATA_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_PROD_IMG = 'SAVE_PROD_IMG'\nexport const SAVE_PROD_IMG_SUCCESS = 'SAVE_PROD_IMG_SUCCESS'\nexport const SAVE_PROD_IMG_FAIL = 'SAVE_PROD_IMG_FAIL'\nexport const SAVE_PROD_IMG_RESET = 'SAVE_PROD_IMG_RESET'\n\nexport const saveProdImg = (params) => {\n    return { type: SAVE_PROD_IMG, params }\n}\n\nexport const saveProdImgSuccess = (response) => {\n    return { type: SAVE_PROD_IMG_SUCCESS, response }\n}\n\nexport const saveProdImgFail = (response) => {\n    return { type: SAVE_PROD_IMG_FAIL, response }\n}\n\nexport const saveProdImgReset = () => {\n    return { type: SAVE_PROD_IMG_RESET }\n}","import {\n    SAVE_PROD_IMG,\n    SAVE_PROD_IMG_SUCCESS,\n    SAVE_PROD_IMG_FAIL,\n    SAVE_PROD_IMG_RESET\n} from '../action/saveProdImgAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_PROD_IMG:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_PROD_IMG_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_PROD_IMG_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_PROD_IMG_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DEL_PROD_IMG = 'DEL_PROD_IMG'\nexport const DEL_PROD_IMG_SUCCESS = 'DEL_PROD_IMG_SUCCESS'\nexport const DEL_PROD_IMG_FAIL = 'DEL_PROD_IMG_FAIL'\nexport const DEL_PROD_IMG_RESET = 'DEL_PROD_IMG_RESET'\n\nexport const delProdImg = (params) => {\n    return { type: DEL_PROD_IMG, params }\n}\n\nexport const delProdImgSuccess = (response) => {\n    return { type: DEL_PROD_IMG_SUCCESS, response }\n}\n\nexport const delProdImgFail = (response) => {\n    return { type: DEL_PROD_IMG_FAIL, response }\n}\n\nexport const delProdImgReset = () => {\n    return { type: DEL_PROD_IMG_RESET }\n}","import {\n    DEL_PROD_IMG,\n    DEL_PROD_IMG_SUCCESS,\n    DEL_PROD_IMG_FAIL,\n    DEL_PROD_IMG_RESET\n} from '../action/delProdImgAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DEL_PROD_IMG:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DEL_PROD_IMG_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DEL_PROD_IMG_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DEL_PROD_IMG_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const MARK_IMG_THUMB = 'MARK_IMG_THUMB'\nexport const MARK_IMG_THUMB_SUCCESS = 'MARK_IMG_THUMB_SUCCESS'\nexport const MARK_IMG_THUMB_FAIL = 'MARK_IMG_THUMB_FAIL'\nexport const MARK_IMG_THUMB_RESET = 'MARK_IMG_THUMB_RESET'\n\nexport const markImgThumb = (params) => {\n    return { type: MARK_IMG_THUMB, params }\n}\n\nexport const markImgThumbSuccess = (response) => {\n    return { type: MARK_IMG_THUMB_SUCCESS, response }\n}\n\nexport const markImgThumbFail = (response) => {\n    return { type: MARK_IMG_THUMB_FAIL, response }\n}\n\nexport const markImgThumbReset = () => {\n    return { type: MARK_IMG_THUMB_RESET }\n}","import {\n    MARK_IMG_THUMB,\n    MARK_IMG_THUMB_SUCCESS,\n    MARK_IMG_THUMB_FAIL,\n    MARK_IMG_THUMB_RESET\n} from '../action/markImgThumbAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case MARK_IMG_THUMB:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case MARK_IMG_THUMB_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case MARK_IMG_THUMB_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case MARK_IMG_THUMB_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DEL_PROD_VAR = 'DEL_PROD_VAR'\nexport const DEL_PROD_VAR_SUCCESS = 'DEL_PROD_VAR_SUCCESS'\nexport const DEL_PROD_VAR_FAIL = 'DEL_PROD_VAR_FAIL'\nexport const DEL_PROD_VAR_RESET = 'DEL_PROD_VAR_RESET'\n\nexport const delProdVar = (params) => {\n    return { type: DEL_PROD_VAR, params }\n}\n\nexport const delProdVarSuccess = (response) => {\n    return { type: DEL_PROD_VAR_SUCCESS, response }\n}\n\nexport const delProdVarFail = (response) => {\n    return { type: DEL_PROD_VAR_FAIL, response }\n}\n\nexport const delProdVarReset = () => {\n    return { type: DEL_PROD_VAR_RESET }\n}","import {\n    DEL_PROD_VAR,\n    DEL_PROD_VAR_SUCCESS,\n    DEL_PROD_VAR_FAIL,\n    DEL_PROD_VAR_RESET\n} from '../action/delProdVarAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DEL_PROD_VAR:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DEL_PROD_VAR_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DEL_PROD_VAR_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DEL_PROD_VAR_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_SLIDER_IMAGES = 'SAVE_SLIDER_IMAGES'\nexport const SAVE_SLIDER_IMAGES_SUCCESS = 'SAVE_SLIDER_IMAGES_SUCCESS'\nexport const SAVE_SLIDER_IMAGES_FAIL = 'SAVE_SLIDER_IMAGES_FAIL'\nexport const SAVE_SLIDER_IMAGES_RESET = 'SAVE_SLIDER_IMAGES_RESET'\n\nexport const saveSliderImages = (params) => {\n    return { type: SAVE_SLIDER_IMAGES, params }\n}\n\nexport const saveSliderImagesSuccess = (response) => {\n    return { type: SAVE_SLIDER_IMAGES_SUCCESS, response }\n}\n\nexport const saveSliderImagesFail = (response) => {\n    return { type: SAVE_SLIDER_IMAGES_FAIL, response }\n}\n\nexport const saveSliderImagesReset = () => {\n    return { type: SAVE_SLIDER_IMAGES_RESET }\n}","import {\n    SAVE_SLIDER_IMAGES,\n    SAVE_SLIDER_IMAGES_SUCCESS,\n    SAVE_SLIDER_IMAGES_FAIL,\n    SAVE_SLIDER_IMAGES_RESET\n} from '../action/saveSliderImagesAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_SLIDER_IMAGES:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_SLIDER_IMAGES_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_SLIDER_IMAGES_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_SLIDER_IMAGES_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_SLIDER_LIST = 'GET_SLIDER_LIST'\nexport const GET_SLIDER_LIST_SUCCESS = 'GET_SLIDER_LIST_SUCCESS'\nexport const GET_SLIDER_LIST_FAIL = 'GET_SLIDER_LIST_FAIL'\nexport const GET_SLIDER_LIST_RESET = 'GET_SLIDER_LIST_RESET'\n\nexport const getSliderList = (params) => {\n    return { type: GET_SLIDER_LIST, params }\n}\n\nexport const getSliderListSuccess = (response) => {\n    return { type: GET_SLIDER_LIST_SUCCESS, response }\n}\n\nexport const getSliderListFail = (response) => {\n    return { type: GET_SLIDER_LIST_FAIL, response }\n}\n\nexport const getSliderListReset = () => {\n    return { type: GET_SLIDER_LIST_RESET }\n}","import {\n    GET_SLIDER_LIST,\n    GET_SLIDER_LIST_SUCCESS,\n    GET_SLIDER_LIST_FAIL,\n    GET_SLIDER_LIST_RESET\n} from '../action/getSliderListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_SLIDER_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_SLIDER_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_SLIDER_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_SLIDER_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DEL_SLIDER = 'DEL_SLIDER'\nexport const DEL_SLIDER_SUCCESS = 'DEL_SLIDER_SUCCESS'\nexport const DEL_SLIDER_FAIL = 'DEL_SLIDER_FAIL'\nexport const DEL_SLIDER_RESET = 'DEL_SLIDER_RESET'\n\nexport const delSlider = (params) => {\n    return { type: DEL_SLIDER, params }\n}\n\nexport const delSliderSuccess = (response) => {\n    return { type: DEL_SLIDER_SUCCESS, response }\n}\n\nexport const delSliderFail = (response) => {\n    return { type: DEL_SLIDER_FAIL, response }\n}\n\nexport const delSliderReset = () => {\n    return { type: DEL_SLIDER_RESET }\n}","import {\n    DEL_SLIDER,\n    DEL_SLIDER_SUCCESS,\n    DEL_SLIDER_FAIL,\n    DEL_SLIDER_RESET\n} from '../action/delSliderAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DEL_SLIDER:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DEL_SLIDER_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DEL_SLIDER_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DEL_SLIDER_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const SAVE_TESTIMONIAL = 'SAVE_TESTIMONIAL'\nexport const SAVE_TESTIMONIAL_SUCCESS = 'SAVE_TESTIMONIAL_SUCCESS'\nexport const SAVE_TESTIMONIAL_FAIL = 'SAVE_TESTIMONIAL_FAIL'\nexport const SAVE_TESTIMONIAL_RESET = 'SAVE_TESTIMONIAL_RESET'\n\nexport const saveTestimonial = (params) => {\n    return { type: SAVE_TESTIMONIAL, params }\n}\n\nexport const saveTestimonialSuccess = (response) => {\n    return { type: SAVE_TESTIMONIAL_SUCCESS, response }\n}\n\nexport const saveTestimonialFail = (response) => {\n    return { type: SAVE_TESTIMONIAL_FAIL, response }\n}\n\nexport const saveTestimonialReset = () => {\n    return { type: SAVE_TESTIMONIAL_RESET }\n}","import {\n    SAVE_TESTIMONIAL,\n    SAVE_TESTIMONIAL_SUCCESS,\n    SAVE_TESTIMONIAL_FAIL,\n    SAVE_TESTIMONIAL_RESET\n} from '../action/saveTestimonialAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SAVE_TESTIMONIAL:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case SAVE_TESTIMONIAL_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n            }\n\n        case SAVE_TESTIMONIAL_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case SAVE_TESTIMONIAL_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_TESTIMONIAL_LIST = 'GET_TESTIMONIAL_LIST'\nexport const GET_TESTIMONIAL_LIST_SUCCESS = 'GET_TESTIMONIAL_LIST_SUCCESS'\nexport const GET_TESTIMONIAL_LIST_FAIL = 'GET_TESTIMONIAL_LIST_FAIL'\nexport const GET_TESTIMONIAL_LIST_RESET = 'GET_TESTIMONIAL_LIST_RESET'\n\nexport const getTestimonialList = (params) => {\n    return { type: GET_TESTIMONIAL_LIST, params }\n}\n\nexport const getTestimonialListSuccess = (response) => {\n    return { type: GET_TESTIMONIAL_LIST_SUCCESS, response }\n}\n\nexport const getTestimonialListFail = (response) => {\n    return { type: GET_TESTIMONIAL_LIST_FAIL, response }\n}\n\nexport const getTestimonialListReset = () => {\n    return { type: GET_TESTIMONIAL_LIST_RESET }\n}","import {\n    GET_TESTIMONIAL_LIST,\n    GET_TESTIMONIAL_LIST_SUCCESS,\n    GET_TESTIMONIAL_LIST_FAIL,\n    GET_TESTIMONIAL_LIST_RESET\n} from '../action/getTestimonialListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_TESTIMONIAL_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_TESTIMONIAL_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_TESTIMONIAL_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_TESTIMONIAL_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DEL_TESTIMONIAL = 'DEL_TESTIMONIAL'\nexport const DEL_TESTIMONIAL_SUCCESS = 'DEL_TESTIMONIAL_SUCCESS'\nexport const DEL_TESTIMONIAL_FAIL = 'DEL_TESTIMONIAL_FAIL'\nexport const DEL_TESTIMONIAL_RESET = 'DEL_TESTIMONIAL_RESET'\n\nexport const delTestimonial = (params) => {\n    return { type: DEL_TESTIMONIAL, params }\n}\n\nexport const delTestimonialSuccess = (response) => {\n    return { type: DEL_TESTIMONIAL_SUCCESS, response }\n}\n\nexport const delTestimonialFail = (response) => {\n    return { type: DEL_TESTIMONIAL_FAIL, response }\n}\n\nexport const delTestimonialReset = () => {\n    return { type: DEL_TESTIMONIAL_RESET }\n}","import {\n    DEL_TESTIMONIAL,\n    DEL_TESTIMONIAL_SUCCESS,\n    DEL_TESTIMONIAL_FAIL,\n    DEL_TESTIMONIAL_RESET\n} from '../action/delTestimonialAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DEL_TESTIMONIAL:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DEL_TESTIMONIAL_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DEL_TESTIMONIAL_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DEL_TESTIMONIAL_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const ADD_DESCRIPTION = 'ADD_DESCRIPTION'\nexport const ADD_DESCRIPTION_SUCCESS = 'ADD_DESCRIPTION_SUCCESS'\nexport const ADD_DESCRIPTION_FAIL = 'ADD_DESCRIPTION_FAIL'\nexport const ADD_DESCRIPTION_RESET = 'ADD_DESCRIPTION_RESET'\n\nexport const addDescription = (params) => {\n    return { type: ADD_DESCRIPTION, params }\n}\n\nexport const addDescriptionSuccess = (response) => {\n    return { type: ADD_DESCRIPTION_SUCCESS, response }\n}\n\nexport const addDescriptionFail = (response) => {\n    return { type: ADD_DESCRIPTION_FAIL, response }\n}\n\nexport const addDescriptionReset = () => {\n    return { type: ADD_DESCRIPTION_RESET }\n}","import {\n    ADD_DESCRIPTION,\n    ADD_DESCRIPTION_SUCCESS,\n    ADD_DESCRIPTION_FAIL,\n    ADD_DESCRIPTION_RESET\n} from '../action/addDescriptionAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case ADD_DESCRIPTION:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case ADD_DESCRIPTION_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case ADD_DESCRIPTION_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case ADD_DESCRIPTION_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const LIST_DESCRIPTION = 'LIST_DESCRIPTION'\nexport const LIST_DESCRIPTION_SUCCESS = 'LIST_DESCRIPTION_SUCCESS'\nexport const LIST_DESCRIPTION_FAIL = 'LIST_DESCRIPTION_FAIL'\nexport const LIST_DESCRIPTION_RESET = 'LIST_DESCRIPTION_RESET'\n\nexport const listDescription = (params) => {\n    return { type: LIST_DESCRIPTION, params }\n}\n\nexport const listDescriptionSuccess = (response) => {\n    return { type: LIST_DESCRIPTION_SUCCESS, response }\n}\n\nexport const listDescriptionFail = (response) => {\n    return { type: LIST_DESCRIPTION_FAIL, response }\n}\n\nexport const listDescriptionReset = () => {\n    return { type: LIST_DESCRIPTION_RESET }\n}","import {\n    LIST_DESCRIPTION,\n    LIST_DESCRIPTION_SUCCESS,\n    LIST_DESCRIPTION_FAIL,\n    LIST_DESCRIPTION_RESET\n} from '../action/listDescriptionAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LIST_DESCRIPTION:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case LIST_DESCRIPTION_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case LIST_DESCRIPTION_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case LIST_DESCRIPTION_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_DESCRIPTION_VIEW = 'GET_DESCRIPTION_VIEW'\nexport const GET_DESCRIPTION_VIEW_SUCCESS = 'GET_DESCRIPTION_VIEW_SUCCESS'\nexport const GET_DESCRIPTION_VIEW_FAIL = 'GET_DESCRIPTION_VIEW_FAIL'\nexport const GET_DESCRIPTION_VIEW_RESET = 'GET_DESCRIPTION_VIEW_RESET'\n\nexport const getDescriptionView = (params) => {\n    return { type: GET_DESCRIPTION_VIEW, params }\n}\n\nexport const getDescriptionViewSuccess = (response) => {\n    return { type: GET_DESCRIPTION_VIEW_SUCCESS, response }\n}\n\nexport const getDescriptionViewFail = (response) => {\n    return { type: GET_DESCRIPTION_VIEW_FAIL, response }\n}\n\nexport const getDescriptionViewReset = () => {\n    return { type: GET_DESCRIPTION_VIEW_RESET }\n}","import {\n    GET_DESCRIPTION_VIEW,\n    GET_DESCRIPTION_VIEW_SUCCESS,\n    GET_DESCRIPTION_VIEW_FAIL,\n    GET_DESCRIPTION_VIEW_RESET\n} from '../action/getDescriptionViewAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    description: {},\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_DESCRIPTION_VIEW:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_DESCRIPTION_VIEW_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                description: action.response.data.description\n            }\n\n        case GET_DESCRIPTION_VIEW_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_DESCRIPTION_VIEW_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_DESCRIPTION = 'UPDATE_DESCRIPTION'\nexport const UPDATE_DESCRIPTION_SUCCESS = 'UPDATE_DESCRIPTION_SUCCESS'\nexport const UPDATE_DESCRIPTION_FAIL = 'UPDATE_DESCRIPTION_FAIL'\nexport const UPDATE_DESCRIPTION_RESET = 'UPDATE_DESCRIPTION_RESET'\n\nexport const updateDescription = (params) => {\n    return { type: UPDATE_DESCRIPTION, params }\n}\n\nexport const updateDescriptionSuccess = (response) => {\n    return { type: UPDATE_DESCRIPTION_SUCCESS, response }\n}\n\nexport const updateDescriptionFail = (response) => {\n    return { type: UPDATE_DESCRIPTION_FAIL, response }\n}\n\nexport const updateDescriptionReset = () => {\n    return { type: UPDATE_DESCRIPTION_RESET }\n}","import {\n    UPDATE_DESCRIPTION,\n    UPDATE_DESCRIPTION_SUCCESS,\n    UPDATE_DESCRIPTION_FAIL,\n    UPDATE_DESCRIPTION_RESET\n} from '../action/updateDescriptionAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_DESCRIPTION:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_DESCRIPTION_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_DESCRIPTION_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_DESCRIPTION_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const ADD_REL_PROD = 'ADD_REL_PROD'\nexport const ADD_REL_PROD_SUCCESS = 'ADD_REL_PROD_SUCCESS'\nexport const ADD_REL_PROD_FAIL = 'ADD_REL_PROD_FAIL'\nexport const ADD_REL_PROD_RESET = 'ADD_REL_PROD_RESET'\n\nexport const addRelProd = (params) => {\n    return { type: ADD_REL_PROD, params }\n}\n\nexport const addRelProdSuccess = (response) => {\n    return { type: ADD_REL_PROD_SUCCESS, response }\n}\n\nexport const addRelProdFail = (response) => {\n    return { type: ADD_REL_PROD_FAIL, response }\n}\n\nexport const addRelProdReset = () => {\n    return { type: ADD_REL_PROD_RESET }\n}","import {\n    ADD_REL_PROD,\n    ADD_REL_PROD_SUCCESS,\n    ADD_REL_PROD_FAIL,\n    ADD_REL_PROD_RESET\n} from '../action/addRelProdAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case ADD_REL_PROD:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case ADD_REL_PROD_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case ADD_REL_PROD_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case ADD_REL_PROD_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const LIST_REL_PROD = 'LIST_REL_PROD'\nexport const LIST_REL_PROD_SUCCESS = 'LIST_REL_PROD_SUCCESS'\nexport const LIST_REL_PROD_FAIL = 'LIST_REL_PROD_FAIL'\nexport const LIST_REL_PROD_RESET = 'LIST_REL_PROD_RESET'\n\nexport const listRelProd = (params) => {\n    return { type: LIST_REL_PROD, params }\n}\n\nexport const listRelProdSuccess = (response) => {\n    return { type: LIST_REL_PROD_SUCCESS, response }\n}\n\nexport const listRelProdFail = (response) => {\n    return { type: LIST_REL_PROD_FAIL, response }\n}\n\nexport const listRelProdReset = () => {\n    return { type: LIST_REL_PROD_RESET }\n}","import {\n    LIST_REL_PROD,\n    LIST_REL_PROD_SUCCESS,\n    LIST_REL_PROD_FAIL,\n    LIST_REL_PROD_RESET\n} from '../action/listRelProdAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case LIST_REL_PROD:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case LIST_REL_PROD_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case LIST_REL_PROD_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case LIST_REL_PROD_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const DEL_REL_PROD = 'DEL_REL_PROD'\nexport const DEL_REL_PROD_SUCCESS = 'DEL_REL_PROD_SUCCESS'\nexport const DEL_REL_PROD_FAIL = 'DEL_REL_PROD_FAIL'\nexport const DEL_REL_PROD_RESET = 'DEL_REL_PROD_RESET'\n\nexport const delRelProd = (params) => {\n    return { type: DEL_REL_PROD, params }\n}\n\nexport const delRelProdSuccess = (response) => {\n    return { type: DEL_REL_PROD_SUCCESS, response }\n}\n\nexport const delRelProdFail = (response) => {\n    return { type: DEL_REL_PROD_FAIL, response }\n}\n\nexport const delRelProdReset = () => {\n    return { type: DEL_REL_PROD_RESET }\n}","import {\n    DEL_REL_PROD,\n    DEL_REL_PROD_SUCCESS,\n    DEL_REL_PROD_FAIL,\n    DEL_REL_PROD_RESET\n} from '../action/delRelProdAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DEL_REL_PROD:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case DEL_REL_PROD_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case DEL_REL_PROD_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case DEL_REL_PROD_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_SETTING = 'UPDATE_SETTING'\nexport const UPDATE_SETTING_SUCCESS = 'UPDATE_SETTING_SUCCESS'\nexport const UPDATE_SETTING_FAIL = 'UPDATE_SETTING_FAIL'\nexport const UPDATE_SETTING_RESET = 'SAVE_TESTIMONIAL_RESET'\n\nexport const updateSetting = (params) => {\n    return { type: UPDATE_SETTING, params }\n}\n\nexport const updateSettingSuccess = (response) => {\n    return { type: UPDATE_SETTING_SUCCESS, response }\n}\n\nexport const updateSettingFail = (response) => {\n    return { type: UPDATE_SETTING_FAIL, response }\n}\n\nexport const updateSettingReset = () => {\n    return { type: UPDATE_SETTING_RESET }\n}","import {\n    UPDATE_SETTING,\n    UPDATE_SETTING_SUCCESS,\n    UPDATE_SETTING_FAIL,\n    UPDATE_SETTING_RESET\n} from '../action/updateSettingAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_SETTING:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_SETTING_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_SETTING_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_SETTING_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_SETTING = 'GET_SETTING'\nexport const GET_SETTING_SUCCESS = 'GET_SETTING_SUCCESS'\nexport const GET_SETTING_FAIL = 'GET_SETTING_FAIL'\nexport const GET_SETTING_RESET = 'GET_SETTING_RESET'\n\nexport const getSetting = (params) => {\n    return { type: GET_SETTING, params }\n}\n\nexport const getSettingSuccess = (response) => {\n    return { type: GET_SETTING_SUCCESS, response }\n}\n\nexport const getSettingFail = (response) => {\n    return { type: GET_SETTING_FAIL, response }\n}\n\nexport const getSettingReset = () => {\n    return { type: GET_SETTING_RESET }\n}","import {\n    GET_SETTING,\n    GET_SETTING_SUCCESS,\n    GET_SETTING_FAIL,\n    GET_SETTING_RESET\n} from '../action/getSettingAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_SETTING:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_SETTING_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_SETTING_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_SETTING_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_SHIPPING = 'UPDATE_SHIPPING'\nexport const UPDATE_SHIPPING_SUCCESS = 'UPDATE_SHIPPING_SUCCESS'\nexport const UPDATE_SHIPPING_FAIL = 'UPDATE_SHIPPING_FAIL'\nexport const UPDATE_SHIPPING_RESET = 'UPDATE_SHIPPING_RESET'\n\nexport const updateShipping = (params) => {\n    return { type: UPDATE_SHIPPING, params }\n}\n\nexport const updateShippingSuccess = (response) => {\n    return { type: UPDATE_SHIPPING_SUCCESS, response }\n}\n\nexport const updateShippingFail = (response) => {\n    return { type: UPDATE_SHIPPING_FAIL, response }\n}\n\nexport const updateShippingReset = () => {\n    return { type: UPDATE_SHIPPING_RESET }\n}","import {\n    UPDATE_SHIPPING,\n    UPDATE_SHIPPING_SUCCESS,\n    UPDATE_SHIPPING_FAIL,\n    UPDATE_SHIPPING_RESET\n} from '../action/updateShippingAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_SHIPPING:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_SHIPPING_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_SHIPPING_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_SHIPPING_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_VOUCHER_LIST = 'GET_VOUCHER_LIST'\nexport const GET_VOUCHER_LIST_SUCCESS = 'GET_VOUCHER_LIST_SUCCESS'\nexport const GET_VOUCHER_LIST_FAIL = 'GET_VOUCHER_LIST_FAIL'\nexport const GET_VOUCHER_LIST_RESET = 'GET_VOUCHER_LIST_RESET'\n\nexport const getVoucherList = (params) => {\n    return { type: GET_VOUCHER_LIST, params }\n}\n\nexport const getVoucherListSuccess = (response) => {\n    return { type: GET_VOUCHER_LIST_SUCCESS, response }\n}\n\nexport const getVoucherListFail = (response) => {\n    return { type: GET_VOUCHER_LIST_FAIL, response }\n}\n\nexport const getVoucherListReset = () => {\n    return { type: GET_VOUCHER_LIST_RESET }\n}","import {\n    GET_VOUCHER_LIST,\n    GET_VOUCHER_LIST_SUCCESS,\n    GET_VOUCHER_LIST_FAIL,\n    GET_VOUCHER_LIST_RESET\n} from '../action/getVoucherListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_VOUCHER_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_VOUCHER_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_VOUCHER_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_VOUCHER_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const CREATE_VOUCHER = 'CREATE_VOUCHER'\nexport const CREATE_VOUCHER_SUCCESS = 'CREATE_VOUCHER_SUCCESS'\nexport const CREATE_VOUCHER_FAIL = 'CREATE_VOUCHER_FAIL'\nexport const CREATE_VOUCHER_RESET = 'CREATE_VOUCHER_RESET'\n\nexport const createVoucher = (params) => {\n    return { type: CREATE_VOUCHER, params }\n}\n\nexport const createVoucherSuccess = (response) => {\n    return { type: CREATE_VOUCHER_SUCCESS, response }\n}\n\nexport const createVoucherFail = (response) => {\n    return { type: CREATE_VOUCHER_FAIL, response }\n}\n\nexport const createVoucherReset = () => {\n    return { type: CREATE_VOUCHER_RESET }\n}","import {\n    CREATE_VOUCHER,\n    CREATE_VOUCHER_SUCCESS,\n    CREATE_VOUCHER_FAIL,\n    CREATE_VOUCHER_RESET\n} from '../action/createVoucherAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    data: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_VOUCHER:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case CREATE_VOUCHER_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                data: action.response.data.data,\n            }\n\n        case CREATE_VOUCHER_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case CREATE_VOUCHER_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_VOUCHER_VIEW = 'GET_VOUCHER_VIEW'\nexport const GET_VOUCHER_VIEW_SUCCESS = 'GET_VOUCHER_VIEW_SUCCESS'\nexport const GET_VOUCHER_VIEW_FAIL = 'GET_VOUCHER_VIEW_FAIL'\nexport const GET_VOUCHER_VIEW_RESET = 'GET_VOUCHER_VIEW_RESET'\n\nexport const getVoucherView = (params) => {\n    return { type: GET_VOUCHER_VIEW, params }\n}\n\nexport const getVoucherViewSuccess = (response) => {\n    return { type: GET_VOUCHER_VIEW_SUCCESS, response }\n}\n\nexport const getVoucherViewFail = (response) => {\n    return { type: GET_VOUCHER_VIEW_FAIL, response }\n}\n\nexport const getVoucherViewReset = () => {\n    return { type: GET_VOUCHER_VIEW_RESET }\n}","import {\n    GET_VOUCHER_VIEW,\n    GET_VOUCHER_VIEW_SUCCESS,\n    GET_VOUCHER_VIEW_FAIL,\n    GET_VOUCHER_VIEW_RESET\n} from '../action/getVoucherViewAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    coupon: {},\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_VOUCHER_VIEW:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_VOUCHER_VIEW_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                coupon: action.response.data.coupon,\n            }\n\n        case GET_VOUCHER_VIEW_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_VOUCHER_VIEW_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_VOUCHER = 'UPDATE_VOUCHER'\nexport const UPDATE_VOUCHER_SUCCESS = 'UPDATE_VOUCHER_SUCCESS'\nexport const UPDATE_VOUCHER_FAIL = 'UPDATE_VOUCHER_FAIL'\nexport const UPDATE_VOUCHER_RESET = 'UPDATE_VOUCHER_RESET'\n\nexport const updateVoucher = (params) => {\n    return { type: UPDATE_VOUCHER, params }\n}\n\nexport const updateVoucherSuccess = (response) => {\n    return { type: UPDATE_VOUCHER_SUCCESS, response }\n}\n\nexport const updateVoucherFail = (response) => {\n    return { type: UPDATE_VOUCHER_FAIL, response }\n}\n\nexport const updateVoucherReset = () => {\n    return { type: UPDATE_VOUCHER_RESET }\n}","import {\n    UPDATE_VOUCHER,\n    UPDATE_VOUCHER_SUCCESS,\n    UPDATE_VOUCHER_FAIL,\n    UPDATE_VOUCHER_RESET\n} from '../action/updateVoucherAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_VOUCHER:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_VOUCHER_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message\n            }\n\n        case UPDATE_VOUCHER_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_VOUCHER_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_ORDER_LIST = 'GET_ORDER_LIST'\nexport const GET_ORDER_LIST_SUCCESS = 'GET_ORDER_LIST_SUCCESS'\nexport const GET_ORDER_LIST_FAIL = 'GET_ORDER_LIST_FAIL'\nexport const GET_ORDER_LIST_RESET = 'GET_ORDER_LIST_RESET'\n\nexport const getOrderList = (params) => {\n    return { type: GET_ORDER_LIST, params }\n}\n\nexport const getOrderListSuccess = (response) => {\n    return { type: GET_ORDER_LIST_SUCCESS, response }\n}\n\nexport const getOrderListFail = (response) => {\n    return { type: GET_ORDER_LIST_FAIL, response }\n}\n\nexport const getOrderListReset = () => {\n    return { type: GET_ORDER_LIST_RESET }\n}","import {\n    GET_ORDER_LIST,\n    GET_ORDER_LIST_SUCCESS,\n    GET_ORDER_LIST_FAIL,\n    GET_ORDER_LIST_RESET\n} from '../action/getOrderListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ORDER_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_ORDER_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_ORDER_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_ORDER_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_CUSTOMER_LIST = 'GET_CUSTOMER_LIST'\nexport const GET_CUSTOMER_LIST_SUCCESS = 'GET_CUSTOMER_LIST_SUCCESS'\nexport const GET_CUSTOMER_LIST_FAIL = 'GET_CUSTOMER_LIST_FAIL'\nexport const GET_CUSTOMER_LIST_RESET = 'GET_CUSTOMER_LIST_RESET'\n\nexport const getCustomerList = (params) => {\n    return { type: GET_CUSTOMER_LIST, params }\n}\n\nexport const getCustomerListSuccess = (response) => {\n    return { type: GET_CUSTOMER_LIST_SUCCESS, response }\n}\n\nexport const getCustomerListFail = (response) => {\n    return { type: GET_CUSTOMER_LIST_FAIL, response }\n}\n\nexport const getCustomerListReset = () => {\n    return { type: GET_CUSTOMER_LIST_RESET }\n}","import {\n    GET_CUSTOMER_LIST,\n    GET_CUSTOMER_LIST_SUCCESS,\n    GET_CUSTOMER_LIST_FAIL,\n    GET_CUSTOMER_LIST_RESET\n} from '../action/getCustomerListAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    list: [],\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_CUSTOMER_LIST:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_CUSTOMER_LIST_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                list: action.response.data.list\n            }\n\n        case GET_CUSTOMER_LIST_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_CUSTOMER_LIST_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const GET_ORDER_DETAILS = 'GET_ORDER_DETAILS'\nexport const GET_ORDER_DETAILS_SUCCESS = 'GET_ORDER_DETAILS_SUCCESS'\nexport const GET_ORDER_DETAILS_FAIL = ' GET_ORDER_DETAILS_FAIL'\nexport const GET_ORDER_DETAILS_RESET = 'GET_ORDER_DETAILS_RESET'\n\nexport const getOrderDetails = (params) => {\n    return { type: GET_ORDER_DETAILS, params }\n}\n\nexport const getOrderDetailsSuccess = (response) => {\n    return { type: GET_ORDER_DETAILS_SUCCESS, response }\n}\n\nexport const getOrderDetailsFail = (response) => {\n    return { type: GET_ORDER_DETAILS_FAIL, response }\n}\n\nexport const getOrderDetailsReset = () => {\n    return { type: GET_ORDER_DETAILS_RESET }\n}","import {\n    GET_ORDER_DETAILS,\n    GET_ORDER_DETAILS_SUCCESS,\n    GET_ORDER_DETAILS_FAIL,\n    GET_ORDER_DETAILS_RESET\n} from '../action/getOrderDetailsAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    order: {},\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ORDER_DETAILS:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case GET_ORDER_DETAILS_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                order: action.response.data.order,\n            }\n\n        case GET_ORDER_DETAILS_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case GET_ORDER_DETAILS_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","export const UPDATE_ORDER = 'UPDATE_ORDER'\nexport const UPDATE_ORDER_SUCCESS = 'UPDATE_ORDER_SUCCESS'\nexport const UPDATE_ORDER_FAIL = 'UPDATE_ORDER_FAIL'\nexport const UPDATE_ORDER_RESET = 'UPDATE_ORDER_RESET'\n\nexport const updateOrder = (params) => {\n    return { type: UPDATE_ORDER, params }\n}\n\nexport const updateOrderSuccess = (response) => {\n    return { type: UPDATE_ORDER_SUCCESS, response }\n}\n\nexport const updateOrderFail = (response) => {\n    return { type: UPDATE_ORDER_FAIL, response }\n}\n\nexport const updateOrderReset = () => {\n    return { type: UPDATE_ORDER_RESET }\n}","import {\n    UPDATE_ORDER,\n    UPDATE_ORDER_SUCCESS,\n    UPDATE_ORDER_FAIL,\n    UPDATE_ORDER_RESET\n} from '../action/updateOrderAction'\nimport strings from \"../strings.json\"\n\nconst initialState = {\n    apiState: \"\", // loading, success, error\n    message: \"\",\n    data: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_ORDER:\n            return {\n                ...state,\n                apiState: \"loading\",\n            }\n\n        case UPDATE_ORDER_SUCCESS:\n            return {\n                ...state,\n                apiState: \"success\",\n                message: action.response.data.message,\n                data: action.response.data.data,\n            }\n\n        case UPDATE_ORDER_FAIL:\n            return {\n                ...state,\n                apiState: \"error\",\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\n            }\n\n        case UPDATE_ORDER_RESET:\n            return initialState\n\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\n\nimport login from './reducer/loginReducer'\nimport getCategoryTree from './reducer/getCategoryTreeReducer'\nimport createCategory from './reducer/createCategoryReducer'\nimport getCategoryView from './reducer/getCategoryViewReducer'\nimport updateCategory from './reducer/updateCategoryReducer'\nimport deleteCategory from './reducer/deleteCategoryReducer'\nimport createProduct from './reducer/createProductReducer'\nimport getProductList from './reducer/getProductListReducer'\nimport getProductView from './reducer/getProductViewReducer'\nimport updateProduct from './reducer/updateProductReducer'\nimport getAttributeList from './reducer/getAttributeListReducer'\nimport saveAttributeForVariants from './reducer/saveAttributeForVariantsReducer'\nimport createProductVariant from './reducer/createProductVariantReducer'\nimport getProductVariantList from './reducer/getProductVariantListReducer'\nimport saveSpProdData from './reducer/saveSpProdDataReducer'\nimport saveSpImgData from './reducer/saveSpImgDataReducer'\nimport saveProdImg from './reducer/saveProdImgReducer'\nimport delProdImg from './reducer/delProdImgReducer'\nimport markImgThumb from './reducer/markImgThumbReducer'\nimport delProdVar from './reducer/delProdVarReducer'\nimport saveSliderImages from './reducer/saveSliderImagesReducer'\nimport getSliderList from './reducer/getSliderListReducer'\nimport delSlider from './reducer/delSliderReducer'\nimport saveTestimonial from './reducer/saveTestimonialReducer'\nimport getTestimonialList from './reducer/getTestimonialListReducer'\nimport delTestimonial from './reducer/delTestimonialReducer'\nimport addDescription from './reducer/addDescriptionReducer'\nimport listDescription from './reducer/listDescriptionReducer'\nimport getDescriptionView from './reducer/getDescriptionViewReducer'\nimport updateDescription from './reducer/updateDescriptionReducer'\nimport addRelProd from './reducer/addRelProdReducer'\nimport listRelProd from './reducer/listRelProdReducer'\nimport delRelProd from './reducer/delRelProdReducer'\nimport updateSetting from './reducer/updateSettingReducer'\nimport getSetting from './reducer/getSettingReducer'\nimport updateShipping from './reducer/updateShippingReducer'\nimport getVoucherList from './reducer/getVoucherListReducer'\nimport createVoucher from './reducer/createVoucherReducer'\nimport getVoucherView from './reducer/getVoucherViewReducer'\nimport updateVoucher from './reducer/updateVoucherReducer'\nimport getOrderList from './reducer/getOrderListReducer'\nimport getCustomerList from './reducer/getCustomerListReducer'\nimport getOrderDetails from './reducer/getOrderDetailsReducer'\nimport updateOrder from './reducer/updateOrderReducer'\n\n\nexport default combineReducers({\n    login,\n    getCategoryTree,\n    createCategory,\n    getCategoryView,\n    updateCategory,\n    deleteCategory,\n    createProduct,\n    getProductList,\n    getProductView,\n    updateProduct,\n    getAttributeList,\n    saveAttributeForVariants,\n    createProductVariant,\n    getProductVariantList,\n    saveSpProdData,\n    saveSpImgData,\n    saveProdImg,\n    delProdImg,\n    markImgThumb,\n    delProdVar,\n    saveSliderImages,\n    getSliderList,\n    delSlider,\n    saveTestimonial,\n    getTestimonialList,\n    delTestimonial,\n    addDescription,\n    listDescription,\n    getDescriptionView,\n    updateDescription,\n    addRelProd,\n    listRelProd,\n    delRelProd,\n    updateSetting,\n    getSetting,\n    updateShipping,\n    getVoucherList,\n    createVoucher,\n    getVoucherView,\n    updateVoucher,\n    getOrderList,\n    getCustomerList,\n    getOrderDetails,\n    updateOrder,\n})","const cnf = {\n    api: {\n        base_url: \"http://65.1.76.185/api/\",\n    },\n    // s3_base_url: \"https://piky.s3.ap-south-1.amazonaws.com/\",\n    s3_base_url: \"https://vemshala-gallery.s3.ap-south-1.amazonaws.com/\", // new s3 bucket\n    domain: \"http://vemastore.com/\",\n    tinyKey: \"ttsmwue3os1saqfv35rgby36y5c207v31hpuyqtbpoffrm0l\"\n}\n\nif (process.env.REACT_APP_ENV === \"production\") {\n    cnf.api.base_url = \"http://api.vemastore.com/\"\n}\nexport default cnf;","import cnf from '../config'\nimport axios from 'axios'\n\nexport const loginApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}user/login`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default loginApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    LOGIN,\n    loginSuccess,\n    loginFail\n} from '../action/loginAction'\n\nimport loginApi from '../api/loginApi'\n\nexport function* loginSaga(action) {\n    try {\n        const response = yield call(() => loginApi(action.params))\n        yield put(loginSuccess(response, action))\n    } catch (e) {\n        yield put(loginFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(LOGIN, loginSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getCategoryTreeApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}category/tree`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getCategoryTreeApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_CATEGORY_TREE,\n    getCategoryTreeSuccess,\n    getCategoryTreeFail\n} from '../action/getCategoryTreeAction'\n\nimport getCategoryTreeApi from '../api/getCategoryTreeApi'\n\nexport function* getCategoryTreeSaga(action) {\n    try {\n        const response = yield call(() => getCategoryTreeApi(action.params))\n        yield put(getCategoryTreeSuccess(response, action))\n    } catch (e) {\n        yield put(getCategoryTreeFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_CATEGORY_TREE, getCategoryTreeSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const createCategoryApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}category/create`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default createCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    CREATE_CATEGORY,\n    createCategorySuccess,\n    createCategoryFail\n} from '../action/createCategoryAction'\n\nimport createCategoryApi from '../api/createCategoryApi'\n\nexport function* createCategorySaga(action) {\n    try {\n        const response = yield call(() => createCategoryApi(action.params))\n        yield put(createCategorySuccess(response, action))\n    } catch (e) {\n        yield put(createCategoryFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(CREATE_CATEGORY, createCategorySaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getCategoryViewApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}category/view`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getCategoryViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_CATEGORY_VIEW,\n    getCategoryViewSuccess,\n    getCategoryViewFail\n} from '../action/getCategoryViewAction'\n\nimport getCategoryViewApi from '../api/getCategoryViewApi'\n\nexport function* getCategoryViewSaga(action) {\n    try {\n        const response = yield call(() => getCategoryViewApi(action.params))\n        yield put(getCategoryViewSuccess(response, action))\n    } catch (e) {\n        yield put(getCategoryViewFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_CATEGORY_VIEW, getCategoryViewSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateCategoryApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}category/update`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default updateCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_CATEGORY,\n    updateCategorySuccess,\n    updateCategoryFail\n} from '../action/updateCategoryAction'\n\nimport updateCategoryApi from '../api/updateCategoryApi'\n\nexport function* updateCategorySaga(action) {\n    try {\n        const response = yield call(() => updateCategoryApi(action.params))\n        yield put(updateCategorySuccess(response, action))\n    } catch (e) {\n        yield put(updateCategoryFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_CATEGORY, updateCategorySaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const deleteCategoryApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}category/delete`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default deleteCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DELETE_CATEGORY,\n    deleteCategorySuccess,\n    deleteCategoryFail\n} from '../action/deleteCategoryAction'\n\nimport deleteCategoryApi from '../api/deleteCategoryApi'\n\nexport function* deleteCategorySaga(action) {\n    try {\n        const response = yield call(() => deleteCategoryApi(action.params))\n        yield put(deleteCategorySuccess(response, action))\n    } catch (e) {\n        yield put(deleteCategoryFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DELETE_CATEGORY, deleteCategorySaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const createProductApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/create`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default createProductApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    CREATE_PRODUCT,\n    createProductSuccess,\n    createProductFail\n} from '../action/createProductAction'\n\nimport createProductApi from '../api/createProductApi'\n\nexport function* createProductSaga(action) {\n    try {\n        const response = yield call(() => createProductApi(action.params))\n        yield put(createProductSuccess(response, action))\n    } catch (e) {\n        yield put(createProductFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(CREATE_PRODUCT, createProductSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getProductListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/admin-list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getProductListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_PRODUCT_LIST,\n    getProductListSuccess,\n    getProductListFail\n} from '../action/getProductListAction'\n\nimport getProductListApi from '../api/getProductListApi'\n\nexport function* getProductListSaga(action) {\n    try {\n        const response = yield call(() => getProductListApi(action.params))\n        yield put(getProductListSuccess(response, action))\n    } catch (e) {\n        yield put(getProductListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_PRODUCT_LIST, getProductListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getProductViewApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/admin-view`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getProductViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_PRODUCT_VIEW,\n    getProductViewSuccess,\n    getProductViewFail\n} from '../action/getProductViewAction'\n\nimport getProductViewApi from '../api/getProductViewApi'\n\nexport function* getProductViewSaga(action) {\n    try {\n        const response = yield call(() => getProductViewApi(action.params))\n        yield put(getProductViewSuccess(response, action))\n    } catch (e) {\n        yield put(getProductViewFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_PRODUCT_VIEW, getProductViewSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateProductApi = async (params) => {\n\n    console.log(\"params\", params);\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/update`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default updateProductApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_PRODUCT,\n    updateProductSuccess,\n    updateProductFail\n} from '../action/updateProductAction'\n\nimport updateProductApi from '../api/updateProductApi'\n\nexport function* updateProductSaga(action) {\n    try {\n        const response = yield call(() => updateProductApi(action.params))\n        yield put(updateProductSuccess(response, action))\n    } catch (e) {\n        yield put(updateProductFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_PRODUCT, updateProductSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getAttributeListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}attribute/list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getAttributeListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_ATTRIBUTE_LIST,\n    getAttributeListSuccess,\n    getAttributeListFail\n} from '../action/getAttributeListAction'\n\nimport getAttributeListApi from '../api/getAttributeListApi'\n\nexport function* getAttributeListSaga(action) {\n    try {\n        const response = yield call(() => getAttributeListApi(action.params))\n        yield put(getAttributeListSuccess(response, action))\n    } catch (e) {\n        yield put(getAttributeListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_ATTRIBUTE_LIST, getAttributeListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveAttributeForVariantsApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/save-attribute-for-variants`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveAttributeForVariantsApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_ATTRIBUTE_FOR_VARIANTS,\n    saveAttributeForVariantsSuccess,\n    saveAttributeForVariantsFail\n} from '../action/saveAttributeForVariantsAction'\n\nimport saveAttributeForVariantsApi from '../api/saveAttributeForVariantsApi'\n\nexport function* saveAttributeForVariantsSaga(action) {\n    try {\n        const response = yield call(() => saveAttributeForVariantsApi(action.params))\n        yield put(saveAttributeForVariantsSuccess(response, action))\n    } catch (e) {\n        yield put(saveAttributeForVariantsFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_ATTRIBUTE_FOR_VARIANTS, saveAttributeForVariantsSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const createProductVariantApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/create-variant`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default createProductVariantApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    CREATE_PRODUCT_VARIANT,\n    createProductVariantSuccess,\n    createProductVariantFail\n} from '../action/createProductVariantAction'\n\nimport createProductVariantApi from '../api/createProductVariantApi'\n\nexport function* createProductVariantSaga(action) {\n    try {\n        const response = yield call(() => createProductVariantApi(action.params))\n        yield put(createProductVariantSuccess(response, action))\n    } catch (e) {\n        yield put(createProductVariantFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(CREATE_PRODUCT_VARIANT, createProductVariantSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getProductVariantListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/variant-list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getProductVariantListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_PRODUCT_VARIANT_LIST,\n    getProductVariantListSuccess,\n    getProductVariantListFail\n} from '../action/getProductVariantListAction'\n\nimport getProductVariantListApi from '../api/getProductVariantListApi'\n\nexport function* getProductVariantListSaga(action) {\n    try {\n        const response = yield call(() => getProductVariantListApi(action.params))\n        yield put(getProductVariantListSuccess(response, action))\n    } catch (e) {\n        yield put(getProductVariantListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_PRODUCT_VARIANT_LIST, getProductVariantListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveSpProdDataApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/save-sp-prod-data`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveSpProdDataApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_SP_PROD_DATA,\n    saveSpProdDataSuccess,\n    saveSpProdDataFail\n} from '../action/saveSpProdDataAction'\n\nimport saveSpProdDataApi from '../api/saveSpProdDataApi'\n\nexport function* saveSpProdDataSaga(action) {\n    try {\n        const response = yield call(() => saveSpProdDataApi(action.params))\n        yield put(saveSpProdDataSuccess(response, action))\n    } catch (e) {\n        yield put(saveSpProdDataFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_SP_PROD_DATA, saveSpProdDataSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveSpImgDataApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/save-sp-img-data`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveSpImgDataApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_SP_IMG_DATA,\n    saveSpImgDataSuccess,\n    saveSpImgDataFail\n} from '../action/saveSpImgDataAction'\n\nimport saveSpImgDataApi from '../api/saveSpImgDataApi'\n\nexport function* saveSpImgDataSaga(action) {\n    try {\n        const response = yield call(() => saveSpImgDataApi(action.params))\n        yield put(saveSpImgDataSuccess(response, action))\n    } catch (e) {\n        yield put(saveSpImgDataFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_SP_IMG_DATA, saveSpImgDataSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveProdImgApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/save-prod-img`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveProdImgApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_PROD_IMG,\n    saveProdImgSuccess,\n    saveProdImgFail\n} from '../action/saveProdImgAction'\n\nimport saveProdImgApi from '../api/saveProdImgApi'\n\nexport function* saveProdImgSaga(action) {\n    try {\n        const response = yield call(() => saveProdImgApi(action.params))\n        yield put(saveProdImgSuccess(response, action))\n    } catch (e) {\n        yield put(saveProdImgFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_PROD_IMG, saveProdImgSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const delProdImgApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/del-prod-img`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default delProdImgApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DEL_PROD_IMG,\n    delProdImgSuccess,\n    delProdImgFail\n} from '../action/delProdImgAction'\n\nimport delProdImgApi from '../api/delProdImgApi'\n\nexport function* delProdImgSaga(action) {\n    try {\n        const response = yield call(() => delProdImgApi(action.params))\n        yield put(delProdImgSuccess(response, action))\n    } catch (e) {\n        yield put(delProdImgFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DEL_PROD_IMG, delProdImgSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const markImgThumbApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/mark-img-thumb`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default markImgThumbApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    MARK_IMG_THUMB,\n    markImgThumbSuccess,\n    markImgThumbFail\n} from '../action/markImgThumbAction'\n\nimport markImgThumbApi from '../api/markImgThumbApi'\n\nexport function* markImgThumbSaga(action) {\n    try {\n        const response = yield call(() => markImgThumbApi(action.params))\n        yield put(markImgThumbSuccess(response, action))\n    } catch (e) {\n        yield put(markImgThumbFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(MARK_IMG_THUMB, markImgThumbSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const delProdVarApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/del-prod-var`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default delProdVarApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DEL_PROD_VAR,\n    delProdVarSuccess,\n    delProdVarFail\n} from '../action/delProdVarAction'\n\nimport delProdVarApi from '../api/delProdVarApi'\n\nexport function* delProdVarSaga(action) {\n    try {\n        const response = yield call(() => delProdVarApi(action.params))\n        yield put(delProdVarSuccess(response, action))\n    } catch (e) {\n        yield put(delProdVarFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DEL_PROD_VAR, delProdVarSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveSliderImagesApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}home/save-slider-imgs`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveSliderImagesApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_SLIDER_IMAGES,\n    saveSliderImagesSuccess,\n    saveSliderImagesFail\n} from '../action/saveSliderImagesAction'\n\nimport saveSliderImagesApi from '../api/saveSliderImagesApi'\n\nexport function* saveSliderImagesSaga(action) {\n    try {\n        const response = yield call(() => saveSliderImagesApi(action.params))\n        yield put(saveSliderImagesSuccess(response, action))\n    } catch (e) {\n        yield put(saveSliderImagesFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_SLIDER_IMAGES, saveSliderImagesSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getSliderListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}home/slider-list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getSliderListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_SLIDER_LIST,\n    getSliderListSuccess,\n    getSliderListFail\n} from '../action/getSliderListAction'\n\nimport getSliderListApi from '../api/getSliderListApi'\n\nexport function* getSliderListSaga(action) {\n    try {\n        const response = yield call(() => getSliderListApi(action.params))\n        yield put(getSliderListSuccess(response, action))\n    } catch (e) {\n        yield put(getSliderListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_SLIDER_LIST, getSliderListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const delSliderApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}home/del-slider`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default delSliderApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DEL_SLIDER,\n    delSliderSuccess,\n    delSliderFail\n} from '../action/delSliderAction'\n\nimport delSliderApi from '../api/delSliderApi'\n\nexport function* delSliderSaga(action) {\n    try {\n        const response = yield call(() => delSliderApi(action.params))\n        yield put(delSliderSuccess(response, action))\n    } catch (e) {\n        yield put(delSliderFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DEL_SLIDER, delSliderSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const saveTestimonialApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}testimonial/save`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default saveTestimonialApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    SAVE_TESTIMONIAL,\n    saveTestimonialSuccess,\n    saveTestimonialFail\n} from '../action/saveTestimonialAction'\n\nimport saveTestimonialApi from '../api/saveTestimonialApi'\n\nexport function* saveTestimonialSaga(action) {\n    try {\n        const response = yield call(() => saveTestimonialApi(action.params))\n        yield put(saveTestimonialSuccess(response, action))\n    } catch (e) {\n        yield put(saveTestimonialFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(SAVE_TESTIMONIAL, saveTestimonialSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getTestimonialListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}testimonial/list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getTestimonialListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_TESTIMONIAL_LIST,\n    getTestimonialListSuccess,\n    getTestimonialListFail\n} from '../action/getTestimonialListAction'\n\nimport getTestimonialListApi from '../api/getTestimonialListApi'\n\nexport function* getTestimonialListSaga(action) {\n    try {\n        const response = yield call(() => getTestimonialListApi(action.params))\n        yield put(getTestimonialListSuccess(response, action))\n    } catch (e) {\n        yield put(getTestimonialListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_TESTIMONIAL_LIST, getTestimonialListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const delTestimonialApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}testimonial/delete`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default delTestimonialApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DEL_TESTIMONIAL,\n    delTestimonialSuccess,\n    delTestimonialFail\n} from '../action/delTestimonialAction'\n\nimport delTestimonialApi from '../api/delTestimonialApi'\n\nexport function* delTestimonialSaga(action) {\n    try {\n        const response = yield call(() => delTestimonialApi(action.params))\n        yield put(delTestimonialSuccess(response, action))\n    } catch (e) {\n        yield put(delTestimonialFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DEL_TESTIMONIAL, delTestimonialSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const addDescriptionApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/add-description`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default addDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    ADD_DESCRIPTION,\n    addDescriptionSuccess,\n    addDescriptionFail\n} from '../action/addDescriptionAction'\n\nimport addDescriptionApi from '../api/addDescriptionApi'\n\nexport function* addDescriptionSaga(action) {\n    try {\n        const response = yield call(() => addDescriptionApi(action.params))\n        yield put(addDescriptionSuccess(response, action))\n    } catch (e) {\n        yield put(addDescriptionFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(ADD_DESCRIPTION, addDescriptionSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const listDescriptionApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/list-description`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default listDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    LIST_DESCRIPTION,\n    listDescriptionSuccess,\n    listDescriptionFail\n} from '../action/listDescriptionAction'\n\nimport listDescriptionApi from '../api/listDescriptionApi'\n\nexport function* listDescriptionSaga(action) {\n    try {\n        const response = yield call(() => listDescriptionApi(action.params))\n        yield put(listDescriptionSuccess(response, action))\n    } catch (e) {\n        yield put(listDescriptionFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(LIST_DESCRIPTION, listDescriptionSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getDescriptionViewApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/description-view`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getDescriptionViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_DESCRIPTION_VIEW,\n    getDescriptionViewSuccess,\n    getDescriptionViewFail\n} from '../action/getDescriptionViewAction'\n\nimport getDescriptionViewApi from '../api/getDescriptionViewApi'\n\nexport function* getDescriptionViewSaga(action) {\n    try {\n        const response = yield call(() => getDescriptionViewApi(action.params))\n        yield put(getDescriptionViewSuccess(response, action))\n    } catch (e) {\n        yield put(getDescriptionViewFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_DESCRIPTION_VIEW, getDescriptionViewSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateDescriptionApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/update-description`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default updateDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_DESCRIPTION,\n    updateDescriptionSuccess,\n    updateDescriptionFail\n} from '../action/updateDescriptionAction'\n\nimport updateDescriptionApi from '../api/updateDescriptionApi'\n\nexport function* updateDescriptionSaga(action) {\n    try {\n        const response = yield call(() => updateDescriptionApi(action.params))\n        yield put(updateDescriptionSuccess(response, action))\n    } catch (e) {\n        yield put(updateDescriptionFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_DESCRIPTION, updateDescriptionSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const addRelProdApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/add-rel-prod`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default addRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    ADD_REL_PROD,\n    addRelProdSuccess,\n    addRelProdFail\n} from '../action/addRelProdAction'\n\nimport addRelProdApi from '../api/addRelProdApi'\n\nexport function* addRelProdSaga(action) {\n    try {\n        const response = yield call(() => addRelProdApi(action.params))\n        yield put(addRelProdSuccess(response, action))\n    } catch (e) {\n        yield put(addRelProdFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(ADD_REL_PROD, addRelProdSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const listRelProdApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}product/list-rel-prod`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default listRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    LIST_REL_PROD,\n    listRelProdSuccess,\n    listRelProdFail\n} from '../action/listRelProdAction'\n\nimport listRelProdApi from '../api/listRelProdApi'\n\nexport function* listRelProdSaga(action) {\n    try {\n        const response = yield call(() => listRelProdApi(action.params))\n        yield put(listRelProdSuccess(response, action))\n    } catch (e) {\n        yield put(listRelProdFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(LIST_REL_PROD, listRelProdSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const delRelProdApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}product/del-rel-prod`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default delRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    DEL_REL_PROD,\n    delRelProdSuccess,\n    delRelProdFail\n} from '../action/delRelProdAction'\n\nimport delRelProdApi from '../api/delRelProdApi'\n\nexport function* delRelProdSaga(action) {\n    try {\n        const response = yield call(() => delRelProdApi(action.params))\n        yield put(delRelProdSuccess(response, action))\n    } catch (e) {\n        yield put(delRelProdFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(DEL_REL_PROD, delRelProdSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateSettingApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}setting/update`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n    return response\n}\n\nexport default updateSettingApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_SETTING,\n    updateSettingSuccess,\n    updateSettingFail\n} from '../action/updateSettingAction'\n\nimport updateSettingApi from '../api/updateSettingApi'\n\nexport function* updateProductSaga(action) {\n    try {\n        const response = yield call(() => updateSettingApi(action.params))\n        yield put(updateSettingSuccess(response, action))\n    } catch (e) {\n        yield put(updateSettingFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_SETTING, updateProductSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getSettingApi = async (params) => {\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}setting/list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getSettingApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_SETTING,\n    getSettingSuccess,\n    getSettingFail\n} from '../action/getSettingAction'\n\nimport getSettingApi from '../api/getSettingApi'\n\nexport function* getSettingSaga(action) {\n    try {\n        const response = yield call(() => getSettingApi(action.params))\n        yield put(getSettingSuccess(response, action))\n    } catch (e) {\n        yield put(getSettingFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_SETTING, getSettingSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const UpdateShippingApi = async (params) => {\n\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}setting/updateShipping`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default UpdateShippingApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_SHIPPING,\n    updateShippingSuccess,\n    updateShippingFail\n} from '../action/updateShippingAction'\n\nimport updateShippingApi from '../api/updateShippingApi'\n\nexport function* updateShippingSaga(action) {\n    try {\n        const response = yield call(() => updateShippingApi(action.params))\n        yield put(updateShippingSuccess(response, action))\n    } catch (e) {\n        yield put(updateShippingFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_SHIPPING, updateShippingSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getVoucherListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}coupon/list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getVoucherListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_VOUCHER_LIST,\n    getVoucherListSuccess,\n    getVoucherListFail\n} from '../action/getVoucherListAction'\n\nimport getVoucherListApi from '../api/getVoucherListApi'\n\nexport function* getVoucherListSaga(action) {\n    try {\n        const response = yield call(() => getVoucherListApi(action.params))\n        yield put(getVoucherListSuccess(response, action))\n    } catch (e) {\n        yield put(getVoucherListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_VOUCHER_LIST, getVoucherListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const createVoucherApi = async (params) => {\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}coupon/create`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default createVoucherApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    CREATE_VOUCHER,\n    createVoucherSuccess,\n    createVoucherFail\n} from '../action/createVoucherAction'\n\nimport createVoucherApi from '../api/createVoucherApi'\n\nexport function* createVoucherSaga(action) {\n    try {\n        const response = yield call(() => createVoucherApi(action.params))\n        yield put(createVoucherSuccess(response, action))\n    } catch (e) {\n        yield put(createVoucherFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(CREATE_VOUCHER, createVoucherSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getVoucherViewApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}coupon/view`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getVoucherViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_VOUCHER_VIEW,\n    getVoucherViewSuccess,\n    getVoucherViewFail\n} from '../action/getVoucherViewAction'\n\nimport getVoucherViewApi from '../api/getVoucherViewApi'\n\nexport function* getVoucherViewSaga(action) {\n    try {\n        const response = yield call(() => getVoucherViewApi(action.params))\n        yield put(getVoucherViewSuccess(response, action))\n    } catch (e) {\n        yield put(getVoucherViewFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_VOUCHER_VIEW, getVoucherViewSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateVoucherApi = async (params) => {\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}coupon/update`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default updateVoucherApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_VOUCHER,\n    updateVoucherSuccess,\n    updateVoucherFail\n} from '../action/updateVoucherAction'\n\nimport updateVoucherApi from '../api/updateVoucherApi'\n\nexport function* updateVoucherSaga(action) {\n    try {\n        const response = yield call(() => updateVoucherApi(action.params))\n        yield put(updateVoucherSuccess(response, action))\n    } catch (e) {\n        yield put(updateVoucherFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_VOUCHER, updateVoucherSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getOrderListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}order/admin_list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getOrderListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_ORDER_LIST,\n    getOrderListSuccess,\n    getOrderListFail\n} from '../action/getOrderListAction'\n\nimport getOrderListApi from '../api/getOrderListApi'\n\nexport function* getOrderListSaga(action) {\n    try {\n        const response = yield call(() => getOrderListApi(action.params))\n        yield put(getOrderListSuccess(response, action))\n    } catch (e) {\n        yield put(getOrderListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_ORDER_LIST, getOrderListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getCustomerListApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}customer/admin_list`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getCustomerListApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_CUSTOMER_LIST,\n    getCustomerListSuccess,\n    getCustomerListFail\n} from '../action/getCustomerListAction'\n\nimport getCustomerListApi from '../api/getCustomerListApi'\n\nexport function* getCustomerListSaga(action) {\n    try {\n        const response = yield call(() => getCustomerListApi(action.params))\n        yield put(getCustomerListSuccess(response, action))\n    } catch (e) {\n        yield put(getCustomerListFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_CUSTOMER_LIST, getCustomerListSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const getOrderDetailsApi = async (params) => {\n\n    const response = await axios({\n        method: 'get',\n        url: `${cnf.api.base_url}order/admin-order-details`,\n        params: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default getOrderDetailsApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    GET_ORDER_DETAILS,\n    getOrderDetailsSuccess,\n    getOrderDetailsFail\n} from '../action/getOrderDetailsAction'\n\nimport getOrderDetailsApi from '../api/getOrderDetailsApi'\n\nexport function* getOrderDetailsSaga(action) {\n    try {\n        const response = yield call(() => getOrderDetailsApi(action.params))\n        yield put(getOrderDetailsSuccess(response, action))\n    } catch (e) {\n        yield put(getOrderDetailsFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(GET_ORDER_DETAILS, getOrderDetailsSaga);\n}","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateOrderApi = async (params) => {\n    const response = await axios({\n        method: 'post',\n        url: `${cnf.api.base_url}order/admin-order-update`,\n        data: params,\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n\n    return response\n}\n\nexport default updateOrderApi","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n    UPDATE_ORDER,\n    updateOrderSuccess,\n    updateOrderFail\n} from '../action/updateOrderAction'\n\nimport updateOrderApi from '../api/updateOrderApi'\n\nexport function* updateOrderSaga(action) {\n    try {\n        const response = yield call(() => updateOrderApi(action.params))\n        yield put(updateOrderSuccess(response, action))\n    } catch (e) {\n        yield put(updateOrderFail(e.response, action))\n    }\n}\n\nexport default function* MySaga() {\n    yield takeLatest(UPDATE_ORDER, updateOrderSaga);\n}","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducer'\n\n// sagas\nimport loginSaga from './saga/loginSaga'\nimport getCategoryTreeSaga from './saga/getCategoryTreeSaga'\nimport createCategorySaga from './saga/createCategorySaga'\nimport getCategoryViewSaga from './saga/getCategoryViewSaga'\nimport updateCategorySaga from './saga/updateCategorySaga'\nimport deleteCategorySaga from './saga/deleteCategorySaga'\nimport createProductSaga from './saga/createProductSaga'\nimport getProductListSaga from './saga/getProductListSaga'\nimport getProductViewSaga from './saga/getProductViewSaga'\nimport updateProductSaga from './saga/updateProductSaga'\nimport getAttributeListSaga from './saga/getAttributeListSaga'\nimport saveAttributeForVariantsSaga from './saga/saveAttributeForVariantsSaga'\nimport createProductVariantSaga from './saga/createProductVariantSaga'\nimport getProductVariantListSaga from './saga/getProductVariantListSaga'\nimport saveSpProdDataSaga from './saga/saveSpProdDataSaga'\nimport saveSpImgDataSaga from './saga/saveSpImgDataSaga'\nimport saveProdImgSaga from './saga/saveProdImgSaga'\nimport delProdImgSaga from './saga/delProdImgSaga'\nimport markImgThumbSaga from './saga/markImgThumbSaga'\nimport delProdVarSaga from './saga/delProdVarSaga'\nimport saveSliderImagesSaga from './saga/saveSliderImagesSaga'\nimport getSliderListSaga from './saga/getSliderListSaga'\nimport delSliderSaga from './saga/delSliderSaga'\nimport saveTestimonialSaga from './saga/saveTestimonialSaga'\nimport getTestimonialListSaga from './saga/getTestimonialListSaga'\nimport delTestimonialSaga from './saga/delTestimonialSaga'\nimport addDescriptionSaga from './saga/addDescriptionSaga'\nimport listDescriptionSaga from './saga/listDescriptionSaga'\nimport getDescriptionViewSaga from './saga/getDescriptionViewSaga'\nimport updateDescriptionSaga from './saga/updateDescriptionSaga'\nimport addRelProdSaga from './saga/addRelProdSaga'\nimport listRelProdSaga from './saga/listRelProdSaga'\nimport delRelProdSaga from './saga/delRelProdSaga'\nimport updateSettingSaga from './saga/updateSettingSaga'\nimport getSettingSaga from './saga/getSettingSaga'\nimport updateShippingSaga from './saga/updateShippingSaga'\nimport getVoucherListSaga from './saga/getVoucherListSaga'\nimport createVoucherSaga from './saga/createVoucherSaga'\nimport getVoucherViewSaga from './saga/getVoucherViewSaga'\nimport updateVoucherSaga from './saga/updateVoucherSaga'\nimport getOrderListSaga from './saga/getOrderListSaga'\nimport getCustomerListSaga from './saga/getCustomerListSaga'\nimport getOrderDetailsSaga from './saga/getOrderDetailsSaga'\nimport updateOrderSaga from './saga/updateOrderSaga'\n\n\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(sagaMiddleware)\n    )\n)\n\n// then run the saga\nsagaMiddleware.run(loginSaga)\nsagaMiddleware.run(getCategoryTreeSaga)\nsagaMiddleware.run(createCategorySaga)\nsagaMiddleware.run(getCategoryViewSaga)\nsagaMiddleware.run(updateCategorySaga)\nsagaMiddleware.run(deleteCategorySaga)\nsagaMiddleware.run(createProductSaga)\nsagaMiddleware.run(getProductListSaga)\nsagaMiddleware.run(getProductViewSaga)\nsagaMiddleware.run(updateProductSaga)\nsagaMiddleware.run(getAttributeListSaga)\nsagaMiddleware.run(saveAttributeForVariantsSaga)\nsagaMiddleware.run(createProductVariantSaga)\nsagaMiddleware.run(getProductVariantListSaga)\nsagaMiddleware.run(saveSpProdDataSaga)\nsagaMiddleware.run(saveSpImgDataSaga)\nsagaMiddleware.run(saveProdImgSaga)\nsagaMiddleware.run(delProdImgSaga)\nsagaMiddleware.run(markImgThumbSaga)\nsagaMiddleware.run(delProdVarSaga)\nsagaMiddleware.run(saveSliderImagesSaga)\nsagaMiddleware.run(getSliderListSaga)\nsagaMiddleware.run(delSliderSaga)\nsagaMiddleware.run(saveTestimonialSaga)\nsagaMiddleware.run(getTestimonialListSaga)\nsagaMiddleware.run(delTestimonialSaga)\nsagaMiddleware.run(addDescriptionSaga)\nsagaMiddleware.run(listDescriptionSaga)\nsagaMiddleware.run(getDescriptionViewSaga)\nsagaMiddleware.run(updateDescriptionSaga)\nsagaMiddleware.run(addRelProdSaga)\nsagaMiddleware.run(listRelProdSaga)\nsagaMiddleware.run(delRelProdSaga)\nsagaMiddleware.run(updateSettingSaga)\nsagaMiddleware.run(getSettingSaga)\nsagaMiddleware.run(updateShippingSaga)\nsagaMiddleware.run(getVoucherListSaga)\nsagaMiddleware.run(createVoucherSaga)\nsagaMiddleware.run(getVoucherViewSaga)\nsagaMiddleware.run(updateVoucherSaga)\nsagaMiddleware.run(getOrderListSaga)\nsagaMiddleware.run(getCustomerListSaga)\nsagaMiddleware.run(getOrderDetailsSaga)\nsagaMiddleware.run(updateOrderSaga)\n\n\n\n// render the application\nexport default store","import React from \"react\"\nimport styled from \"styled-components\";\n\n// @import-components ---------------------------------------------------------------------------------------------------------\n \n    import { Menu } from 'antd';\n    import Logo from '../../icons/logo.jpg'\n    import { Link } from \"react-router-dom\"\n\n// ----------------------------------------------------------------------------------------------------------------------------\n\nconst Sidebar = props => {\n    return (\n        <div>\n            <div style={{ padding: \"16px 8px\", textAlign: \"center\", backgroundColor: '#5b0c1c' }} >\n                <img src={Logo} alt=\"...\" style={{ width:'100px' }}></img>\n            </div>\n            <Menu mode=\"inline\" theme=\"dark\" >\n                <Menu.Item key=\"dashboard\"><Link to=\"/\">Dashboard</Link></Menu.Item>\n                <Menu.SubMenu title=\"Masters\" key=\"Masters\">\n                    <Menu.Item key=\"coupons\"><Link to=\"/master/coupons\">Coupons</Link></Menu.Item>\n                </Menu.SubMenu>\n                <Menu.SubMenu title=\"Home Page\" key=\"Home Page\">\n                    <Menu.Item key=\"slider\"><Link to=\"/home/slider\">Slider</Link></Menu.Item>\n                    <Menu.Item key=\"testimonial\"><Link to=\"/home/testimonial\">Testimonial</Link></Menu.Item>\n                </Menu.SubMenu>\n                <Menu.Item key=\"category\"><Link to=\"/category/list\">Category</Link></Menu.Item>\n                <Menu.Item key=\"products\"><Link to=\"/product/list\">Product</Link></Menu.Item>\n                <Menu.Item key=\"settings\"><Link to=\"/setting\">Setting</Link></Menu.Item>\n                <Menu.Item key=\"ShippingCharge\"><Link to=\"/shipping_configuration\">Shipping Configuration</Link></Menu.Item>\n                <Menu.Item key=\"VoucherList\"><Link to=\"/voucher_management/list\">Voucher Management</Link></Menu.Item>\n                <Menu.Item key=\"OrderList\"><Link to=\"/order_management/list\">Order Management</Link></Menu.Item>\n                <Menu.Item key=\"CustomerList\"><Link to=\"/customer/list\">Customers</Link></Menu.Item>\n            </Menu>\n        </div>\n    )\n}\n\nexport default Sidebar","import cnf from '../src/config'\n\nexport const isLogin = () => {\n    const PikyUserToken = localStorage.getItem('PikyUserToken')\n\n    if (PikyUserToken) return true\n    else return false\n}\n\nexport const validateImageFile = (file) => {\n    let ext\n    if (file.type == \"image/jpeg\") ext = \"jpeg\"\n    if (file.type == \"image/png\") ext = \"png\"\n    if (file.type == \"image/jpg\") ext = \"jpg\"\n    if (file.type == \"image/webp\") ext = \"webp\"\n\n    if (ext) {\n        return { status: true, ext: ext }\n    } else {\n        return { status: false }\n    }\n}\n\nexport const getUserToken = () => {\n    return localStorage.getItem('PikyUserToken') || null\n}\n\nexport const getS3SingedUrl = async (filename, ext, file) => {\n    return new Promise((resolve, reject) => {\n        fetch(`${cnf.api.base_url}get-singed-url-for-put?filename=${filename}&ext=${ext}`, {\n            method: 'get',\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n                \"authorization\": `Bearer ${getUserToken()}`\n            }\n        }).then(res => {\n            const result = res.json();\n            return Promise.all([result]);\n        }).then((result) => {\n            resolve({ ['url']: result[0].url, ['filename']: `${filename}.${ext}` })\n        }).catch(console.log)\n    })\n}","import React from 'react'\nimport { Link, Redirect, Route } from 'react-router-dom'\nimport { isLogin } from '../utils'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    return (\n        <Route {...rest} render={props => (\n            isLogin() ?\n                <Component {...props} />\n                : <Redirect to=\"/login\" />\n        )} />\n    );\n};\n\nexport default PrivateRoute","import React from \"react\"\nimport { Avatar, Popover, Button, Space } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Link } from \"react-router-dom\"\n\nconst Header = props => {\n    return (\n        <div style={{\n            height: 50, background: \"#fff\", padding: \"4px 8px\", display: \"flex\", alignItems: \"center\",\n            justifyContent: \"space-between\", borderBottom: \"solid 1px #ccc\", position: \"sticky\", top: 0,\n            zIndex: 5\n        }} >\n            <div>\n                <h1 style={{ margin: 0 }} >{props.title}</h1>\n            </div>\n            <Space>\n                {props.actionBtn}\n                <Popover placement=\"bottomLeft\" title={null} content={\n                    <Link to=\"/logout\"><Button type=\"dashed\" >Log Out</Button></Link>\n                } trigger=\"click\">\n                    <a><Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} /></a>\n                </Popover>\n            </Space>\n        </div>\n    )\n}\n\nexport default Header","import styled from \"styled-components\";\n\nexport const LoginContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    background: #f5f5f5;\n`\n\nexport const PageContainer = styled.div`\n    background: #f3f3f3;\n    padding: 8px 16px;\n    min-height: calc(100vh - 50px);\n\n    ${({ list }) => list && `\n        padding: 0;\n    `}\n`","import React from \"react\";\nimport { Row, Col, Card, DatePicker,Button } from \"antd\";\n\n/* @custom component ------------------------------------------------------------------------------------------- */\n    \n    import Header from \"../../component/Header/Header\";\n    import { PageContainer } from \"../../component/Xcomponent\";\n\n/* ------------------------------------------------------------------------------------------------------------- */\n\nconst Home = (props) => {\n\n    const onChange = (date, dateString) => {\n        console.log({date, dateString});\n    };\n\n  return (\n    <React.Fragment>\n        <Header title=\"\" />\n        <PageContainer>\n            <div className=\"site-card-wrapper dashboard-fieldset\">\n                <h3 className=\"dashboard-fieldset-heading\"><b>Dashboard</b></h3>\n\n                <Row gutter={16} className=\"dashboard-date-filter\">\n                    <Col span={6}><DatePicker className=\"date-picker\" placeholder=\"From date\" onChange={onChange} /></Col>\n                    <Col span={6}><DatePicker className=\"date-picker\" placeholder=\"To date\" onChange={onChange} /></Col>\n                    <Col span={6}><Button className=\"ant-btn ant-btn-primary ant-btn-block\">Search</Button></Col>\n                </Row>\n\n                \n\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Card className=\"dashboard-card orders-card\">\n                            <p className=\"today-orders\">Today Orders : 25</p>\n                            <p className=\"total-orders\">Total Orders : 120</p>\n                        </Card>\n                    </Col>\n                    <Col span={8}>\n                        <Card className=\"dashboard-card sales-card\">\n                            <p className=\"today-sales\">Today Sales : 25 ₹</p>\n                            <p className=\"total-sales\">Total Sales : 120 ₹</p>\n                        </Card>\n                    </Col>\n                    <Col span={8}>\n                        <Card className=\"dashboard-card cancelled-orders-card\">\n                        <p className=\"today-cancelled-orders\">Today Cancelled Orders : 25</p>\n                            <p className=\"total-cancelled-orders\">Total Cancelled Orders: 120</p>\n                        </Card>\n                    </Col>\n\n                    <Col span={8}>\n                        <Card className=\"dashboard-card other-orders-details\">\n                            <p>COD Orders : 150</p>\n                            <p>YTD Orders : 150</p>\n                            <p>MTD Orders : 150</p>\n                            <p>Online Orders : 150</p>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        </PageContainer>\n    </React.Fragment>\n)};\n\nexport default Home;\n\n\n// Show orders details at \" Dashboard\" Side bar item \n\n// \"Total Sales\",\n// \"Cancelled Orders\", \n// \"CoD Orders,YTD Orders, MTD Orders, Todays' Orders\"  \n// also add date filter. Orders Processed / Orders Pending","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { createCategory, createCategoryReset } from \"../../action/createCategoryAction\"\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst { TreeNode } = TreeSelect\n\nconst CategoryAdd = props => {\n    /* variables */\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        createCategory, createCategoryReset, createCategoryState\n    } = props\n    const [formData, setFormData] = useState({\n        parent_category_id: null,\n        name: \"\",\n        url_key: \"\",\n        image: \"\",\n        banner_img: \"\",\n        m_banner_img: \"\"\n    })\n    const [image, set_image] = useState(null)\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getCategoryTreeReset()\n            createCategoryReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getCategoryTree()\n    }, [])\n\n    useEffect(() => {\n        if (createCategoryState.apiState === \"success\") {\n            setRedirect([true, '/category/list'])\n            message.success(createCategoryState.message);\n        }\n\n        if (createCategoryState.apiState === \"error\") {\n            createCategoryReset()\n            message.error(createCategoryState.message);\n        }\n    }, [createCategoryState])\n\n    /* function */\n    const categoryOptions = (tree) => {\n        let finalJsx = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\n                )\n            } else {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name} />\n                )\n            }\n        })\n        return finalJsx\n    }\n\n    const handleSubmit = async () => {\n        let image_filename = uuidv4()\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let imageValRes = validateImageFile(image)\n        let bannerImageValRes = validateImageFile(banner_img)\n        let mBannerImageValRes = validateImageFile(m_banner_img)\n\n        if (!imageValRes.status) {\n            alert(\"Image's extension is not allowed.\")\n            return\n        }\n        if (!bannerImageValRes.status) {\n            alert(\"Banner Image's extension is not allowed.\")\n            return\n        }\n        if (!mBannerImageValRes.status) {\n            alert(\"Mobile Banner Image's extension is not allowed.\")\n            return\n        }\n\n        setSubmitLoading(true)\n\n        let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n        await axios.put(s3UrlRes1.url, image)\n\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n        await axios.put(s3UrlRes2.url, banner_img)\n\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n        await axios.put(s3UrlRes3.url, m_banner_img)\n\n        formData.image = `${image_filename}.${imageValRes.ext}`\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n\n        createCategory(formData)\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Category Add\"\n            />\n            <PageContainer>\n\n                <Form layout=\"vertical\" onFinish={handleSubmit}>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Parent Category (Empty for Root level category)\"\n                                name=\"parent_category_id\"\n                            >\n                                <TreeSelect\n                                    showSearch\n                                    filterTreeNode={(input, treeNode) =>\n                                        treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                    style={{ width: '100%' }}\n                                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                    placeholder=\"Blank for root category\"\n                                    allowClear\n                                    treeDefaultExpandAll\n                                    onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\n                                >\n                                    {categoryOptions(getCategoryTreeState.tree)}\n                                </TreeSelect>\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Category Name\"\n                                    onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"URL Key\"\n                                name=\"url_key\"\n                                rules={[\n                                    { required: true, message: 'Required' },\n                                    {\n                                        pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                        message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                    }\n                                ]}\n                            >\n                                <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\n                                    onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\n                                    addonBefore={cnf.domain}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Image\"\n                                name=\"image\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"image\"\n                                    onChange={e => set_image(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Banner Image\"\n                                name=\"banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"banner_img\"\n                                    onChange={e => set_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Banner Image For Mobile\"\n                                name=\"m_banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    createCategoryState: state.createCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    createCategory: (params) => dispatch(createCategory(params)),\n    createCategoryReset: () => dispatch(createCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryAdd)","import React, { useState, useEffect } from \"react\"\nimport { Button, Tree, Skeleton, Space, Popconfirm, message } from \"antd\"\nimport { Link, Redirect } from 'react-router-dom'\nimport { connect } from \"react-redux\"\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { deleteCategory, deleteCategoryReset } from \"../../action/deleteCategoryAction\"\n\n/* others */\nimport cnf from \"../../config\"\n\nconst CategoryList = props => {\n    /* variables */\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        deleteCategory, deleteCategoryReset, deleteCategoryState\n    } = props\n    const [redirect, setRedirect] = useState([false, \"\"])\n    const [refresh, setRefresh] = useState(0)\n\n    /* callbacks */\n    useEffect(() => {\n        getCategoryTree()\n    }, [refresh])\n\n    useEffect(() => {\n        if (deleteCategoryState.apiState === \"success\") {\n            message.success(deleteCategoryState.message);\n            deleteCategoryReset()\n            setRefresh(refresh + 1)\n        }\n\n        if (deleteCategoryState.apiState === \"error\") {\n            message.error(deleteCategoryState.message);\n            deleteCategoryReset()\n        }\n    }, [deleteCategoryState])\n\n    /* functions */\n    const getTreeData = (tree) => {\n        let finalArray = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalArray.push(\n                    {\n                        title: (<Space>\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\n                            <span>{node.name}</span>\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n                            <Popconfirm\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\n                                okText=\"Delete\"\n                                cancelText=\"Cancel\"\n                                okType=\"danger\"\n                            >\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\n                            </Popconfirm>\n                        </Space>),\n                        key: node.id,\n                        children: getTreeData(node.children)\n                    }\n                )\n            } else {\n                finalArray.push(\n                    {\n                        title: (<Space>\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\n                            <span>{node.name}</span>\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n                            <Popconfirm\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\n                                okText=\"Delete\"\n                                cancelText=\"Cancel\"\n                                okType=\"danger\"\n                            >\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\n                            </Popconfirm>\n                        </Space>),\n                        key: node.id,\n                    }\n                )\n            }\n\n        })\n        return finalArray\n    }\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n\n            <Header\n                title=\"Category List\"\n                actionBtn={<Link to='/category/add'><Button >New</Button></Link>}\n            />\n            <PageContainer>\n                {getCategoryTreeState.apiState === \"loading\" &&\n                    <Skeleton active />}\n\n                {getCategoryTreeState.apiState === \"error\" &&\n                    <h1>Something is not right</h1>}\n\n                {getCategoryTreeState.apiState === \"success\" &&\n                    <>\n                        <div style={{ border: \"solid 1px #ccc\", width: \"max-content\", padding: 10 }} >\n                            <Tree\n                                treeData={getTreeData(getCategoryTreeState.tree)}\n                                showLine={{ showLeafIcon: false }}\n                                showIcon={false}\n                                selectable={false}\n                            />\n                        </div>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    deleteCategoryState: state.deleteCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    deleteCategory: (params) => dispatch(deleteCategory(params)),\n    deleteCategoryReset: () => dispatch(deleteCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList)","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, Skeleton } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { Redirect } from \"react-router-dom\"\nimport _ from \"lodash\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { getCategoryView, getCategoryViewReset } from \"../../action/getCategoryViewAction\"\nimport { updateCategory, updateCategoryReset } from \"../../action/updateCategoryAction\"\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst { TreeNode } = TreeSelect\n\nconst CategoryEdit = props => {\n    /* variables */\n    const category_id = props.match.params.category_id\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        getCategoryView, getCategoryViewReset, getCategoryViewState,\n        updateCategory, updateCategoryReset, updateCategoryState,\n    } = props\n    const [formData, setFormData] = useState({\n        category_id: category_id,\n        parent_category_id: null,\n        name: \"\",\n        url_key: \"\",\n        image: \"\",\n        banner_img: \"\",\n        m_banner_img: \"\"\n    })\n    const [image, set_image] = useState(null)\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [form] = Form.useForm()\n    const [imgChanged, setImgChanged] = useState({\n        image: false,\n        banner_img: false,\n        m_banner_img: false,\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getCategoryTreeReset()\n            getCategoryViewReset()\n            updateCategoryReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getCategoryTree()\n        getCategoryView({ category_id: category_id })\n    }, [])\n\n    useEffect(() => {\n        if (getCategoryViewState.apiState === \"success\") {\n            form.setFieldsValue({\n                parent_category_id: getCategoryViewState.category.parent_category_id,\n                name: getCategoryViewState.category.name,\n                url_key: getCategoryViewState.category.url_key,\n            })\n            setFormData({\n                ...formData,\n                ['parent_category_id']: getCategoryViewState.category.parent_category_id,\n                ['name']: getCategoryViewState.category.name,\n                ['url_key']: getCategoryViewState.category.url_key,\n                ['image']: getCategoryViewState.category.image,\n                ['banner_img']: getCategoryViewState.category.banner_img,\n                ['m_banner_img']: getCategoryViewState.category.m_banner_img,\n            })\n        }\n    }, [getCategoryViewState])\n\n    useEffect(() => {\n        if (updateCategoryState.apiState === \"success\") {\n            setRedirect([true, '/category/list'])\n            message.success(updateCategoryState.message);\n        }\n\n        if (updateCategoryState.apiState === \"error\") {\n            updateCategoryReset()\n            message.error(updateCategoryState.message);\n            setSubmitLoading(false)\n        }\n    }, [updateCategoryState])\n\n\n\n    /* function */\n    const categoryOptions = (tree) => {\n        let finalJsx = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\n                )\n            } else {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name} />\n                )\n            }\n        })\n        return finalJsx\n    }\n\n    const handleSubmit = async () => {\n        if (category_id == formData.parent_category_id) {\n            alert(\"You can't select same category as parent category!\")\n            return\n        }\n\n\n        let image_filename = uuidv4()\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let imageValRes\n        let bannerImageValRes\n        let mBannerImageValRes\n\n        if (imgChanged.image) {\n            imageValRes = validateImageFile(image)\n            if (!imageValRes.status) {\n                alert(\"Image's extension is not allowed.\")\n                return\n            }\n        }\n\n        if (imgChanged.banner_img) {\n            bannerImageValRes = validateImageFile(banner_img)\n            if (!bannerImageValRes.status) {\n                alert(\"Banner Image's extension is not allowed.\")\n                return\n            }\n        }\n\n        if (imgChanged.m_banner_img) {\n            mBannerImageValRes = validateImageFile(m_banner_img)\n            if (!mBannerImageValRes.status) {\n                alert(\"Mobile Banner Image's extension is not allowed.\")\n                return\n            }\n        }\n\n\n        setSubmitLoading(true)\n\n        if (imgChanged.image) {\n            console.log(\"hello\", \"uploading image\");\n            let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n            await axios.put(s3UrlRes1.url, image)\n            formData.image = `${image_filename}.${imageValRes.ext}`\n        }\n\n        if (imgChanged.banner_img) {\n            console.log(\"hello\", \"uploading banner_img\");\n            let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n            await axios.put(s3UrlRes2.url, banner_img)\n            formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        }\n\n        if (imgChanged.m_banner_img) {\n            console.log(\"hello\", \"uploading m_banner_img\");\n            let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n            await axios.put(s3UrlRes3.url, m_banner_img)\n            formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n        }\n\n        updateCategory(_.merge(formData, { imgChanged: imgChanged }))\n\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Category Edit\"\n            />\n            <PageContainer>\n                {getCategoryViewState.apiState === \"loading\" &&\n                    <Skeleton active />\n                }\n\n                {getCategoryViewState.apiState === \"error\" &&\n                    <p>{getCategoryViewState.message}</p>\n                }\n\n                {getCategoryViewState.apiState === \"success\" &&\n                    <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\">\n                                <Form.Item\n                                    label=\"Parent Category (Empty for Root level category)\"\n                                    name=\"parent_category_id\"\n                                >\n                                    <TreeSelect\n                                        showSearch\n                                        filterTreeNode={(input, treeNode) =>\n                                            treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                        }\n                                        style={{ width: '100%' }}\n                                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                        placeholder=\"Blank for root category\"\n                                        allowClear\n                                        treeDefaultExpandAll\n                                        onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\n                                    >\n                                        {categoryOptions(getCategoryTreeState.tree)}\n                                    </TreeSelect>\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name=\"name\"\n                                    rules={[{ required: true, message: 'Required' }]}\n                                >\n                                    <Input name=\"name\" placeholder=\"Enter Category Name\"\n                                        onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"URL Key\"\n                                    name=\"url_key\"\n                                    rules={[\n                                        { required: true, message: 'Required' },\n                                        {\n                                            pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                            message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                        }\n                                    ]}\n                                >\n                                    <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\n                                        onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\n                                        addonBefore={cnf.domain}\n                                    />\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Image\"\n                                    name=\"image\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                                >\n                                    {!imgChanged.image &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.image}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"image\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['image']: true })\n                                            set_image(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Banner Image\"\n                                    name=\"banner_img\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                                >\n                                    {!imgChanged.banner_img &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"banner_img\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['banner_img']: true })\n                                            set_banner_img(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Banner Image For Mobile\"\n                                    name=\"m_banner_img\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                                >\n                                    {!imgChanged.m_banner_img &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.m_banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"m_banner_img\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['m_banner_img']: true })\n                                            set_m_banner_img(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n\n                    </Form>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    getCategoryViewState: state.getCategoryView,\n    updateCategoryState: state.updateCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    getCategoryView: (params) => dispatch(getCategoryView(params)),\n    getCategoryViewReset: () => dispatch(getCategoryViewReset()),\n    updateCategory: (params) => dispatch(updateCategory(params)),\n    updateCategoryReset: () => dispatch(updateCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryEdit)","import styled, { css } from 'styled-components'\n\nexport const Indicator = styled.div`\n    height: 10px;\n    width: 10px;\n    border-radius: 5px;\n    background-color: grey;\n\n    ${props => props.green && css`\n        background-color: #03c503;\n    `}\n\n    ${props => props.red && css`\n        background-color: red;\n    `}\n`","import React, { useEffect, useState } from \"react\"\nimport { Button, Table, Space, Badge } from \"antd\"\nimport { Link } from 'react-router-dom'\nimport { connect } from \"react-redux\"\nimport { EditOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport { Indicator } from \"./ProductListStyle\"\n\n/* actions */\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\"\n\n\nconst ProductList = props => {\n    /* variables */\n    const { getProductList, getProductListReset, getProductListState } = props\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Type',\n            dataIndex: 'type',\n            key: 'type',\n            render: type => <span style={{ textTransform: \"capitalize\" }} >{type}</span>\n        },\n        {\n            title: 'Price',\n            dataIndex: 'price',\n            key: 'price',\n            render: (obj) => (\n                <Space>\n                    {obj.is_sale_price === \"yes\" ?\n                        <>\n                            <span style={{ textDecoration: \"line-through\", color: \"#00000099\" }} >₹{obj.price}</span>\n                            <span>₹{obj.sale_price}</span>\n                        </>\n                        : <span>₹{obj.price}</span>\n                    }\n\n                </Space>\n            )\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n            render: (status) => status === \"enabled\" ? <Indicator green /> : <Indicator red />\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Link to={`/product/${id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n            )\n        },\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getProductList()\n    }, [])\n\n    useEffect(() => {\n        if (getProductListState.apiState === \"success\") {\n            let tableData = []\n            getProductListState.list.map(row => {\n                tableData.push({\n                    key: row.id,\n                    name: row.name,\n                    type: row.type,\n                    price: { price: row.price, is_sale_price: row.is_sale_price, sale_price: row.sale_price },\n                    status: row.status,\n                    id: row.id,\n                })\n            })\n            setTableData(tableData)\n        }\n    }, [getProductListState])\n\n\n    return (\n        <>\n            <Header\n                title=\"Product List\"\n                actionBtn={<Link to='/product/add'><Button >New</Button></Link>}\n            />\n            <PageContainer list >\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductListState: state.getProductList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductList: (params) => dispatch(getProductList(params)),\n    getProductListReset: () => dispatch(getProductListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList)","import React, { useState, useEffect } from \"react\"\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* actions */\nimport { createProduct, createProductReset } from \"../../action/createProductAction\"\n\nconst ProductAdd = props => {\n    /* variables */\n    const {\n        createProduct, createProductReset, createProductState\n    } = props\n    const [formData, setFormData] = useState({\n        type: \"\",\n        status: \"enabled\",\n        name: \"\",\n        url_key: \"\",\n        price: \"\",\n        is_sale_price: \"\",\n        sale_price: \"\",\n        gst:\"\"\n    })\n    const [form] = Form.useForm()\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => createProductReset())\n    }, [])\n\n    useEffect(() => {\n        form.setFieldsValue({\n            status: \"enabled\",\n        })\n    }, [])\n\n    useEffect(() => {\n        if (createProductState.apiState === \"success\") {\n            setRedirect([true, '/product/list'])\n            message.success(createProductState.message);\n        }\n\n        if (createProductState.apiState === \"error\") {\n            createProductReset()\n            message.error(createProductState.message);\n        }\n    }, [createProductState])\n\n    /* functions */\n    const handleChange = e => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const handleNumberChange = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSubmit = () => {\n        createProduct(formData)\n    }\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Add Product\"\n            />\n            <PageContainer>\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Product Type\"\n                                name=\"type\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Select name=\"type\" placeholder=\"Select Product Type\"\n                                    onSelect={v => handleNumberChange(\"type\", v)}\n                                >\n                                    <Select.Option key=\"simple\" value=\"simple\">Simple</Select.Option>\n                                    <Select.Option key=\"variant\" value=\"variant\">Variant</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Status\"\n                                name=\"status\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Select name=\"status\" placeholder=\"Select Status\"\n                                    onSelect={v => handleNumberChange(\"status\", v)}\n                                >\n                                    <Select.Option key=\"enabled\" value=\"enabled\" >Enabled</Select.Option>\n                                    <Select.Option key=\"disabled\" value=\"disabled\">Disabled</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Name\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"URL key\"\n                                name=\"url_key\"\n                                rules={[\n                                    { required: true, message: 'Required' },\n                                    {\n                                        pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                        message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                    }\n                                ]}\n                            >\n                                <Input name=\"url_key\" placeholder=\"Enter URL key\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"GST\"\n                                name=\"gst\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Select name=\"gst\" placeholder=\"Select GST\" defaultValue=\"Select GST\"\n                                    onSelect={v => handleNumberChange(\"gst\", v)}\n                                > \n                                    <Select.Option key=\"5\" value=\"5\">5</Select.Option>\n                                    <Select.Option key=\"12\" value=\"12\">12</Select.Option>\n                                    <Select.Option key=\"18\" value=\"18\">18</Select.Option>\n                                    <Select.Option key=\"28\" value=\"28\">28</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Price\"\n                                name=\"price\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"price\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Set Sale Price\"\n                                name=\"is_sale_price\"\n                            >\n                                <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\n                                    onSelect={v => handleNumberChange(\"is_sale_price\", v)}\n                                >\n                                    <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\n                                    <Select.Option key=\"no\" value=\"no\">No</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Sale Price\"\n                                name=\"sale_price\"\n                            >\n                                <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"sale_price\", v)}\n                                />\n                            </Form.Item>\n                        </Col> \n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createProductState.apiState === \"loading\"} >SUBMIT</Button>\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    createProductState: state.createProduct,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    createProduct: (params) => dispatch(createProduct(params)),\n    createProductReset: () => dispatch(createProductReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductAdd)","import React, { useState } from \"react\"\nimport { Tabs } from 'antd';\nimport { Redirect } from \"react-router-dom\"\n\nconst { TabPane } = Tabs;\n\nconst ProductTabs = props => {\n    /* variable */\n    const [redirect, serRedirect] = useState([false, \"\"])\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Tabs activeKey={props.active}\n                onChange={key => {\n                    if (key === \"basic_info\") serRedirect([true, `/product/${props.id}/edit`])\n                    if (key === \"variants\") serRedirect([true, `/product/${props.id}/edit/variants`])\n                    if (key === \"images\") serRedirect([true, `/product/${props.id}/edit/images`])\n                    if (key === \"description\") serRedirect([true, `/product/${props.id}/edit/description`])\n                    if (key === \"related_products\") serRedirect([true, `/product/${props.id}/edit/related-products`])\n                }}\n            >\n                <Tabs.TabPane key=\"basic_info\" tab={\"Basic Info\"} />\n                {props.type === \"variant\" &&\n                    <Tabs.TabPane key=\"variants\" tab={\"Variants\"} />\n                }\n                <Tabs.TabPane key=\"images\" tab={\"Images\"} />\n                <Tabs.TabPane key=\"description\" tab={\"Description\"} />\n                <Tabs.TabPane key=\"related_products\" tab={\"Related Products\"} />\n            </Tabs>\n        </>\n    )\n}\n\nexport default ProductTabs","import React, { useState, useEffect } from \"react\"\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, TreeSelect, Switch } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* actions */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { updateProduct, updateProductReset } from \"../../action/updateProductAction\"\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\n\nconst { TreeNode } = TreeSelect\n\n\n\nconst ProductEdit = props => {\n    /* variables */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        updateProduct, updateProductReset, updateProductState,\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n    } = props\n    const [redirect, setRedirect] = useState([false, ''])\n    const [form] = Form.useForm()\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        type: \"\",\n        status: \"enabled\",\n        name: \"\",\n        url_key: \"\",\n        price: \"\",\n        is_sale_price: \"\",\n        sale_price: \"\",\n        categories: [],\n        is_exclusive: \"no\",\n        sku: \"\",\n        short_description: \"\",\n        tags: \"\",\n        stock: \"\",\n        gst: \"\",\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getProductViewReset()\n            updateProductReset()\n            getCategoryTreeReset()\n        })\n    }, [])\n\n\n    useEffect(() => {\n        getCategoryTree()\n        getProductView({\n            product_id: product_id\n        })\n    }, [])\n\n    useEffect(() => {\n        if (getProductViewState.apiState === \"success\") {\n            form.setFieldsValue({\n                type: getProductViewState.product.type,\n                status: getProductViewState.product.status,\n                name: getProductViewState.product.name,\n                url_key: getProductViewState.product.url_key,\n                price: getProductViewState.product.price,\n                is_sale_price: getProductViewState.product.is_sale_price,\n                sale_price: getProductViewState.product.sale_price,\n                categories: getProductViewState.product.categories,\n                sku: getProductViewState.product.sku,\n                short_description: getProductViewState.product.short_description,\n                tags: getProductViewState.product.tags,\n                stock: getProductViewState.product.stock,\n                gst: getProductViewState.product.gst,\n\n                meta_title       : getProductViewState.product.meta_title,\n                meta_keyword     : getProductViewState.product.meta_keyword,\n                meta_description : getProductViewState.product.meta_description,\n                meta_image_url   : getProductViewState.product.meta_image_url,\n            })\n            setFormData({\n                ...formData,\n                ['type']    : getProductViewState.product.type,\n                ['status']  : getProductViewState.product.status,\n                ['name']    : getProductViewState.product.name,\n                ['url_key'] : getProductViewState.product.url_key,\n                ['price'] : getProductViewState.product.price,\n                ['is_sale_price'] : getProductViewState.product.is_sale_price,\n                ['sale_price']    : getProductViewState.product.sale_price,\n                ['categories']    : getProductViewState.product.categories,\n                ['is_exclusive']  : getProductViewState.product.is_exclusive,\n                ['sku']: getProductViewState.product.sku,\n                ['short_description']: getProductViewState.product.short_description,\n                ['tags']: getProductViewState.product.tags,\n                ['stock']: getProductViewState.product.stock,\n                ['gst']: getProductViewState.product.gst,\n\n                ['meta_title']       : getProductViewState.product.meta_title,\n                ['meta_keyword']     : getProductViewState.product.meta_keyword,\n                ['meta_description'] : getProductViewState.product.meta_description,\n                ['meta_image_url']   : getProductViewState.product.meta_image_url,\n            })\n        }\n    }, [getProductViewState])\n\n    useEffect(() => {\n        if (updateProductState.apiState === \"success\") {\n            setRedirect([true, '/product/list'])\n            message.success(updateProductState.message);\n        }\n\n        if (updateProductState.apiState === \"error\") {\n            updateProductReset()\n            message.error(updateProductState.message);\n        }\n    }, [updateProductState])\n\n    /* functions */\n    const categoryOptions = (tree) => {\n        let finalJsx = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\n                )\n            } else {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name} />\n                )\n            }\n        })\n        return finalJsx\n    }\n\n    const handleChange = e => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const handleNumberChange = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSubmit = () => {\n        updateProduct(formData)\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Edit Product\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={getProductViewState.product.id} active=\"basic_info\" type={getProductViewState.product.type} />\n                        <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Product Type\"\n                                        name=\"type\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Select name=\"type\" placeholder=\"Select Product Type\"\n                                            onSelect={v => handleNumberChange(\"type\", v)}\n                                            disabled\n                                        >\n                                            <Select.Option key=\"simple\" value=\"simple\">Simple</Select.Option>\n                                            <Select.Option key=\"variant\" value=\"variant\">Variant</Select.Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Status\"\n                                        name=\"status\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Select name=\"status\" placeholder=\"Select Status\"\n                                            onSelect={v => handleNumberChange(\"status\", v)}\n                                        >\n                                            <Select.Option key=\"enabled\" value=\"enabled\" >Enabled</Select.Option>\n                                            <Select.Option key=\"disabled\" value=\"disabled\">Disabled</Select.Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"SKU\"\n                                        name=\"sku\"\n                                    >\n                                        <Input name=\"sku\" placeholder=\"Enter SKU\"\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                {getProductViewState.product.type === \"simple\" &&\n                                    <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                        <Form.Item\n                                            label=\"Stock\"\n                                            name=\"stock\"\n                                        >\n                                            <InputNumber name=\"stock\" placeholder=\"Enter Stock\"\n                                                onChange={v => handleNumberChange(\"stock\", v)}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Form.Item>\n                                    </Col>\n                                }\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Name\"\n                                        name=\"name\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Input name=\"name\" placeholder=\"Enter Name\"\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"URL key\"\n                                        name=\"url_key\"\n                                        rules={[\n                                            { required: true, message: 'Required' },\n                                            {\n                                                pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                                message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                            }\n                                        ]}\n                                    >\n                                        <Input name=\"url_key\" placeholder=\"Enter URL key\"\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Price\"\n                                        name=\"price\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }} min={0}\n                                            onChange={v => handleNumberChange(\"price\", v)}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Set Sale Price\"\n                                        name=\"is_sale_price\"\n                                    >\n                                        <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\n                                            onSelect={v => handleNumberChange(\"is_sale_price\", v)}\n                                        >\n                                            <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\n                                            <Select.Option key=\"no\" value=\"no\">No</Select.Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Sale Price\"\n                                        name=\"sale_price\"\n                                    >\n                                        <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }} min={0}\n                                            onChange={v => handleNumberChange(\"sale_price\", v)}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"GST\"\n                                        name=\"gst\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Select name=\"gst\" placeholder=\"Select GST\" defaultValue=\"Select GST\"\n                                            onSelect={v => handleNumberChange(\"gst\", v)}\n                                        >\n                                            <Select.Option key=\"5\" value=\"5\">5</Select.Option>\n                                            <Select.Option key=\"12\" value=\"12\">12</Select.Option>\n                                            <Select.Option key=\"18\" value=\"18\">18</Select.Option>\n                                            <Select.Option key=\"28\" value=\"28\">28</Select.Option>\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Meta Title\"\n                                        name=\"meta_title\"\n                                    >\n                                        <Input name=\"meta_title\" placeholder=\"Enter product title\" style={{ width: \"100%\" }} min={0}\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Meta Keyword\"\n                                        name=\"meta_keyword\"\n                                    >\n                                        <Input name=\"meta_keyword\" placeholder=\"Enter product keyword\" style={{ width: \"100%\" }} min={0}\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Meta Description\"\n                                        name=\"meta_description\"\n                                    >\n                                        <Input.TextArea name=\"meta_description\" placeholder=\"Enter product description\" style={{ width: \"100%\" }} min={0}\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Meta image url\"\n                                        name=\"meta_image_url\"\n                                    >\n                                        <Input name=\"meta_image_url\" placeholder=\"Enter product url\" style={{ width: \"100%\" }} min={0}\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n\n\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Categories\"\n                                        name=\"categories\"\n                                    >\n                                        <TreeSelect\n                                            showSearch\n                                            filterTreeNode={(input, treeNode) =>\n                                                treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                            }\n                                            style={{ width: '100%' }}\n                                            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                            placeholder=\"Select categories\"\n                                            allowClear\n                                            multiple\n                                            treeDefaultExpandAll\n                                            onChange={(value, node) => handleSelect(\"categories\", value)}\n                                            showCheckedStrategy={TreeSelect.SHOW_ALL}\n                                        >\n                                            {categoryOptions(getCategoryTreeState.tree)}\n                                        </TreeSelect>\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Is Exclusive?\"\n                                        name=\"is_exclusive\"\n                                    >\n                                        <Switch name=\"is_exclusive\" checkedChildren=\"Yes\" unCheckedChildren=\"No\"\n                                            onChange={checked => setFormData({ ...formData, ['is_exclusive']: checked ? \"yes\" : \"no\" })}\n                                            defaultChecked={getProductViewState.product.is_exclusive === \"yes\" ? true : false}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Short Description\"\n                                        name=\"short_description\"\n                                    >\n                                        <Input.TextArea name=\"short_description\" placeholder=\"Enter Short Description\"\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Tags (comma separted)\"\n                                        name=\"tags\"\n                                    >\n                                        <Input.TextArea name=\"tags\" placeholder=\"Enter comma separted Tags\"\n                                            onChange={handleChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Button type=\"primary\" htmlType=\"submit\" loading={updateProductState.apiState === \"loading\"} >SUBMIT</Button>\n                        </Form>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    updateProductState: state.updateProduct,\n    getCategoryTreeState: state.getCategoryTree,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    updateProduct: (params) => dispatch(updateProduct(params)),\n    updateProductReset: () => dispatch(updateProductReset()),\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductEdit)","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport {\n    Select, Form, Row, Col, Button, message, Divider, Alert, InputNumber, Table, Switch,\n    Space, Popconfirm, Input\n} from \"antd\"\nimport _ from \"lodash\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* actions */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { getAttributeList, getAttributeListReset } from \"../../action/getAttributeListAction\"\nimport { saveAttributeForVariants, saveAttributeForVariantsReset } from \"../../action/saveAttributeForVariantsAction\"\nimport { createProductVariant, createProductVariantReset } from \"../../action/createProductVariantAction\"\nimport { getProductVariantList, getProductVariantListReset } from \"../../action/getProductVariantListAction\"\nimport { saveSpProdData, saveSpProdDataReset } from \"../../action/saveSpProdDataAction\"\nimport { saveSpImgData, saveSpImgDataReset } from \"../../action/saveSpImgDataAction\"\nimport { delProdVar, delProdVarReset } from \"../../action/delProdVarAction\"\n\nconst ProductVariants = props => {\n    /* variables */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        getAttributeList, getAttributeListReset, getAttributeListState,\n        saveAttributeForVariants, saveAttributeForVariantsReset, saveAttributeForVariantsState,\n        createProductVariant, createProductVariantReset, createProductVariantState,\n        getProductVariantList, getProductVariantListReset, getProductVariantListState,\n        saveSpProdData, saveSpProdDataReset, saveSpProdDataState,\n        saveSpImgData, saveSpImgDataReset, saveSpImgDataState,\n        delProdVar, delProdVarReset, delProdVarState,\n    } = props\n    const [attributes_for_variants, set_attributes_for_variants] = useState([])\n    const [refresh, setRefresh] = useState(0)\n    const [form] = Form.useForm()\n    const [form2] = Form.useForm()\n    const [form3] = Form.useForm()\n    const [variant_data, set_variant_data] = useState({\n        attributes: [],\n        stock: 0,\n        price: 0,\n        product_id: product_id\n    })\n    const [columns, set_columns] = useState([])\n    const [tableData, setTableData] = useState([])\n    const [separateProductData, setSeparateProductData] = useState({\n        product_id: product_id,\n        display_separate: false,\n        attribute_id: \"\"\n    })\n    const [separateImgData, setSeparateImgData] = useState({\n        product_id: product_id,\n        display_separate: false,\n        attribute_id: \"\"\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getProductViewReset()\n            getAttributeListReset()\n            saveAttributeForVariantsReset()\n            createProductVariantReset()\n            getProductVariantListReset()\n            saveSpProdDataReset()\n            saveSpImgDataReset()\n            delProdVarReset()\n        })\n    }, [])\n\n\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        getAttributeList({\n            nature: \"variant\"\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (getProductViewState.apiState === \"success\") {\n            if (getProductViewState.product.attributes_for_variants) {\n                form.setFieldsValue({\n                    attributes_for_variants: getProductViewState.product.attributes_for_variants.split(\",\")\n                })\n                set_attributes_for_variants(getProductViewState.product.attributes_for_variants.split(\",\"))\n            }\n\n            if (getProductViewState.product.variant_count > 0) {\n                getProductVariantList({ product_id: product_id })\n            }\n\n            form2.setFieldsValue({\n                display_separate: getProductViewState.product.display_separate_product_by_attribute ? true : false,\n                display_separate_attribute_id: getProductViewState.product.display_separate_product_by_attribute,\n            })\n            setSeparateProductData({\n                ...separateProductData,\n                [\"display_separate\"]: getProductViewState.product.display_separate_product_by_attribute ? true : false,\n                [\"attribute_id\"]: getProductViewState.product.display_separate_product_by_attribute\n            })\n\n            form3.setFieldsValue({\n                display_separate_img: getProductViewState.product.attribute_for_separate_images ? true : false,\n                display_separate_img_attribute_id: getProductViewState.product.attribute_for_separate_images,\n            })\n            setSeparateImgData({\n                ...separateImgData,\n                [\"display_separate\"]: getProductViewState.product.attribute_for_separate_images ? true : false,\n                [\"attribute_id\"]: getProductViewState.product.attribute_for_separate_images\n            })\n\n        }\n    }, [getProductViewState])\n\n    useEffect(() => {\n        if (saveAttributeForVariantsState.apiState === \"success\") {\n            message.success(saveAttributeForVariantsState.message);\n            setRefresh(refresh + 1)\n            saveAttributeForVariantsReset()\n        }\n\n        if (saveAttributeForVariantsState.apiState === \"error\") {\n            saveAttributeForVariantsReset()\n            message.error(saveAttributeForVariantsState.message);\n        }\n    }, [saveAttributeForVariantsState])\n\n    useEffect(() => {\n        if (createProductVariantState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            createProductVariantReset()\n            message.success(createProductVariantState.message);\n        }\n\n        if (createProductVariantState.apiState === \"error\") {\n            createProductVariantReset()\n            message.error(createProductVariantState.message);\n        }\n    }, [createProductVariantState])\n\n    useEffect(() => {\n        if (getProductVariantListState.apiState === \"success\") {\n            let columns = []\n\n            getProductVariantListState.list[0].attributes.map(obj => {\n                columns.push({\n                    title: obj.name,\n                    dataIndex: obj.name,\n                    key: obj.name,\n                })\n            })\n            columns.push({\n                title: \"Name\",\n                dataIndex: \"name\",\n                key: \"name\",\n            }, {\n                title: \"Price\",\n                dataIndex: \"price\",\n                key: \"Price\",\n            }, {\n                title: \"Is Sale Price\",\n                dataIndex: \"is_sale_price\",\n                key: \"is_sale_price\",\n            }, {\n                title: \"Sale Price\",\n                dataIndex: \"sale_price\",\n                key: \"sale_price\",\n            }, {\n                title: \"Stock\",\n                dataIndex: \"stock\",\n                key: \"Stock\",\n            }, {\n                title: 'Action',\n                dataIndex: 'id',\n                key: 'action',\n                render: (id) => (\n                    <Popconfirm\n                        title=\"Are you sure to delete this variant?\"\n                        onConfirm={() => delProdVar({\n                            product_id: product_id,\n                            product_variant_id: id\n                        })}\n                        okText=\"Delete\"\n                        cancelText=\"Cancel\"\n                        okType=\"danger\"\n                    >\n                        <Button size=\"small\" icon={<DeleteOutlined />} />\n                    </Popconfirm>\n                )\n            })\n            set_columns(columns)\n\n            let tableData = []\n            getProductVariantListState.list.map(p => {\n                let rowObj = {}\n                rowObj.key = p.id\n                rowObj.name = p.name\n                rowObj.price = p.price\n                rowObj.is_sale_price = p.is_sale_price\n                rowObj.sale_price = p.sale_price\n                rowObj.stock = p.stock\n                rowObj.id = p.id\n                p.attributes.map(obj => {\n                    rowObj[obj.name] = obj.option_value\n                })\n                tableData.push(rowObj)\n            })\n            setTableData(tableData)\n        }\n    }, [getProductVariantListState])\n\n    useEffect(() => {\n        if (saveSpProdDataState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            saveSpProdDataReset()\n            message.success(saveSpProdDataState.message);\n        }\n\n        if (saveSpProdDataState.apiState === \"error\") {\n            saveSpProdDataReset()\n            message.error(saveSpProdDataState.message);\n        }\n    }, [saveSpProdDataState])\n\n    useEffect(() => {\n        if (saveSpImgDataState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            saveSpImgDataReset()\n            message.success(saveSpImgDataState.message);\n        }\n\n        if (saveSpImgDataState.apiState === \"error\") {\n            saveSpImgDataReset()\n            message.error(saveSpImgDataState.message);\n        }\n    }, [saveSpImgDataState])\n\n    useEffect(() => {\n        if (delProdVarState.apiState === \"success\") {\n            message.success(delProdVarState.message);\n            setRefresh(refresh + 1)\n            delProdVarReset()\n        }\n\n        if (delProdVarState.apiState === \"error\") {\n            delProdVarReset()\n            message.error(delProdVarState.message);\n        }\n    }, [delProdVarState])\n\n\n    /* functions */\n    const handleAttributeForVariantsSubmit = () => {\n        saveAttributeForVariants({\n            product_id: product_id,\n            attributes: attributes_for_variants\n        })\n    }\n\n    const handleAttributeChange = (obj) => {\n        let arr = variant_data.attributes\n        if (_.findIndex(arr, { 'attr_id': obj.attr_id }) > -1) {\n            arr = arr.filter(item => item.attr_id !== obj.attr_id)\n        }\n        arr.push(obj)\n        set_variant_data({ ...variant_data, ['attributes']: arr })\n    }\n\n    const renderVariantForm = () => {\n        let jsx = []\n        getAttributeListState.list.map(attr => {\n            let attributes_for_variants = getProductViewState.product.attributes_for_variants.split(\",\")\n            if (attributes_for_variants.includes(attr.id)) {\n                jsx.push(\n                    <Col span=\"6\">\n                        <Form.Item\n                            name={`attribute_${attr.id}`}\n                            label={`${attr.name}`}\n                            rules={[{ required: true, message: 'Required' }]}\n                        >\n                            <Select\n                                onChange={v => handleAttributeChange({ attr_id: attr.id, option_id: v })}\n                                placeholder={`Select ${attr.name}`}\n                                name={`attribute_${attr.id}`}\n                            >\n                                {attr.options.map(option => (\n                                    <Select.Option key={option.id} value={option.id} >{option.option_value}</Select.Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                    </Col>\n                )\n            }\n        })\n        jsx.push(\n            <>\n                <Col span=\"6\">\n                    <Form.Item\n                        name=\"name\"\n                        label=\"Name\"\n                        rules={[{ required: true, message: 'Required' }]}\n                    >\n                        <Input name=\"name\" placeholder=\"Enter Name\"\n                            onChange={e => set_variant_data({ ...variant_data, [\"name\"]: e.target.value })}\n                        />\n                    </Form.Item>\n                </Col>\n                <Col span=\"6\">\n                    <Form.Item\n                        name=\"price\"\n                        label=\"Price\"\n                        rules={[{ required: true, message: 'Required' }]}\n                    >\n                        <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }}\n                            onChange={v => set_variant_data({ ...variant_data, [\"price\"]: v })}\n                        />\n                    </Form.Item>\n                </Col>\n                <Col span=\"6\">\n                    <Form.Item\n                        name=\"is_sale_price\"\n                        label=\"Set Sale Price\"\n                    >\n                        <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\n                            onSelect={v => set_variant_data({ ...variant_data, [\"is_sale_price\"]: v })}\n                        >\n                            <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\n                            <Select.Option key=\"no\" value=\"no\">No</Select.Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n                <Col span=\"6\">\n                    <Form.Item\n                        name=\"sale_price\"\n                        label=\"Sale Price\"\n                    >\n                        <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }}\n                            onChange={v => set_variant_data({ ...variant_data, [\"sale_price\"]: v })}\n                        />\n                    </Form.Item>\n                </Col>\n                <Col span=\"6\">\n                    <Form.Item\n                        name=\"stock\"\n                        label=\"Stock\"\n                        rules={[{ required: true, message: 'Required' }]}\n                    >\n                        <InputNumber name=\"stock\" placeholder=\"Enter Stock\" style={{ width: \"100%\" }}\n                            onChange={v => set_variant_data({ ...variant_data, [\"stock\"]: v })}\n                        />\n                    </Form.Item>\n                </Col>\n            </>\n        )\n        return jsx\n    }\n\n    const handleCreateVariantSubmit = () => {\n        createProductVariant(variant_data)\n    }\n\n    const handleSpProdDataSub = () => {\n        if (separateProductData.display_separate) {\n            if (!separateProductData.attribute_id) {\n                alert(\"Select an attribute\")\n                return\n            }\n        }\n\n        saveSpProdData(separateProductData)\n    }\n\n    const handleSpImgDataSub = () => {\n        if (separateImgData.display_separate) {\n            if (!separateImgData.attribute_id) {\n                alert(\"Select an attribute\")\n                return\n            }\n        }\n\n        saveSpImgData(separateImgData)\n    }\n\n    return (\n        <>\n            <Header\n                title=\"Edit Product\"\n            />\n            <PageContainer>\n                {(getProductViewState.apiState === \"success\" && getAttributeListState.apiState === \"success\") &&\n                    <>\n                        <ProductTabs id={getProductViewState.product.id} active=\"variants\" type={getProductViewState.product.type} />\n                        {getProductViewState.product.variant_count === 0 &&\n                            <>\n                                <Row >\n                                    <Col span=\"18\">\n                                        <Form form={form} layout=\"vertical\" onFinish={handleAttributeForVariantsSubmit}>\n                                            <Form.Item\n                                                name=\"attributes_for_variants\"\n                                                label=\"Select attributes to create variants\"\n                                                rules={[{ required: true, message: 'Required' }]}\n                                            >\n                                                <Select\n                                                    onChange={v => set_attributes_for_variants(v)}\n                                                    placeholder=\"Select attributes to create variants\"\n                                                    mode=\"multiple\"\n                                                >\n                                                    {getAttributeListState.list.map(attr => (\n                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name} (${attr.type})`}</Select.Option>\n                                                    ))}\n                                                </Select>\n                                            </Form.Item>\n                                            <Button type=\"primary\" htmlType=\"submit\" >NEXT</Button>\n                                        </Form>\n                                    </Col>\n                                </Row>\n                                <Divider />\n                            </>\n                        }\n\n                        {getProductViewState.product.variant_count > 0 &&\n                            <Alert message=\"Do you want to change attribute set for product variant? For that you need to delete below variants.\"\n                                type=\"info\" showIcon style={{ marginBottom: 24 }} />\n                        }\n\n                        {getProductViewState.product.attributes_for_variants &&\n                            <>\n                                <h3>Create Variant</h3>\n                                <Form layout=\"vertical\" onFinish={handleCreateVariantSubmit} >\n                                    <Row gutter=\"20\" >\n                                        {renderVariantForm()}\n                                    </Row>\n                                    <Button type=\"primary\" htmlType=\"submit\" >CREATE VARIANT</Button>\n                                </Form>\n                                <Divider />\n                            </>\n                        }\n\n                        {(getProductVariantListState.list).length > 0 &&\n                            <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n                        }\n\n                        {/* {getProductViewState.product.attributes_for_variants &&\n                            <>\n                                <h3 style={{ marginTop: 24 }} >Do you want to display separate products on product-list by attribute?</h3>\n\n                                <Form form={form2} layout=\"vertical\" >\n                                    <Row gutter=\"20\" >\n                                        <Col span={3}>\n                                            <Form.Item name=\"display_separate\">\n                                                <Switch name=\"display_separate\"\n                                                    onChange={(checked) => setSeparateProductData({ ...separateProductData, [\"display_separate\"]: checked })}\n                                                    defaultChecked={getProductViewState.product.display_separate_product_by_attribute ? true : false}\n                                                />\n                                            </Form.Item>\n                                        </Col>\n                                        {separateProductData.display_separate &&\n                                            <>\n                                                <Col span={8}>\n                                                    <Form.Item name=\"display_separate_attribute_id\">\n                                                        <Select\n                                                            onChange={v => setSeparateProductData({ ...separateProductData, [\"attribute_id\"]: v })}\n                                                            placeholder=\"Select attribute\"\n                                                            style={{ width: \"100%\" }}\n                                                            name=\"display_separate_attribute_id\"\n                                                        >\n                                                            {getAttributeListState.list.map(attr => {\n                                                                if (attributes_for_variants.includes(attr.id)) {\n                                                                    return (\n                                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name}`}</Select.Option>\n                                                                    )\n                                                                }\n                                                            }\n                                                            )}\n                                                        </Select>\n                                                    </Form.Item>\n                                                </Col>\n\n                                            </>\n                                        }\n                                        <Col span={4}>\n                                            <Button type=\"primary\" onClick={handleSpProdDataSub} >SAVE</Button>\n                                        </Col>\n                                    </Row>\n                                </Form>\n                            </>\n                        } */}\n\n\n                        {getProductViewState.product.attributes_for_variants &&\n                            <>\n                                <h3 style={{ marginTop: 24 }} >Do you want to display separate images by attribute?</h3>\n\n                                <Form form={form3} layout=\"vertical\" >\n                                    <Row gutter=\"20\" >\n                                        <Col span={3}>\n                                            <Form.Item name=\"display_separate_img\">\n                                                <Switch name=\"display_separate_img\"\n                                                    onChange={(checked) => setSeparateImgData({ ...separateImgData, [\"display_separate\"]: checked })}\n                                                    defaultChecked={getProductViewState.product.attribute_for_separate_images ? true : false}\n                                                />\n                                            </Form.Item>\n                                        </Col>\n                                        {separateImgData.display_separate &&\n                                            <>\n                                                <Col span={8}>\n                                                    <Form.Item name=\"display_separate_img_attribute_id\">\n                                                        <Select\n                                                            onChange={v => setSeparateImgData({ ...separateImgData, [\"attribute_id\"]: v })}\n                                                            placeholder=\"Select attribute\"\n                                                            style={{ width: \"100%\" }}\n                                                            name=\"display_separate_img_attribute_id\"\n                                                        >\n                                                            {getAttributeListState.list.map(attr => {\n                                                                if (attributes_for_variants.includes(attr.id)) {\n                                                                    return (\n                                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name}`}</Select.Option>\n                                                                    )\n                                                                }\n                                                            }\n                                                            )}\n                                                        </Select>\n                                                    </Form.Item>\n                                                </Col>\n\n                                            </>\n                                        }\n                                        <Col span={4}>\n                                            <Button type=\"primary\" onClick={handleSpImgDataSub} >SAVE</Button>\n                                        </Col>\n                                    </Row>\n                                </Form>\n                            </>\n                        }\n\n\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    getAttributeListState: state.getAttributeList,\n    saveAttributeForVariantsState: state.saveAttributeForVariants,\n    createProductVariantState: state.createProductVariant,\n    getProductVariantListState: state.getProductVariantList,\n    saveSpProdDataState: state.saveSpProdData,\n    saveSpImgDataState: state.saveSpImgData,\n    delProdVarState: state.delProdVar,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    getAttributeList: (params) => dispatch(getAttributeList(params)),\n    getAttributeListReset: () => dispatch(getAttributeListReset()),\n    saveAttributeForVariants: (params) => dispatch(saveAttributeForVariants(params)),\n    saveAttributeForVariantsReset: () => dispatch(saveAttributeForVariantsReset()),\n    createProductVariant: (params) => dispatch(createProductVariant(params)),\n    createProductVariantReset: () => dispatch(createProductVariantReset()),\n    getProductVariantList: (params) => dispatch(getProductVariantList(params)),\n    getProductVariantListReset: () => dispatch(getProductVariantListReset()),\n    saveSpProdData: (params) => dispatch(saveSpProdData(params)),\n    saveSpProdDataReset: () => dispatch(saveSpProdDataReset()),\n    saveSpImgData: (params) => dispatch(saveSpImgData(params)),\n    saveSpImgDataReset: () => dispatch(saveSpImgDataReset()),\n    delProdVar: (params) => dispatch(delProdVar(params)),\n    delProdVarReset: () => dispatch(delProdVarReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductVariants)","import React, { useState, useEffect } from \"react\"\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, Space, Tooltip, Popconfirm, Tag, Divider } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined, StarOutlined } from \"@ant-design/icons\"\n\n/* actions */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { saveProdImg, saveProdImgReset } from \"../../action/saveProdImgAction\"\nimport { delProdImg, delProdImgReset } from \"../../action/delProdImgAction\"\nimport { markImgThumb, markImgThumbReset } from \"../../action/markImgThumbAction\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst ProductImages = props => {\n    /* variables */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        saveProdImg, saveProdImgReset, saveProdImgState,\n        delProdImg, delProdImgReset, delProdImgState,\n        markImgThumb, markImgThumbReset, markImgThumbState,\n    } = props\n    const [redirect, setRedirect] = useState([false, ''])\n    const [image, set_image] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const [imgAttr, setImgAttr] = useState({\n        attribute_id: null,\n        attribute_option_id: null\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getProductViewReset()\n            saveProdImgReset()\n            delProdImgReset()\n            markImgThumbReset()\n        })\n    }, [])\n\n\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (saveProdImgState.apiState === \"success\") {\n            saveProdImgReset()\n            setRefresh(refresh + 1)\n            message.success(saveProdImgState.message);\n            setSubmitLoading(false)\n        }\n\n        if (saveProdImgState.apiState === \"error\") {\n            saveProdImgReset()\n            message.error(saveProdImgState.message);\n            setSubmitLoading(false)\n        }\n    }, [saveProdImgState])\n\n    useEffect(() => {\n        if (delProdImgState.apiState === \"success\") {\n            delProdImgReset()\n            setRefresh(refresh + 1)\n            message.success(delProdImgState.message);\n        }\n\n        if (delProdImgState.apiState === \"error\") {\n            delProdImgReset()\n            message.error(delProdImgState.message);\n        }\n    }, [delProdImgState])\n\n    useEffect(() => {\n        if (markImgThumbState.apiState === \"success\") {\n            markImgThumbReset()\n            setRefresh(refresh + 1)\n            message.success(markImgThumbState.message);\n        }\n\n        if (markImgThumbState.apiState === \"error\") {\n            markImgThumbReset()\n            message.error(markImgThumbState.message);\n        }\n    }, [markImgThumbState])\n\n    /* functions */\n    const handleImgSub = async () => {\n        let filename = uuidv4()\n        let imageValRes = validateImageFile(image)\n\n        if (!imageValRes.status) {\n            alert(\"Image's extension is not allowed.\")\n            return\n        }\n\n        setSubmitLoading(true)\n\n        const s3UrlRes1 = await getS3SingedUrl(filename, imageValRes.ext, image)\n        // const response  = await axios.put(s3UrlRes1.url, image)\n\n        console.clear(); console.log({ s3UrlRes1 })\n\n        saveProdImg({\n            product_id: product_id,\n            image: `${filename}.${imageValRes.ext}`,\n            attribute_id: imgAttr.attribute_id,\n            attribute_option_id: imgAttr.attribute_option_id,\n        })\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Edit Product\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={getProductViewState.product.id} active=\"images\" type={getProductViewState.product.type} />\n                        <Form onFinish={handleImgSub}>\n                            <Row gutter=\"12\" >\n                                <Col span=\"12\">\n                                    <Form.Item\n                                        label=\"Image\"\n                                        name=\"image\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                        extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                                    >\n                                        <Input type=\"file\" name=\"image\"\n                                            onChange={e => {\n                                                set_image(e.target.files[0])\n                                                setImgAttr({\n                                                    attribute_id: null,\n                                                    attribute_option_id: null,\n                                                })\n                                            }}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col span=\"4\">\n                                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SAVE</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n\n                        <div style={{ display: \"flex\" }} >\n                            {getProductViewState.images.map(img => {\n                                if (!img.attribute_option_id) {\n                                    return (\n                                        <div style={{ marginRight: 4, border: \"solid 1px #f5f5f5\", padding: 4 }} >\n                                            <img src={`${cnf.s3_base_url}${img.image}`} alt=\"\" style={{ height: \"auto\", width: 100 }} />\n                                            <div style={{ marginTop: 8 }} >\n                                                <Space>\n                                                    <Popconfirm\n                                                        title=\"Are you sure to delete this image?\"\n                                                        onConfirm={() => delProdImg({\n                                                            product_id: product_id,\n                                                            img_id: img.id,\n                                                            image: img.image,\n                                                            attribute_id: null,\n                                                            attribute_option_id: null,\n                                                        })}\n                                                        okText=\"Delete\"\n                                                        cancelText=\"Cancel\"\n                                                        okType=\"danger\"\n                                                    >\n                                                        <Button size=\"small\" icon={<DeleteOutlined />} />\n                                                    </Popconfirm>\n                                                    {!img.is_thumbnail ?\n                                                        <Tooltip title=\"Mark as Thumbnail\" placement=\"bottom\" >\n                                                            <Button size=\"small\" icon={<StarOutlined />} onClick={() => markImgThumb({\n                                                                img_id: img.id,\n                                                                product_id: product_id,\n                                                                attribute_id: null,\n                                                                attribute_option_id: null,\n                                                            })} />\n                                                        </Tooltip>\n                                                        : <Tag color=\"green\">Thumbnail</Tag>\n                                                    }\n                                                </Space>\n                                            </div>\n                                        </div>\n                                    )\n                                }\n                            })}\n                        </div>\n\n                        {getProductViewState.product.attribute_for_separate_images &&\n                            <>\n                                <Divider />\n                                {getProductViewState.attr_data_for_sp_img.map(attr => (\n                                    <>\n                                        <Form onFinish={handleImgSub} >\n                                            <h3>Separate Images for {attr.name}: {attr.option_value}</h3>\n                                            <Row gutter=\"12\" >\n                                                <Col span=\"12\">\n                                                    <Form.Item\n                                                        label=\"Image\"\n                                                        name=\"image\"\n                                                        rules={[{ required: true, message: 'Required' }]}\n                                                        extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                                                    >\n                                                        <Input type=\"file\" name=\"image\"\n                                                            onChange={e => {\n                                                                set_image(e.target.files[0])\n                                                                setImgAttr({\n                                                                    attribute_id: attr.attribute_id,\n                                                                    attribute_option_id: attr.attribute_option_id,\n                                                                })\n                                                            }}\n                                                        />\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span=\"4\">\n                                                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SAVE</Button>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        <div style={{ display: \"flex\" }} >\n                                            {getProductViewState.images.map(img => {\n                                                if (img.attribute_option_id === attr.attribute_option_id) {\n                                                    return (\n                                                        <div style={{ marginRight: 4, border: \"solid 1px #f5f5f5\", padding: 4 }} >\n                                                            <img src={`${cnf.s3_base_url}${img.image}`} alt=\"\" style={{ height: \"auto\", width: 100 }} />\n                                                            <div style={{ marginTop: 8 }} >\n                                                                <Space>\n                                                                    <Popconfirm\n                                                                        title=\"Are you sure to delete this image?\"\n                                                                        onConfirm={() => delProdImg({\n                                                                            product_id: product_id,\n                                                                            img_id: img.id,\n                                                                            image: img.image,\n                                                                            attribute_id: img.attribute_id,\n                                                                            attribute_option_id: img.attribute_option_id,\n                                                                        })}\n                                                                        okText=\"Delete\"\n                                                                        cancelText=\"Cancel\"\n                                                                        okType=\"danger\"\n                                                                    >\n                                                                        <Button size=\"small\" icon={<DeleteOutlined />} />\n                                                                    </Popconfirm>\n                                                                    {!img.is_thumbnail ?\n                                                                        <Tooltip title=\"Mark as Thumbnail\" placement=\"bottom\" >\n                                                                            <Button size=\"small\" icon={<StarOutlined />} onClick={() => markImgThumb({\n                                                                                img_id: img.id,\n                                                                                product_id: product_id,\n                                                                                attribute_id: img.attribute_id,\n                                                                                attribute_option_id: img.attribute_option_id,\n                                                                            })} />\n                                                                        </Tooltip>\n                                                                        : <Tag color=\"green\">Thumbnail</Tag>\n                                                                    }\n                                                                </Space>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            })}\n                                        </div>\n                                        <Divider />\n                                    </>\n                                ))}\n                            </>\n                        }\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    saveProdImgState: state.saveProdImg,\n    delProdImgState: state.delProdImg,\n    markImgThumbState: state.markImgThumb,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    saveProdImg: (params) => dispatch(saveProdImg(params)),\n    saveProdImgReset: () => dispatch(saveProdImgReset()),\n    delProdImg: (params) => dispatch(delProdImg(params)),\n    delProdImgReset: () => dispatch(delProdImgReset()),\n    markImgThumb: (params) => dispatch(markImgThumb(params)),\n    markImgThumbReset: () => dispatch(markImgThumbReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductImages)","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, Row, Col, Table, Divider, Popconfirm, Space } from \"antd\"\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\nimport { Link } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* actions */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { addDescription, addDescriptionReset } from \"../../action/addDescriptionAction\"\nimport { listDescription, listDescriptionReset } from \"../../action/listDescriptionAction\"\n\n\nconst ProductDescription = props => {\n    /* variables */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        addDescription, addDescriptionReset, addDescriptionState,\n        listDescription, listDescriptionReset, listDescriptionState,\n    } = props\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        title: \"\"\n    })\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            key: 'title',\n        },\n        {\n            title: 'Sequence',\n            dataIndex: 'sequence',\n            key: 'sequence',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: obj => (\n                <Space size=\"middle\">\n                    <Link to={`/product/${product_id}/edit/description/${obj.key}`}>\n                        <Button size=\"small\" icon={<EditOutlined />} />\n                    </Link>\n                    <Popconfirm\n                        title=\"Are you sure to delete?\"\n                        onConfirm={() => console.log(\"hello\")}\n                        okText=\"DELETE\"\n                        cancelText=\"Cancel\"\n                        okType=\"danger\"\n                    >\n                        <Button size=\"small\" icon={<DeleteOutlined />} />\n                    </Popconfirm>\n                </Space>\n            ),\n        },\n    ];\n    const [tableData, setTableData] = useState([])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            addDescriptionReset()\n            listDescription()\n        })\n    }, [])\n\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        listDescription({\n            product_id: product_id\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (addDescriptionState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n        }\n    }, [addDescriptionState])\n\n    useEffect(() => {\n        if (listDescriptionState.apiState === \"success\") {\n            let tblData = []\n            listDescriptionState.list.map(item => {\n                tblData.push({\n                    key: item.id,\n                    title: item.title,\n                    sequence: item.sequence,\n                    action: item.id,\n                })\n            })\n            setTableData(tblData)\n        }\n    }, [listDescriptionState])\n\n    /* FUNTIONS */\n    const handleSubmit = () => {\n        addDescription(formData)\n    }\n\n    return (\n        <>\n            <Header\n                title=\"Product Description\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={product_id} active=\"description\" type={getProductViewState.product.type} />\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Title\"\n                                        name=\"title\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Input name=\"title\" placeholder=\"Enter Title\"\n                                            onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Button type=\"primary\" htmlType=\"submit\" >SUBMIT</Button>\n                        </Form>\n                        <Divider />\n                        <Table columns={columns} dataSource={tableData} size='small' />\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    addDescriptionState: state.addDescription,\n    listDescriptionState: state.listDescription,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    addDescription: (params) => dispatch(addDescription(params)),\n    addDescriptionReset: () => dispatch(addDescriptionReset()),\n    listDescription: (params) => dispatch(listDescription(params)),\n    listDescriptionReset: () => dispatch(listDescriptionReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescription)","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, Row, Col, InputNumber, message } from \"antd\"\nimport { Editor } from '@tinymce/tinymce-react'\n\n/* CUSTOM COMPONENTS */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n\n/* ACTIONS */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { getDescriptionView, getDescriptionViewReset } from \"../../action/getDescriptionViewAction\"\nimport { updateDescription, updateDescriptionReset } from \"../../action/updateDescriptionAction\"\n\n/* OTHERS */\nimport cnf from \"../../config\"\n\nconst ProductDescriptionEdit = props => {\n    /* VARIABLES */\n    const product_id = props.match.params.product_id\n    const description_id = props.match.params.description_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        getDescriptionView, getDescriptionViewReset, getDescriptionViewState,\n        updateDescription, updateDescriptionReset, updateDescriptionState,\n    } = props\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        description_id: description_id,\n        title: \"\",\n        content: \"\",\n        sequence: 1\n    })\n    const [form] = Form.useForm()\n\n    /* CALLBACKS */\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        getDescriptionView({\n            description_id: description_id\n        })\n    }, [])\n\n    useEffect(() => {\n        if (getDescriptionViewState.apiState === \"success\") {\n            form.setFieldsValue({\n                title: getDescriptionViewState.description.title,\n                sequence: getDescriptionViewState.description.sequence,\n            })\n            setFormData({\n                ...formData,\n                ['title']: getDescriptionViewState.description.title,\n                ['sequence']: getDescriptionViewState.description.sequence,\n                ['content']: getDescriptionViewState.description.content,\n            })\n        }\n    }, [getDescriptionViewState])\n\n    useEffect(() => {\n        if (updateDescriptionState.apiState === \"success\") {\n            updateDescriptionReset()\n            message.success(updateDescriptionState.message);\n        }\n\n        if (updateDescriptionState.apiState === \"error\") {\n            message.error(updateDescriptionState.message);\n        }\n    }, [updateDescriptionState])\n\n    /* FUNTIONS */\n    const handleSubmit = () => {\n        updateDescription(formData)\n    }\n\n    const handleEditorChange = (content, editor) => {\n        setFormData({\n            ...formData,\n            [\"content\"]: encodeURI(content)\n        })\n    }\n\n\n\n    return (\n        <>\n            <Header\n                title=\"Product Description\"\n            />\n            <PageContainer>\n                {(getProductViewState.apiState === \"success\" && getDescriptionViewState.apiState === \"success\") &&\n                    <>\n                        <ProductTabs id={product_id} active=\"description\" type={getProductViewState.product.type} />\n                        <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Title\"\n                                        name=\"title\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Input name=\"title\" placeholder=\"Enter Title\"\n                                            onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Sequence\"\n                                        name=\"sequence\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\n                                            onChange={v => setFormData({ ...formData, ['sequence']: v })}\n                                            style={{ width: \"100%\" }}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                    <Editor\n                                        initialValue={decodeURIComponent(getDescriptionViewState.description.content)}\n                                        apiKey={cnf.tinyKey}\n                                        init={{\n                                            height: 500,\n                                            menubar: false,\n                                            plugins: [\n                                                'advlist autolink lists link image charmap print preview anchor',\n                                                'searchreplace visualblocks code fullscreen',\n                                                'insertdatetime media table paste code help wordcount'\n                                            ],\n                                            toolbar:\n                                                'formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | code | link image | fontsizeselect',\n                                            fontsize_formats: '8pt 10pt 12pt 14pt 16pt 18pt 24pt 36pt 48pt'\n                                        }}\n                                        onEditorChange={handleEditorChange}\n                                    />\n                                </Col>\n                            </Row>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: 16 }} >SUBMIT</Button>\n                        </Form>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    getDescriptionViewState: state.getDescriptionView,\n    updateDescriptionState: state.updateDescription,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    getDescriptionView: (params) => dispatch(getDescriptionView(params)),\n    getDescriptionViewReset: () => dispatch(getDescriptionViewReset()),\n    updateDescription: (params) => dispatch(updateDescription(params)),\n    updateDescriptionReset: () => dispatch(updateDescriptionReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescriptionEdit)","import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Select, Row, Col, message, Table, Divider, Popconfirm } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\n/* CUSTOM COMPONENTS */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* ACTIONS */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\"\nimport { addRelProd, addRelProdReset } from \"../../action/addRelProdAction\"\nimport { listRelProd, listRelProdReset } from \"../../action/listRelProdAction\"\nimport { delRelProd, delRelProdReset } from \"../../action/delRelProdAction\"\n\nconst RelatedProducts = props => {\n    /* VARIABLES */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        getProductList, getProductListReset, getProductListState,\n        addRelProd, addRelProdReset, addRelProdState,\n        listRelProd, listRelProdReset, listRelProdState,\n        delRelProd, delRelProdReset, delRelProdState,\n    } = props\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        related_product_id: \"\"\n    })\n    const [refresh, setRefresh] = useState(0)\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: obj => (\n                <Popconfirm\n                    title=\"Are you sure to delete?\"\n                    onConfirm={() => delRelProd({\n                        product_id: product_id,\n                        related_product_id: obj.key,\n                    })}\n                    okText=\"DELETE\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            ),\n        },\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        getProductList()\n        listRelProd({\n            product_id: product_id\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (addRelProdState.apiState === \"success\") {\n            addRelProdReset()\n            setRefresh(refresh + 1)\n            message.success(addRelProdState.message);\n        }\n\n        if (addRelProdState.apiState === \"error\") {\n            message.error(addRelProdState.message);\n        }\n    }, [addRelProdState])\n\n    useEffect(() => {\n        if (listRelProdState.apiState === \"success\") {\n            let tblData = []\n            listRelProdState.list.map(item => {\n                tblData.push({\n                    key: item.id,\n                    name: item.name,\n                    action: item.id,\n                })\n            })\n            setTableData(tblData)\n        }\n    }, [listRelProdState])\n\n\n    useEffect(() => {\n        if (delRelProdState.apiState === \"success\") {\n            delRelProdReset()\n            setRefresh(refresh + 1)\n            message.success(delRelProdState.message);\n        }\n\n        if (delRelProdState.apiState === \"error\") {\n            message.error(delRelProdState.message);\n        }\n    }, [delRelProdState])\n\n\n\n    /* FUNCTIONS */\n    const handleSubmit = () => {\n        addRelProd(formData)\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    return (\n        <>\n            <Header\n                title=\"Related Products\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={product_id} active=\"related_products\" type={getProductViewState.product.type} />\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Related Product\"\n                                        name=\"related_product_id\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Select name=\"related_product_id\" placeholder=\"Select Related Product\"\n                                            showSearch\n                                            filterOption={(input, option) =>\n                                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                            }\n                                            onChange={(value) => handleSelect(\"related_product_id\", value)}\n                                        >\n                                            {getProductListState.list.map(p => (\n                                                <Select.Option key={p.id} value={p.id} >{`${p.name}`}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Button type=\"primary\" htmlType=\"submit\" >SAVE</Button>\n                            <Divider />\n                            <Table columns={columns} dataSource={tableData} size='small' pagination={false} />\n                        </Form>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    getProductListState: state.getProductList,\n    addRelProdState: state.addRelProd,\n    listRelProdState: state.listRelProd,\n    delRelProdState: state.delRelProd,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    getProductList: (params) => dispatch(getProductList(params)),\n    getProductListReset: () => dispatch(getProductListReset()),\n    addRelProd: (params) => dispatch(addRelProd(params)),\n    addRelProdReset: () => dispatch(addRelProdReset()),\n    listRelProd: (params) => dispatch(listRelProd(params)),\n    listRelProdReset: () => dispatch(listRelProdReset()),\n    delRelProd: (params) => dispatch(delRelProd(params)),\n    delRelProdReset: () => dispatch(delRelProdReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RelatedProducts)","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { saveSliderImages, saveSliderImagesReset } from \"../../action/saveSliderImagesAction\"\nimport { getSliderList, getSliderListReset } from \"../../action/getSliderListAction\"\nimport { delSlider, delSliderReset } from \"../../action/delSliderAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\n\n\n\nconst HomeSlider = props => {\n    /* variables */\n    const {\n        saveSliderImages, saveSliderImagesReset, saveSliderImagesState,\n        getSliderList, getSliderListReset, getSliderListState,\n        delSlider, delSliderReset, delSliderState,\n    } = props\n    const initial_values = {\n        banner_img: \"\",\n        m_banner_img: \"\",\n        sequence: 0,\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 100 }} />)\n        },\n        {\n            title: 'Mobile Image',\n            dataIndex: 'mobile_image',\n            key: 'mobile_image',\n            render: (mobile_image) => (<img src={`${cnf.s3_base_url}${mobile_image}`} alt=\"\" style={{ width: 100 }} />)\n        },\n        {\n            title: 'Sequence',\n            dataIndex: 'sequence',\n            key: 'sequence',\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Popconfirm\n                    title=\"Are you sure to delete this slider?\"\n                    onConfirm={() => delSlider({\n                        id: id,\n                    })}\n                    okText=\"Delete\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            )\n        }\n    ];\n    const [tableData, setTableData] = useState([])\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            saveSliderImagesReset()\n            getSliderListReset()\n            delSliderReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getSliderList()\n    }, [refresh])\n\n    useEffect(() => {\n        if (saveSliderImagesState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(saveSliderImagesState.message);\n        }\n\n        if (saveSliderImagesState.apiState === \"error\") {\n            saveSliderImagesReset()\n            setSubmitLoading(false)\n            message.error(saveSliderImagesState.message);\n        }\n    }, [saveSliderImagesState])\n\n\n    useEffect(() => {\n        if (delSliderState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            message.success(delSliderState.message);\n        }\n\n        if (delSliderState.apiState === \"error\") {\n            delSliderReset()\n            message.error(delSliderState.message);\n        }\n    }, [delSliderState])\n\n    useEffect(() => {\n        if (getSliderListState.apiState === \"success\") {\n            let ar = []\n            getSliderListState.list.map(obj => {\n                ar.push({\n                    key: obj.id,\n                    image: obj.image,\n                    mobile_image: obj.m_image,\n                    sequence: obj.sequence,\n                    id: obj.id,\n                })\n            })\n            setTableData(ar)\n        }\n    }, [getSliderListState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let bannerImageValRes = validateImageFile(banner_img)\n        let mBannerImageValRes = validateImageFile(m_banner_img)\n\n\n        if (!bannerImageValRes.status) {\n            alert(\"Banner Image's extension is not allowed.\")\n            return\n        }\n        if (!mBannerImageValRes.status) {\n            alert(\"Mobile Banner Image's extension is not allowed.\")\n            return\n        }\n\n        setSubmitLoading(true)\n\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n        await axios.put(s3UrlRes2.url, banner_img)\n\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n        await axios.put(s3UrlRes3.url, m_banner_img)\n\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n\n        saveSliderImages(formData)\n    }\n\n\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Home Page Sliders\"\n            />\n            <PageContainer>\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Banner Image\"\n                                name=\"banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Banner Image For Mobile\"\n                                name=\"m_banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"4\">\n                            <Form.Item\n                                label=\"Sequence\"\n                                name=\"sequence\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, [\"sequence\"]: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n\n                <Divider />\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    saveSliderImagesState: state.saveSliderImages,\n    getSliderListState: state.getSliderList,\n    delSliderState: state.delSlider,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    saveSliderImages: (params) => dispatch(saveSliderImages(params)),\n    saveSliderImagesReset: () => dispatch(saveSliderImagesReset()),\n    getSliderList: (params) => dispatch(getSliderList(params)),\n    getSliderListReset: () => dispatch(getSliderListReset()),\n    delSlider: (params) => dispatch(delSlider(params)),\n    delSliderReset: () => dispatch(delSliderReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { saveTestimonial, saveTestimonialReset } from \"../../action/saveTestimonialAction\"\nimport { getTestimonialList, getTestimonialListReset } from \"../../action/getTestimonialListAction\"\nimport { delTestimonial, delTestimonialReset } from \"../../action/delTestimonialAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst Testimonial = props => {\n    /* variables */\n    const {\n        saveTestimonial, saveTestimonialReset, saveTestimonialState,\n        getTestimonialList, getTestimonialListReset, getTestimonialListState,\n        delTestimonial, delTestimonialReset, delTestimonialState,\n    } = props\n    const initial_values = {\n        description: \"\",\n        image: \"\",\n        name: \"\",\n        title: \"\",\n        sequence: 1,\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [image, set_image] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            key: 'title',\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Popconfirm\n                    title=\"Are you sure to delete this testimonial?\"\n                    onConfirm={() => delTestimonial({\n                        id: id,\n                    })}\n                    okText=\"Delete\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            )\n        }\n    ];\n    const [tableData, setTableData] = useState([])\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            saveTestimonialReset()\n            getTestimonialListReset()\n            delTestimonialReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getTestimonialList()\n    }, [refresh])\n\n    useEffect(() => {\n        if (saveTestimonialState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(saveTestimonialState.message);\n        }\n\n        if (saveTestimonialState.apiState === \"error\") {\n            saveTestimonialReset()\n            setSubmitLoading(false)\n            message.error(saveTestimonialState.message);\n        }\n    }, [saveTestimonialState])\n\n\n    useEffect(() => {\n        if (delTestimonialState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            message.success(delTestimonialState.message);\n        }\n\n        if (delTestimonialState.apiState === \"error\") {\n            delTestimonialReset()\n            message.error(delTestimonialState.message);\n        }\n    }, [delTestimonialState])\n\n    useEffect(() => {\n        if (getTestimonialListState.apiState === \"success\") {\n            let ar = []\n            getTestimonialListState.list.map(obj => {\n                ar.push({\n                    key: obj.id,\n                    description: obj.description,\n                    image: obj.image,\n                    name: obj.name,\n                    title: obj.title,\n                    id: obj.id,\n                })\n            })\n            setTableData(ar)\n        }\n    }, [getTestimonialListState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        let image_filename\n        let imageValRes\n        if (image) {\n            image_filename = uuidv4()\n            imageValRes = validateImageFile(image)\n            if (!imageValRes.status) {\n                alert(\"Image's extension is not allowed.\")\n                return\n            }\n        }\n\n\n        setSubmitLoading(true)\n\n        if (image) {\n            let s3UrlRes = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n            await axios.put(s3UrlRes.url, image)\n\n            formData.image = `${image_filename}.${imageValRes.ext}`\n        }\n\n        saveTestimonial(formData)\n    }\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Home Page Testimonials\"\n            />\n            <PageContainer>\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Description\"\n                                name=\"description\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\n                                    onChange={e => setFormData({ ...formData, ['description']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Image\"\n                                name=\"image\"\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"image\"\n                                    onChange={e => set_image(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Name\"\n                                    onChange={e => setFormData({ ...formData, ['name']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Title\"\n                                name=\"title\"\n                            >\n                                <Input name=\"title\" placeholder=\"Enter Title\"\n                                    onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"4\">\n                            <Form.Item\n                                label=\"Sequence\"\n                                name=\"sequence\"\n                            >\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, ['sequence']: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n\n                <Divider />\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    saveTestimonialState: state.saveTestimonial,\n    getTestimonialListState: state.getTestimonialList,\n    delTestimonialState: state.delTestimonial,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    saveTestimonial: (params) => dispatch(saveTestimonial(params)),\n    saveTestimonialReset: () => dispatch(saveTestimonialReset()),\n    getTestimonialList: (params) => dispatch(getTestimonialList(params)),\n    getTestimonialListReset: () => dispatch(getTestimonialListReset()),\n    delTestimonial: (params) => dispatch(delTestimonial(params)),\n    delTestimonialReset: () => dispatch(delTestimonialReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Testimonial)","import React from \"react\"\n\nconst NotFound = props => {\n    return (\n        <h1>NotFound</h1>\n    )\n}\n\nexport default NotFound","import React, { useState, useEffect } from \"react\"\nimport { Button, Form, Input } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport { LoginContainer } from \"../../component/Xcomponent\"\n\n/* actions */\nimport { login, loginReset } from \"../../action/loginAction\"\n\nconst Login = props => {\n    /* variables */\n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\"\n    })\n    const { login, loginReset, loginState } = props\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => loginReset())\n    }, [])\n\n    useEffect(() => {\n        if (loginState.apiState === \"success\") {\n            localStorage.setItem(\"PikyUserToken\", loginState.data.token)\n            localStorage.setItem(\"PikyUser\", JSON.stringify(loginState.data.user))\n            setRedirect([true, '/'])\n        }\n    }, [loginState])\n\n    /* function */\n    const handleSubmit = () => {\n        login(formData)\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n\n            <LoginContainer>\n                <div style={{ padding: 16, border: \"solid 1px #ccc\", background: \"#fff\", borderRadius: '10px', minWidth: 350 }} >\n                    <Form layout=\"vertical\" onFinish={handleSubmit}>\n                        <Form.Item\n                            label=\"Email\"\n                            name=\"email\"\n                            rules={[{ required: true, message: 'Required' }]}\n                        >\n                            <Input name=\"email\" placeholder=\"Email\" onChange={(e) => setFormData({ ...formData, ['email']: e.target.value })} />\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[{ required: true, message: 'Required' }]}\n                        >\n                            <Input.Password name=\"password\" placeholder=\"Password\" onChange={(e) => setFormData({ ...formData, ['password']: e.target.value })} />\n                        </Form.Item>\n                        <Button htmlType=\"submit\" type=\"primary\" block >LOGIN</Button>\n                    </Form>\n                </div>\n            </LoginContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({ loginState: state.login })\n\nconst mapDispatchToProps = (dispatch) => ({\n    login: (params) => dispatch(login(params)),\n    loginReset: () => dispatch(loginReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { notification } from 'antd'\n\n\nconst Logout = props => {\n\n    useEffect(() => {\n        localStorage.removeItem('PikyUserToken')\n        localStorage.removeItem('PikyUser')\n        notification.success({\n            message: \"You are logged out successfully.\",\n            placement: \"bottomRight\"\n        })\n    }, [])\n\n\n    return (\n        <Redirect to=\"/login\" />\n    )\n}\n\n\nexport default Logout\n\n","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { updateSetting, updateSettingReset } from \"../../action/updateSettingAction\"\nimport { getSetting, getSettingReset } from \"../../action/getSettingAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\nimport _ from \"lodash\"\n\n\n\nconst HomeSlider = props => {\n    /* variables */\n    const {\n        updateSetting, updateSettingReset, updateSettingState,\n        getSetting, getSettingReset, getSettingState,\n    } = props\n    const initial_values = {\n        international_price: 0,\n        admin_email: \"\",\n        offer_strip:\"\",\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            getSettingReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getSetting();\n    }, [refresh])\n\n    useEffect(() => {\n        if (getSettingState.apiState === \"success\") {\n            let data = getSettingState.list;\n            let IP = _.find(data, ['meta_key', \"international_price\"]);\n            let AE = _.find(data, ['meta_key', \"admin_email\"]);\n            let OS = _.find(data, ['meta_key', \"offer_strip\"]);\n\n            form.setFieldsValue({\n                international_price: IP.meta_value,\n                admin_email: AE.meta_value,\n                offer_strip: OS.meta_value,\n            })\n            setFormData({\n                ...formData,\n                ['international_price']: IP.meta_value,\n                ['admin_email']: AE.meta_value,\n                ['offer_strip']: OS.meta_value,\n            })\n        }\n    }, [getSettingState])\n\n    useEffect(() => {\n        if (updateSettingState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(updateSettingState.message);\n        }\n\n        if (updateSettingState.apiState === \"error\") {\n            updateSettingReset()\n            setSubmitLoading(false)\n            message.error(updateSettingState.message);\n        }\n    }, [updateSettingState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        setSubmitLoading(true)\n        updateSetting(formData)\n    }\n\n    const handleChange = e => { \n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Setting Configuration\"\n            />\n            <PageContainer>\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n\n                        <Col span=\"4\">\n                        <Form.Item\n                                label=\"INR for 1 USD\"\n                                name=\"international_price\"\n                                rules={[{ required: true, message: 'Required',pattern: new RegExp(/^[0-9]+$/) }]}\n                            >\n                                <Input name=\"international_price\" placeholder=\"Enter INR for 1 USD\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={handleChange}\n                                />\n                            </Form.Item> \n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Admin Email\"\n                                name=\"admin_email\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"admin_email\" placeholder=\"Enter admin email id\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Offer Strip \"\n                                name=\"offer_strip\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"offer_strip\" placeholder=\"Enter offer strip for admin\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    updateSettingState: state.updateSetting,\n    getSettingState: state.getSetting,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateSetting: (params) => dispatch(updateSetting(params)),\n    updateSettingReset: () => dispatch(updateSettingReset()),\n    getSetting: (params) => dispatch(getSetting(params)),\n    getSettingReset: (params) => dispatch(getSettingReset(params)),\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { updateShipping, updateShippingReset } from \"../../action/updateShippingAction\"\nimport { getSetting, getSettingReset } from \"../../action/getSettingAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\nimport _ from \"lodash\"\n\n\n\nconst HomeSlider = props => {\n    /* variables */\n    const {\n        updateShipping, updateShippingReset, updateShippingState,\n        getSetting, getSettingReset, getSettingState,\n    } = props\n    const initial_values = {\n        minimun_cart_value: 0,\n        shipping_price: 0,\n        international_shipping: 0,\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            getSettingReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getSetting();\n    }, [refresh])\n\n    useEffect(() => {\n        if (getSettingState.apiState === \"success\") {\n            let data = getSettingState.list;\n            let SP = _.find(data, ['meta_key', \"shipping_charge\"]);\n            let MCV = _.find(data, ['meta_key', \"minimun_cart_value\"]);\n            let ISP = _.find(data, ['meta_key', \"international_shipping\"]);\n\n            form.setFieldsValue({\n                minimun_cart_value: MCV.meta_value,\n                shipping_price: SP.meta_value,\n                international_shipping: ISP.meta_value,\n            })\n            setFormData({\n                ...formData,\n                ['minimun_cart_value']: MCV.meta_value,\n                ['shipping_price']: SP.meta_value,\n                ['international_shipping']: ISP.meta_value,\n            })\n        }\n    }, [getSettingState])\n\n    useEffect(() => {\n        if (updateShippingState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(updateShippingState.message);\n        }\n\n        if (updateShippingState.apiState === \"error\") {\n            updateShippingReset()\n            setSubmitLoading(false)\n            message.error(updateShippingState.message);\n        }\n    }, [updateShippingState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        setSubmitLoading(true)\n        updateShipping(formData)\n    }\n\n\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Shipping Charge Configuration\"\n            />\n            <PageContainer>\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Minimun Cart Value\"\n                                name=\"minimun_cart_value\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"minimun_cart_value\" placeholder=\"Enter minimun cart value\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, [\"minimun_cart_value\"]: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Shipping Price\"\n                                name=\"shipping_price\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"shipping_price\" placeholder=\"Enter shipping price\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, [\"shipping_price\"]: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"International Shipping Price\"\n                                name=\"international_shipping\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"international_shipping\" placeholder=\"Enter international shipping price\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, [\"international_shipping\"]: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    updateShippingState: state.updateShipping,\n    getSettingState: state.getSetting,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateShipping: (params) => dispatch(updateShipping(params)),\n    updateShippingReset: () => dispatch(updateShippingReset()),\n    getSetting: (params) => dispatch(getSetting(params)),\n    getSettingReset: (params) => dispatch(getSettingReset(params)),\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import styled, { css } from 'styled-components'\n\nexport const Indicator = styled.div`\n    height: 10px;\n    width: 10px;\n    border-radius: 5px;\n    background-color: grey;\n\n    ${props => props.green && css`\n        background-color: #03c503;\n    `}\n\n    ${props => props.red && css`\n        background-color: red;\n    `}\n`","import React, { useEffect, useState } from \"react\"\nimport { Button, Table, Space, Badge } from \"antd\"\nimport { Link } from 'react-router-dom'\nimport { connect } from \"react-redux\"\nimport { EditOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport { Indicator } from \"./VoucherListStyle\"\n\n/* actions */\nimport { getVoucherList, getVoucherListReset } from \"../../action/getVoucherListAction\"\n\n\nconst VoucherList = props => {\n    /* variables */\n    const { getVoucherList, getVoucherListReset, getVoucherListState } = props\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Code',\n            dataIndex: 'code',\n            key: 'code',\n            render: code => <span>{code}</span>\n        },\n        {\n            title: 'Discount',\n            dataIndex: 'discountData',\n            key: 'discountData',\n            render: (obj) => (\n                <Space>\n                    {obj.type === \"percentage\" ?\n                        <span>{obj.discount}%</span>\n                        : <span>₹{obj.discount}</span>\n                    }\n\n                </Space>\n            )\n        },\n        {\n            title: 'Valid From',\n            dataIndex: 'valid_from',\n            key: 'valid_from',\n            render: (valid_from) => {\n                var date = new Date(valid_from);\n                var month = date.getMonth() +1;//months (0-11)\n                var day = date.getDate();//day (1-31)\n                var year = date.getFullYear();\n\n                var formattedDate = month + \"/\" + day + \"/\" + year;\n                return (\n                    <span>{formattedDate}</span>\n                )\n            }\n        },\n        {\n            title: 'Valid To',\n            dataIndex: 'valid_to',\n            key: 'valid_to',\n            render: (valid_to) => {\n                var date = new Date(valid_to);\n                var month = date.getMonth() +1 + 1;\n                var day = date.getDate();\n                var year = date.getFullYear();\n                var formattedDate = month + \"/\" + day + \"/\" + year;\n                return (\n                    <span>{formattedDate}</span>\n                )\n            }\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n            render: (status) => status === \"active\" ? <Indicator green /> : <Indicator red />\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Link to={`/voucher_management/${id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n            )\n        },\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getVoucherList()\n    }, [])\n\n    useEffect(() => {\n        if (getVoucherListState.apiState === \"success\") {\n            let tableData = []\n            getVoucherListState.list.map(row => {\n                tableData.push({\n                    key: row.id,\n                    name: row.name,\n                    code: row.code,\n                    valid_from: row.valid_from,\n                    valid_to: row.valid_to,\n                    discountData: { type: row.type, discount: row.discount },\n                    status: row.status,\n                    id: row.id,\n                })\n            })\n            setTableData(tableData)\n        }\n    }, [getVoucherListState])\n\n\n    return (\n        <>\n            <Header\n                title=\"Voucher List\"\n                actionBtn={<Link to='/voucher_management/add'><Button >New</Button></Link>}\n            />\n            <PageContainer list >\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getVoucherListState: state.getVoucherList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getVoucherList: (params) => dispatch(getVoucherList(params)),\n    getVoucherListReset: () => dispatch(getVoucherListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherList)","import React, { useState, useEffect } from \"react\"\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, DatePicker, Space } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* actions */\nimport { createVoucher, createVoucherReset } from \"../../action/createVoucherAction\"\nconst { RangePicker } = DatePicker;\nconst VoucherAdd = props => {\n    /* variables */\n    const {\n        createVoucher, createVoucherReset, createVoucherState\n    } = props\n    const [formData, setFormData] = useState({\n        type: \"percentage\",\n        status: \"active\",\n        name: \"\",\n        code: \"\",\n        description: \"\",\n        no_of_usage_for_all: \"\",\n        discount: \"\",\n        minimum_cart_value: \"\",\n        maximum_discount_amount: \"\",\n        valid_from: \"\",\n        valid_to: \"\",\n\n    })\n    const [form] = Form.useForm()\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => createVoucherReset())\n    }, [])\n\n    useEffect(() => {\n        form.setFieldsValue({\n            status: \"active\",\n            type: \"percentage\"\n        })\n    }, [])\n\n    useEffect(() => {\n        if (createVoucherState.apiState === \"success\") {\n            setRedirect([true, '/voucher_management/list'])\n            message.success(createVoucherState.message);\n        }\n\n        if (createVoucherState.apiState === \"error\") {\n            createVoucherReset()\n            message.error(createVoucherState.message);\n        }\n    }, [createVoucherState])\n\n    /* functions */\n    const handleChange = e => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const handleNumberChange = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n    const handleDatePickerChange = (date, dateString) => {\n        setFormData(({\n            ...formData,\n            [\"valid_from\"]: dateString[0],\n            [\"valid_to\"]: dateString[1]\n        }))\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSubmit = () => {\n        createVoucher(formData)\n    }\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Add Voucher\"\n            />\n            <PageContainer>\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Coupon Name\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Code\"\n                                name=\"code\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"code\" placeholder=\"Enter Coupon Code\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"24\">\n                            <Form.Item\n                                label=\"Description\"\n                                name=\"description\"\n                            >\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"No of usage for all\"\n                                name=\"no_of_usage_for_all\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"no_of_usage_for_all\" placeholder=\"No of usage for all\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        {/* <Col span=\"6\">\n                            <Form.Item\n                                label=\"No of usage for a customer\"\n                                name=\"no_of_usage_for_a_customer\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"no_of_usage_for_a_customer\" placeholder=\"No of usage for a customer\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col> */}\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Validity\"\n                                name=\"validity\"\n                                rules={[\n                                    { required: true, message: 'Required' },\n                                ]}\n                            >\n                                <RangePicker showTime format=\"DD-MM-YYYY HH:mm:ss\" onChange={handleDatePickerChange} />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\">\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Type\"\n                                name=\"type\"\n                            >\n                                <Select name=\"type\" placeholder=\"Select Type\" defaultValue=\"percentage\"\n                                    onSelect={v => handleNumberChange(\"type\", v)}\n                                >\n                                    <Select.Option key=\"percentage\" value=\"percentage\">Percentage</Select.Option>\n                                    <Select.Option key=\"flat\" value=\"flat\">Flat</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Discount\"\n                                name=\"discount\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"discount\" placeholder=\"Enter discount\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"discount\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Minimum cart value\"\n                                name=\"minimum_cart_value\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"minimum_cart_value\" placeholder=\"Enter minimum cart value\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"minimum_cart_value\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Maximum discount amount\"\n                                name=\"maximum_discount_amount\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"maximum_discount_amount\" placeholder=\"Enter maximum discount amount\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"maximum_discount_amount\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Status\"\n                                name=\"status\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Select name=\"status\" placeholder=\"Select Status\"\n                                    onSelect={v => handleNumberChange(\"status\", v)}\n                                >\n                                    <Select.Option key=\"active\" value=\"active\" >Active</Select.Option>\n                                    <Select.Option key=\"inactive\" value=\"inactive\">Inactive</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createVoucherState.apiState === \"loading\"} >SUBMIT</Button>\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    createVoucherState: state.createVoucher,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    createVoucher: (params) => dispatch(createVoucher(params)),\n    createVoucherReset: () => dispatch(createVoucherReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherAdd)","import React, { useState, useEffect } from \"react\"\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, DatePicker, Space } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport moment from 'moment'\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* actions */\nimport { updateVoucher, updateVoucherReset } from \"../../action/updateVoucherAction\"\nimport { getVoucherView, getVoucherViewReset } from \"../../action/getVoucherViewAction\"\nconst { RangePicker } = DatePicker;\nconst VoucherEdit = props => {\n    /* variables */\n    const voucher_id = props.match.params.voucher_id\n    const {\n        updateVoucher, updateVoucherReset, updateVoucherState,\n        getVoucherView, getVoucherViewReset, getVoucherViewState,\n    } = props\n    const [formData, setFormData] = useState({\n        voucher_id: voucher_id,\n        type: \"percentage\",\n        status: \"active\",\n        name: \"\",\n        code: \"\",\n        description: \"\",\n        no_of_usage_for_all: \"\",\n        discount: \"\",\n        minimum_cart_value: \"\",\n        maximum_discount_amount: \"\",\n        valid_from: \"\",\n        valid_to: \"\",\n\n    })\n    const [form] = Form.useForm()\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getVoucherViewReset()\n            updateVoucherReset()\n        })\n    }, [])\n    useEffect(() => {\n        getVoucherView({\n            voucher_id: voucher_id\n        })\n    }, [])\n    useEffect(() => {\n        if (getVoucherViewState.apiState === \"success\") {\n            form.setFieldsValue({\n                type: getVoucherViewState.coupon.type,\n                status: getVoucherViewState.coupon.status,\n                name: getVoucherViewState.coupon.name,\n                code: getVoucherViewState.coupon.code,\n                description: getVoucherViewState.coupon.description,\n                no_of_usage_for_all: getVoucherViewState.coupon.no_of_usage_for_all,\n                discount: getVoucherViewState.coupon.discount,\n                minimum_cart_value: getVoucherViewState.coupon.minimum_cart_value,\n                maximum_discount_amount: getVoucherViewState.coupon.maximum_discount_amount,\n                validity: [moment(moment(getVoucherViewState.coupon.valid_from).format(\"YYYY-MM-DD HH:mm:ss\"), 'YYYY-MM-DD HH:mm:ss'), moment(moment(getVoucherViewState.coupon.valid_to).format(\"YYYY-MM-DD HH:mm:ss\"), 'YYYY-MM-DD HH:mm:ss')],\n            })\n            setFormData({\n                ...formData,\n                ['type']: getVoucherViewState.coupon.type,\n                ['status']: getVoucherViewState.coupon.status,\n                ['name']: getVoucherViewState.coupon.name,\n                ['code']: getVoucherViewState.coupon.code,\n                ['description']: getVoucherViewState.coupon.description,\n                ['no_of_usage_for_all']: getVoucherViewState.coupon.no_of_usage_for_all,\n                ['discount']: getVoucherViewState.coupon.discount,\n                ['minimum_cart_value']: getVoucherViewState.coupon.minimum_cart_value,\n                ['maximum_discount_amount']: getVoucherViewState.coupon.maximum_discount_amount,\n                [\"valid_from\"]: moment(getVoucherViewState.coupon.valid_from).format(\"DD-MM-YYYY HH:mm:ss\"),\n                [\"valid_to\"]: moment(getVoucherViewState.coupon.valid_to).format(\"DD-MM-YYYY HH:mm:ss\"),\n            })\n        }\n    }, [getVoucherViewState])\n\n    useEffect(() => {\n        form.setFieldsValue({\n            status: \"active\",\n            type: \"percentage\"\n        })\n    }, [])\n\n    useEffect(() => {\n        if (updateVoucherState.apiState === \"success\") {\n            setRedirect([true, '/voucher_management/list'])\n            message.success(updateVoucherState.message);\n        }\n\n        if (updateVoucherState.apiState === \"error\") {\n            updateVoucherReset()\n            message.error(updateVoucherState.message);\n        }\n    }, [updateVoucherState])\n\n    /* functions */\n    const handleChange = e => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const handleNumberChange = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n    const handleDatePickerChange = (date, dateString) => {\n        setFormData(({\n            ...formData,\n            [\"valid_from\"]: dateString[0],\n            [\"valid_to\"]: dateString[1]\n        }))\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    const handleSubmit = () => {\n        updateVoucher(formData)\n    }\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Add Voucher\"\n            />\n            <PageContainer>\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Coupon Name\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Code\"\n                                name=\"code\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"code\" placeholder=\"Enter Coupon Code\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"24\">\n                            <Form.Item\n                                label=\"Description\"\n                                name=\"description\"\n                            >\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"No of usage for all\"\n                                name=\"no_of_usage_for_all\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"no_of_usage_for_all\" placeholder=\"No of usage for all\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col>\n                        {/* <Col span=\"6\">\n                            <Form.Item\n                                label=\"No of usage for a customer\"\n                                name=\"no_of_usage_for_a_customer\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"no_of_usage_for_a_customer\" placeholder=\"No of usage for a customer\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Item>\n                        </Col> */}\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Validity\"\n                                name=\"validity\"\n                                rules={[\n                                    { required: true, message: 'Required' },\n                                ]}\n                            >\n                                <RangePicker showTime format=\"DD-MM-YYYY HH:mm:ss\" onChange={handleDatePickerChange} />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\">\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Type\"\n                                name=\"type\"\n                            >\n                                <Select name=\"type\" placeholder=\"Select Type\" defaultValue=\"percentage\"\n                                    onSelect={v => handleNumberChange(\"type\", v)}\n                                >\n                                    <Select.Option key=\"percentage\" value=\"percentage\">Percentage</Select.Option>\n                                    <Select.Option key=\"flat\" value=\"flat\">Flat</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Discount\"\n                                name=\"discount\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"discount\" placeholder=\"Enter discount\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"discount\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter=\"24\" >\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Minimum cart value\"\n                                name=\"minimum_cart_value\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"minimum_cart_value\" placeholder=\"Enter minimum cart value\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"minimum_cart_value\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Maximum discount amount\"\n                                name=\"maximum_discount_amount\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"maximum_discount_amount\" placeholder=\"Enter maximum discount amount\" style={{ width: \"100%\" }} min={0}\n                                    onChange={v => handleNumberChange(\"maximum_discount_amount\", v)}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"6\">\n                            <Form.Item\n                                label=\"Status\"\n                                name=\"status\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Select name=\"status\" placeholder=\"Select Status\"\n                                    onSelect={v => handleNumberChange(\"status\", v)}\n                                >\n                                    <Select.Option key=\"active\" value=\"active\" >Active</Select.Option>\n                                    <Select.Option key=\"inactive\" value=\"inactive\">Inactive</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" loading={updateVoucherState.apiState === \"loading\"} >SUBMIT</Button>\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    updateVoucherState: state.updateVoucher,\n    getVoucherViewState: state.getVoucherView,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateVoucher: (params) => dispatch(updateVoucher(params)),\n    updateVoucherReset: () => dispatch(updateVoucherReset()),\n    getVoucherView: (params) => dispatch(getVoucherView(params)),\n    getVoucherViewReset: () => dispatch(getVoucherViewReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherEdit)","import React, { useEffect, useState } from \"react\"\nimport { Button, Table, Space, Tag } from \"antd\"\nimport { Link } from 'react-router-dom'\nimport { connect } from \"react-redux\"\nimport { CopyOutlined, EditOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport { Indicator } from \"./OrderListStyle\"\n\n/* actions */\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n\n\nconst OrderList = props => {\n    /* variables */\n    const { getOrderList, getOrderListReset, getOrderListState } = props\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Customer Name',\n            dataIndex: 'customer_name',\n            key: 'customer_name',\n        },\n        // {\n        //     title: 'Email',\n        //     dataIndex: 's_email',\n        //     key: 's_email',\n        //     render: s_email => <span>{s_email}</span>\n        // },\n        {\n            title: 'Phone',\n            dataIndex: 's_phone',\n            key: 's_phone',\n            render: s_phone => <span>{s_phone}</span>\n        },\n        {\n            title: 'Order No',\n            dataIndex: 'order_no',\n            key: 'order_no',\n            render: order_no => <span>{order_no}</span>\n        },\n        {\n            title: 'Order Date',\n            dataIndex: 'order_date',\n            key: 'order_date',\n            render: (order_date) => {\n                var date = new Date(order_date);\n                var month = date.getMonth() +1;//months (0-11)\n                var day = date.getDate();//day (1-31)\n                var year = date.getFullYear();\n\n                var formattedDate = month + \"/\" + day + \"/\" + year;\n                return (\n                    <span>{formattedDate}</span>\n                )\n            }\n        },\n        {\n            title: 'Total Amount',\n            dataIndex: 'total',\n            key: 'total',\n            render: (obj) => <span>{obj.payment_type == \"USD\" ? <>$</> : <>₹</>}{obj.total}</span>\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n            render: status => {\n                if (status == \"processing\")\n                    return (<Tag color=\"#e39f19\">{status.toUpperCase()}</Tag>)\n\n                if (status == \"shipped\")\n                    return (<Tag color=\"#1973e3\">{status.toUpperCase()}</Tag>)\n\n                if (status == \"delivered\")\n                    return (<Tag color=\"#87d068\">{status.toUpperCase()}</Tag>)\n\n                if (status == \"cancelled\")\n                    return (<Tag color=\"#d93a3a\">{status.toUpperCase()}</Tag>)\n            }\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <>\n                    <Link to={`/order/${id}/details`}><Button size=\"small\" icon={<CopyOutlined />} /></Link> &nbsp;\n                    <Link to={`/order/${id}/update`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n\n                </>\n            )\n        },\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getOrderList()\n    }, [])\n\n    useEffect(() => {\n        if (getOrderListState.apiState === \"success\") {\n            let tableData = []\n            getOrderListState.list.map(row => {\n                tableData.push({\n                    key: row.id,\n                    customer_name: row.s_fname + ' ' + row.s_lname,\n                    s_email: row.s_email,\n                    s_phone: row.s_phone,\n                    order_no: row.order_no,\n                    order_date: row.order_date,\n                    total: { \"total\": row.total, \"payment_type\": row.payment_type, },\n                    status: row.status,\n                    id: row.id,\n                })\n            })\n            setTableData(tableData)\n        }\n    }, [getOrderListState])\n\n\n    return (\n        <>\n            <Header\n                title=\"Order List\"\n            />\n            <PageContainer list >\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getOrderListState: state.getOrderList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList: (params) => dispatch(getOrderList(params)),\n    getOrderListReset: () => dispatch(getOrderListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","import styled, { css } from 'styled-components'\n\nexport const Indicator = styled.div`\n    height: 10px;\n    width: 10px;\n    border-radius: 5px;\n    background-color: grey;\n\n    ${props => props.green && css`\n        background-color: #03c503;\n    `}\n\n    ${props => props.red && css`\n        background-color: red;\n    `}\n`","import React from \"react\";\n\nconst Mount = ({ children, condition }) => {\n  \n  const errorMessage = (message) => console.error(message);\n\n  try {\n\n    if (condition === undefined) throw new Error(\"Condition argument is required\")\n\n    if (typeof condition !== 'boolean') throw new Error(\"The condition argument should true|false\")\n\n    if(condition === true) return <React.Fragment>{children}</React.Fragment>\n\n  } catch (error) { errorMessage(error.message) }\n\n  return <React.Fragment></React.Fragment>;\n};\n\nexport default Mount","import cnf from '../config'\nimport axios from 'axios'\n\nexport const updateStatus = async (params) => {\n\n    return await axios({\n        method  : 'post',\n        url     : `${cnf.api.base_url}customer/update-status`,\n        data    : params,\n        headers : {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n}\n\nexport default updateStatus","import cnf from '../config'\nimport axios from 'axios'\n\nexport const sendEmail = async (params) => {\n\n    return await axios({\n        method  : 'post',\n        url     : `${cnf.api.base_url}customer/send-email`,\n        data    : params,\n        headers : {\n            \"Content-type\": \"application/json; charset=UTF-8\",\n        }\n    })\n}\n\nexport default sendEmail","import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n    import { Button, Modal,notification   } from 'antd'\n    import { ExclamationCircleOutlined } from '@ant-design/icons';\n \n    import Header from \"../../component/Header/Header\"\n    import { PageContainer } from \"../../component/Xcomponent\"\n    import Mount from '../../modules/Mount'\n\n    import updateStatus from \"../../api/updateCustomerStatus\";\n    import sendEmail    from \"../../api/sendCustomerEmail\"\n\n// @actions-imports ----------------------------------------------------------------------------------\n\n    import { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n    import { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\n \n//-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n\n  console.clear(); console.log(props)\n   \n    const { getCustomerList, getCustomerListState } = props\n    const [tableData, setTableData] = useState([])\n    const [selectedRows,setSelectedRows] = useState([])\n    const [clearSelectedRows,updateClearSelectedRows] = useState(false)\n\n    const openNotificationWithIcon = (type,message,description = \"\") => {\n        notification[type]({\n          message     : message,\n          description : description,\n        });\n    };\n  \n    const showStatusChangeModal = (data) => {\n\n        if(data.status === 'Active') {\n\n            data.status  = 'Deactivate'\n            data.message = `Do you really want to deactivate ${data.name} ?`\n        }\n\n        else { \n            data.status  = 'Active'\n            data.message = `Do you really want to activate ${data.name} ?`\n        }\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: data.message,\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { updateCustomerStatus(data) /* call update-status api */ },\n        });\n    };\n\n    const showEmailConfirmationModal = () => {\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: 'Do you really want to send email ?',\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { sendCustomerEmail(selectedRows) },\n        });\n    };\n\n    const [columns,setColumns] = useState([{\n            name: 'Customer Name',\n            cell: data => String(data.name),\n            sortable: true,\n        },{\n            name: 'Customer Email',\n            cell: data => String(data.email),\n            sortable: true,\n        },{\n            name: 'Customer Contact No.',\n            cell: data => String(data.contact_no),\n            sortable: true,\n        },{\n            name: 'Customer Status',\n            cell: data => String(data.status),\n            sortable: true,\n        },{\n            name: 'Register Date',\n            cell: data => String(data.date),\n            sortable: true,\n        },{\n            name: 'Action',\n            cell: data => <Button className={ data.status === 'Active' ? 'deactivate' : 'active' } onClick={() => showStatusChangeModal(data)}>{ data.status === 'Active' ? 'Deactivate' : 'Activate' }</Button>,\n            sortable: true,\n            export:false,\n        }\n    ])\n\n/* @api-call -------------------------------------------------------------------------------------------------*/ \n\n    const sendCustomerEmail = async(data) => {\n\n        try {\n\n            const serverResponse = await sendEmail(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Send Email','Email send successfully');\n\n            updateClearSelectedRows(true) /* clear selected rows */\n\n            setSelectedRows([]) /* clear selected rows */\n\n        } catch (error) { openNotificationWithIcon('error','Send Email','Sorry email could not send to customer') }\n    }\n\n    const updateCustomerStatus = async(data) => {\n\n        try {\n\n            const serverResponse = await updateStatus(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Customer status','Customer status updated successfully');\n\n            getCustomerList() /* refresh customers list */\n            \n        } catch (error) { openNotificationWithIcon('error','Customer status','Customer status could not update') }\n    }\n\n/* callbacks -------------------------------------------------------------------------------------------------*/\n\n    useEffect(() => { getCustomerList()}, [])\n    useEffect(() => {\n        \n        if (getCustomerListState.apiState === \"success\") {\n\n            const customerList = getCustomerListState.list.map(data => {\n\n                const serverDate = date => date.toISOString().slice(0, 10);\n\n                data.created_at = serverDate(new Date(data.created_at))\n       \n                return  {\n                    id     : data.id,\n                    name   : data.name,\n                    email  : data.email,\n                    date   : data.created_at,\n                    status : data.status,\n                    contact_no: data.contact_no,\n                }\n            })\n\n            setTableData(customerList);\n        }\n    }, [getCustomerListState])\n\n/* ----------------------------------------------------------------------------------------------------------*/\n\n    return (\n        <React.Fragment>\n            <Header title=\"Customer List\"/>\n            <PageContainer>\n                <Mount condition={selectedRows.length > 0 }>\n                    <div className=\"email-container\">\n                        <Button className=\"active\" onClick={showEmailConfirmationModal}>Send Email</Button>\n                    </div>\n                </Mount>     \n             \n                <DataTableExtensions print={false} exportHeaders={true} columns={columns} data={tableData} >\n                    <DataTable\n                        noHeader\n                        defaultSortField=\"id\"\n                        defaultSortAsc={false}\n                        pagination\n                        highlightOnHover\n                        exportHeaders={true}\n                        selectableRows={true}\n                        onSelectedRowsChange={(data) => { updateClearSelectedRows(false); setSelectedRows(data.selectedRows) }}\n                        clearSelectedRows={clearSelectedRows}\n                    />\n                </DataTableExtensions>\n            </PageContainer>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = (state) => ({\n    getOrderListState    : state.getOrderList,\n    getCustomerListState : state.getCustomerList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList:         (params) => dispatch(getOrderList(params)),\n    getOrderListReset:    ()       => dispatch(getOrderListReset()),\n    getCustomerList:      (params) => dispatch(getCustomerList(params)),\n    getCustomerListReset: ()       => dispatch(getCustomerListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)","import React, { useEffect, useState } from \"react\"\nimport { Button, Table, Space, Badge } from \"antd\"\nimport { connect } from \"react-redux\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport cnf from \"../../config\"\n/* actions */\nimport { getOrderDetails, getOrderDetailsReset } from \"../../action/getOrderDetailsAction\"\n\n\nconst OrderList = props => {\n    /* variables */\n    const order_id = props.match.params.order_id\n    const { getOrderDetails, getOrderDetailsReset, getOrderDetailsState } = props\n    const [orderData, setOrderData] = useState([])\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\n        },\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            render: (product_name) => (<span>{product_name}</span>)\n        },\n        {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n            render: (quantity) => (<span>{quantity}</span>)\n        },\n        {\n            title: 'Buy Price',\n            dataIndex: 'price',\n            key: 'price',\n            render: (price) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{price}</span>)\n        },\n        {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{total}</span>)\n        }\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getOrderDetails({ order_id: order_id })\n    }, [])\n\n    useEffect(() => {\n        if (getOrderDetailsState.apiState === \"success\") {\n            setOrderData(getOrderDetailsState.order)\n            let ar = []\n            getOrderDetailsState.order.items.map(obj => {\n                ar.push({\n                    key: obj.product_id,\n                    product_name: obj.product_name,\n                    image: obj.thumbnail,\n                    quantity: obj.quantity,\n                    price: obj.price,\n                    total: obj.total,\n                    id: obj.product_id,\n                })\n            })\n            setTableData(ar)\n        }\n    }, [getOrderDetailsState])\n\n\n    return (\n        <>\n            <Header\n                title=\"Order Details\"\n            />\n            <PageContainer >\n                <div style={{ border: \"solid 1px #ccc\", padding: 20 }} >\n                    <table width=\"100%\" >\n                        <tr>\n                            <td width=\"20%\" height=\"30px\"><b>Order ID: </b></td>\n                            <td width=\"30%\">#{orderData.order_no}</td>\n                            <td width=\"20%\"><b> Order Status:</b></td>\n                            <td width=\"30%\">{orderData.status}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Customer Name:</b></td>\n                            <td>{orderData.b_fname + ' ' + orderData.b_lname}</td>\n                            <td><b>E-Mail:</b></td>\n                            <td>{orderData.b_email}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Order Date:</b></td>\n                            <td>{orderData.order_date}</td>\n                            <td><b>Order Total:</b></td>\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.grand_total}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Payment Mode:</b></td>\n                            <td>{orderData.payment_mode}</td>\n                            <td><b>Shipping Charge</b></td>\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.shipping_charge}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Coupon Code:</b></td>\n                            <td>{orderData.coupon_code}</td>\n                            <td><b>Order Discount:</b></td>\n                            <td>{orderData.discount}</td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\n                    <h3>Item Details</h3>\n                    <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n                </div>\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\n                    <h3>Billing Address</h3>\n                    <table width=\"100%\" >\n                        <tr>\n                            <td width=\"20%\" height=\"30px\"><b>Frist Name: </b></td>\n                            <td width=\"30%\">#{orderData.b_fname}</td>\n                            <td width=\"20%\"><b> Last Name:</b></td>\n                            <td width=\"30%\">{orderData.b_lname}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Phone:</b></td>\n                            <td>{orderData.b_phone}</td>\n                            <td><b>Email:</b></td>\n                            <td>{orderData.b_email}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Company Name:</b></td>\n                            <td>{orderData.b_company_name}</td>\n                            <td><b>Country:</b></td>\n                            <td>{orderData.b_country}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>State:</b></td>\n                            <td>{orderData.b_state}</td>\n                            <td><b>City:</b></td>\n                            <td>{orderData.b_city}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Street:</b></td>\n                            <td>{orderData.b_street}</td>\n                            <td><b>Landmark:</b></td>\n                            <td>{orderData.b_landmark}</td>\n                        </tr>\n                    </table>\n                </div>\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\n                    <h3>Shipping Address</h3>\n                    <table width=\"100%\" >\n                        <tr>\n                            <td width=\"20%\" height=\"30px\"><b>Frist Name: </b></td>\n                            <td width=\"30%\">#{orderData.s_fname}</td>\n                            <td width=\"20%\"><b> Last Name:</b></td>\n                            <td width=\"30%\">{orderData.s_lname}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Phone:</b></td>\n                            <td>{orderData.s_phone}</td>\n                            <td><b>Email:</b></td>\n                            <td>{orderData.s_email}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Company Name:</b></td>\n                            <td>{orderData.s_company_name}</td>\n                            <td><b>Country:</b></td>\n                            <td>{orderData.s_country}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>State:</b></td>\n                            <td>{orderData.s_state}</td>\n                            <td><b>City:</b></td>\n                            <td>{orderData.s_city}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Street:</b></td>\n                            <td>{orderData.s_street}</td>\n                            <td><b>Landmark:</b></td>\n                            <td>{orderData.s_landmark}</td>\n                        </tr>\n                    </table>\n                </div>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getOrderDetailsState: state.getOrderDetails,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderDetails: (params) => dispatch(getOrderDetails(params)),\n    getOrderDetailsReset: () => dispatch(getOrderDetailsReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","import React, { useEffect, useState } from \"react\"\nimport { Button, Table, Space, Select, Form, Row, Col, message } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport cnf from \"../../config\"\n/* actions */\nimport { getOrderDetails, getOrderDetailsReset } from \"../../action/getOrderDetailsAction\"\nimport { updateOrder, updateOrderReset } from \"../../action/updateOrderAction\"\n\n\nconst OrderList = props => {\n    /* variables */\n    const [form] = Form.useForm()\n    const order_id = props.match.params.order_id\n    const {\n        getOrderDetails, getOrderDetailsReset, getOrderDetailsState,\n        updateOrder, updateOrderReset, updateOrderState\n    } = props\n    const [redirect, setRedirect] = useState([false, ''])\n    const [orderData, setOrderData] = useState([])\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\n        },\n        {\n            title: 'Product Name',\n            dataIndex: 'product_name',\n            key: 'product_name',\n            render: (product_name) => (<span>{product_name}</span>)\n        },\n        {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n            render: (quantity) => (<span>{quantity}</span>)\n        },\n        {\n            title: 'Buy Price',\n            dataIndex: 'price',\n            key: 'price',\n            render: (price) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{price}</span>)\n        },\n        {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{total}</span>)\n        }\n    ];\n    const [formData, setFormData] = useState({\n        status: \"\",\n        order_id: order_id,\n        currencyType: getOrderDetailsState.order.payment_type,\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        getOrderDetails({ order_id: order_id })\n    }, [])\n\n    useEffect(() => {\n        if (getOrderDetailsState.apiState === \"success\") {\n            setOrderData(getOrderDetailsState.order)\n            let ar = []\n            getOrderDetailsState.order.items.map(obj => {\n                ar.push({\n                    key: obj.product_id,\n                    product_name: obj.product_name,\n                    image: obj.thumbnail,\n                    quantity: obj.quantity,\n                    price: obj.price,\n                    total: obj.total,\n                    id: obj.product_id,\n                })\n            })\n            setTableData(ar)\n            // Form set \n            form.setFieldsValue({\n                status: getOrderDetailsState.order.status,\n            })\n            setFormData({\n                ...formData,\n                ['status']: getOrderDetailsState.order.status,\n            })\n        }\n    }, [getOrderDetailsState])\n\n    useEffect(() => {\n        if (updateOrderState.apiState === \"success\") {\n            setRedirect([true, '/order_management/list'])\n            message.success(updateOrderState.message);\n        }\n\n        if (updateOrderState.apiState === \"error\") {\n            updateOrderReset()\n            message.error(updateOrderState.message);\n        }\n    }, [updateOrderState])\n\n    const handleNumberChange = (name, value) => {\n        console.log(name, value)\n        setFormData({ ...formData, [name]: value })\n    }\n    const handleSubmit = () => {\n        updateOrder(formData)\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n            <Header\n                title=\"Order Details\"\n            />\n            <PageContainer >\n                <div style={{ border: \"solid 1px #ccc\", padding: 20 }} >\n                    <table width=\"100%\" >\n                        <tr>\n                            <td width=\"20%\" height=\"30px\"><b>Order ID: </b></td>\n                            <td width=\"30%\">#{orderData.order_no}</td>\n                            <td width=\"20%\"><b> Order Status:</b></td>\n                            <td width=\"30%\">{orderData.status}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Customer Name:</b></td>\n                            <td>{orderData.b_fname + ' ' + orderData.b_lname}</td>\n                            <td><b>E-Mail:</b></td>\n                            <td>{orderData.b_email}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Order Date:</b></td>\n                            <td>{orderData.order_date}</td>\n                            <td><b>Order Total:</b></td>\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.grand_total}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Payment Mode:</b></td>\n                            <td>{orderData.payment_mode}</td>\n                            <td><b>Shipping Charge</b></td>\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.shipping_charge}</td>\n                        </tr>\n                        <tr>\n                            <td height=\"30px\"><b>Coupon Code:</b></td>\n                            <td>{orderData.coupon_code}</td>\n                            <td><b>Order Discount:</b></td>\n                            <td>{orderData.discount}</td>\n                        </tr>\n                    </table>\n                </div>\n                {/* <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\n                    <h3>Item Details</h3>\n                    <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n                </div> */}\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\n                    <h3>Update Status</h3>\n                    <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\">\n                                <Form.Item\n                                    label=\"Status\"\n                                    name=\"status\"\n                                    rules={[{ required: true, message: 'Required' }]}\n                                >\n                                    <Select name=\"status\" placeholder=\"Select Status\"\n                                        onSelect={v => handleNumberChange(\"status\", v)}\n                                    >\n                                        <Select.Option key=\"processing\" value=\"processing\" >Processing</Select.Option>\n                                        <Select.Option key=\"shipped\" value=\"shipped\">Shipped</Select.Option>\n                                        <Select.Option key=\"delivered\" value=\"delivered\">Delivered</Select.Option>\n                                        <Select.Option key=\"cancelled\" value=\"cancelled\">Cancelled</Select.Option>\n                                    </Select>\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                        <Button type=\"primary\" htmlType=\"submit\">SUBMIT</Button>\n                    </Form>\n                </div>\n\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getOrderDetailsState: state.getOrderDetails,\n    updateOrderState: state.updateOrder,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderDetails: (params) => dispatch(getOrderDetails(params)),\n    getOrderDetailsReset: () => dispatch(getOrderDetailsReset()),\n    updateOrder: (params) => dispatch(updateOrder(params)),\n    updateOrderReset: () => dispatch(updateOrderReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","import React from \"react\";\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import Header from \"../../../component/Header/Header\"\n    import { PageContainer } from \"../../../component/Xcomponent\"\n    import { Button } from \"antd\";\n    import { Link } from \"react-router-dom\";\n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n\n// -------------------------------------------------------------------------------------------------\n\nconst CouponsList = () => {\n\n    return(\n    <React.Fragment>\n        <Header title=\"Coupons Master\"  actionBtn={<Link to='/master/coupons/add'><Button >New</Button></Link>}></Header>\n        <PageContainer>\n            <DataTableExtensions print={false} export={false} exportHeaders={true} columns={[]} data={[]} >\n                <DataTable\n                    noHeader\n                    defaultSortField=\"id\"\n                    defaultSortAsc={false}\n                    pagination\n                    highlightOnHover\n                    exportHeaders={true}\n                    selectableRows={true}\n                />\n            </DataTableExtensions>\n        </PageContainer>\n    </React.Fragment>\n    )\n\n}\n\nexport default CouponsList;","import React from \"react\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import Header from \"../../../component/Header/Header\"\n    import { PageContainer } from \"../../../component/Xcomponent\"\n    import { Form, Row, Col,Input } from \"antd\"\n\n// --------------------------------------------------------------------------------------------------\n\nconst CouponsList = () => {\n    return (\n    <React.Fragment>\n        <Header title=\"New Coupons\"></Header>\n        <PageContainer>\n            <Form layout=\"vertical\" onFinish={() => { console.log('') }} >\n                <Row gutter=\"24\" >\n                    <Col span=\"6\">\n                        <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true, message: 'Required' }]}>\n                            <Input name=\"name\" placeholder=\"Enter Coupon Name\" onChange={() => console.log('')}/>\n                        </Form.Item>\n                    </Col>\n                    <Col span=\"6\">\n                        <Form.Item label=\"Code\" name=\"code\" rules={[{ required: true, message: 'Required' }]}>\n                            <Input name=\"name\" placeholder=\"Enter Coupon Code\" onChange={() => console.log('')}/>\n                        </Form.Item>\n                    </Col>\n                    <Col span=\"6\">\n                        <Form.Item label=\"Price\" name=\"price\" rules={[{ required: true, message: 'Required' }]}>\n                            <Input name=\"name\" placeholder=\"Enter Coupon Price\" onChange={() => console.log('')}/>\n                        </Form.Item>\n                    </Col>\n                    <Col span=\"6\">\n                        <Form.Item label=\"Expiry Date\" name=\"expiry_date\" rules={[{ required: true, message: 'Required' }]}>\n                            <Input name=\"name\" placeholder=\"Enter Coupon Name\" onChange={() => console.log('')}/>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </PageContainer>\n    </React.Fragment>\n)}\n\nexport default CouponsList","import React from \"react\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import Header from \"../../../component/Header/Header\"\n    import { PageContainer } from \"../../../component/Xcomponent\"\n\n// --------------------------------------------------------------------------------------------------\n\nconst CouponsEdit = () => {\n    return (\n        <React.Fragment>\n            <Header title=\"New Coupons\"></Header>\n            <PageContainer></PageContainer>\n        </React.Fragment>\n)}\n\nexport default CouponsEdit","const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    mobileXL: '500px',\n    tablet: '768px',\n    laptopS: '930px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n}\n\nconst theme = {\n    device: {\n        mobileS: `(max-width: ${size.mobileS})`,\n        mobileM: `(max-width: ${size.mobileM})`,\n        mobileL: `(max-width: ${size.mobileL})`,\n        mobileXL: `(max-width: ${size.mobileXL})`,\n        tablet: `(max-width: ${size.tablet})`,\n        laptopS: `(max-width: ${size.laptopS})`,\n        laptop: `(max-width: ${size.laptop})`,\n        laptopL: `(max-width: ${size.laptopL})`,\n        desktop: `(max-width: ${size.desktop})`,\n        desktopL: `(max-width: ${size.desktop})`\n    },\n    colors: {\n        primary: \"#08979C\",\n        black: \"#000\"\n    },\n\n}\n\nexport default theme","import React from \"react\"\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport \"antd/dist/antd.less\"\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from \"react-redux\"\n\nimport store from \"./store\"\n\nimport { Layout } from 'antd';\n\nimport Sidebar from \"./component/Sidebar/Sidebar\"\nimport PrivateRoute from \"./component/PrivateRoute\";\n\nimport Home from \"./page/Home/Home\"\nimport CategoryAdd from \"./page/CategoryAdd/CategoryAdd\"\nimport CategoryList from \"./page/CategoryList/CategoryList\"\nimport CategoryEdit from \"./page/CategoryEdit/CategoryEdit\"\nimport ProductList from \"./page/ProductList/ProductList\"\nimport ProductAdd from \"./page/ProductAdd/ProductAdd\"\nimport ProductEdit from \"./page/ProductEdit/ProductEdit\"\nimport ProductVariants from \"./page/ProductVariants/ProductVariants\"\nimport ProductImages from \"./page/ProductImages/ProductImages\"\nimport ProductDescription from \"./page/ProductDescription/ProductDescription\"\nimport ProductDescriptionEdit from \"./page/ProductDescriptionEdit/ProductDescriptionEdit\"\nimport RelatedProducts from \"./page/RelatedProducts/RelatedProducts\"\nimport HomeSlider from \"./page/HomeSlider/HomeSlider\"\nimport Testimonial from \"./page/Testimonial/Testimonial\"\nimport NotFound from \"./page/NotFound/NotFound\"\nimport Login from \"./page/Login/Login\"\nimport Logout from \"./page/Logout\"\nimport setting from \"./page/Setting/setting\"\nimport ShippingCharge from \"./page/ShippingCharge/ShippingCharge\"\nimport VoucherList from \"./page/VoucherList/VoucherList\"\nimport VoucherAdd from \"./page/VoucherAdd/VoucherAdd\"\nimport VoucherEdit from \"./page/VoucherEdit/VoucherEdit\"\nimport OrderList from \"./page/OrderList/OrderList\"\nimport CustomerList from \"./page/CustomerList/CustomerList\"\nimport OrderDetails from \"./page/OrderDetails/OrderDetails\"\nimport OrderUpdate from \"./page/OrderUpdate/OrderUpdate\"\n\n\n// @masters -----------------------------------------------------------\n\n    import CouponsList from \"./page/Masters/Coupons/CouponsList\"\n    import CouponsAdd  from \"./page/Masters/Coupons/CouponsAdd\"\n    import CouponsEdit from \"./page/Masters/Coupons/CouponsEdit\"\n\n// --------------------------------------------------------------------\n\n// others\nimport theme from './theme'\n\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <Router>\n                    <Switch>\n                        <Route path={[\n                            '/',\n                            '/master/coupons',\n                            '/master/coupons/add',\n                            '/master/coupons/edit',\n                            '/category/list',\n                            '/category/add',\n                            '/category/:category_id/edit',\n                            '/product/list',\n                            '/product/add',\n                            '/product/:product_id/edit',\n                            '/product/:product_id/edit/variants',\n                            '/product/:product_id/edit/images',\n                            '/product/:product_id/edit/description',\n                            '/product/:product_id/edit/description/:description_id',\n                            '/product/:product_id/edit/related-products',\n                            '/home/slider',\n                            '/home/testimonial',\n                            '/setting',\n                            '/shipping_configuration',\n                            '/voucher_management/list',\n                            '/voucher_management/add',\n                            '/voucher_management/:voucher_id/edit',\n                            '/order_management/list',\n                            '/customer/list',\n                            '/order/:order_id/details',\n                            '/order/:order_id/update',\n\n\n                        ]} exact >\n\n                            <Layout>\n                                <Sider style={{ overflow: 'auto', height: '100vh', position: 'fixed', left: 0, }} >\n                                    <Sidebar />\n                                </Sider>\n                                <Layout className=\"site-layout\" style={{ marginLeft: '250px' }}>\n                                    <Content style={{ overflow: 'initial', background: \"#fff\" }}>\n                                        <Switch>\n                                            <PrivateRoute exact path=\"/\" component={Home} />\n\n                                            <PrivateRoute exact path=\"/master/coupons\"      component={CouponsList} />\n                                            <PrivateRoute exact path=\"/master/coupons/add\"  component={CouponsAdd} />\n                                            <PrivateRoute exact path=\"/master/coupons/edit\" component={CouponsEdit} />\n\n                                            \n                                            <PrivateRoute exact path=\"/category/list\" component={CategoryList} />\n                                            <PrivateRoute exact path=\"/category/add\" component={CategoryAdd} />\n                                            <PrivateRoute exact path=\"/category/:category_id/edit\" component={CategoryEdit} />\n                                            <PrivateRoute exact path=\"/product/list\" component={ProductList} />\n                                            <PrivateRoute exact path=\"/product/add\" component={ProductAdd} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit\" component={ProductEdit} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/variants\" component={ProductVariants} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/images\" component={ProductImages} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/description\" component={ProductDescription} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/description/:description_id\" component={ProductDescriptionEdit} />\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/related-products\" component={RelatedProducts} />\n                                            <PrivateRoute exact path=\"/home/slider\" component={HomeSlider} />\n                                            <PrivateRoute exact path=\"/home/testimonial\" component={Testimonial} />\n                                            <PrivateRoute exact path=\"/setting\" component={setting} />\n                                            <PrivateRoute exact path=\"/shipping_configuration\" component={ShippingCharge} />\n                                            <PrivateRoute exact path=\"/voucher_management/list\" component={VoucherList} />\n                                            <PrivateRoute exact path=\"/voucher_management/add\" component={VoucherAdd} />\n                                            <PrivateRoute exact path=\"/voucher_management/:voucher_id/edit\" component={VoucherEdit} />\n                                            <PrivateRoute exact path=\"/order_management/list\" component={OrderList} />\n                                            <PrivateRoute exact path=\"/customer/list\" component={CustomerList} />\n                                            <PrivateRoute exact path=\"/order/:order_id/details\" component={OrderDetails} />\n                                            <PrivateRoute exact path=\"/order/:order_id/update\" component={OrderUpdate} />\n\n                                        </Switch>\n                                    </Content>\n                                </Layout>\n                            </Layout>\n                        </Route>\n\n                        <Route path={['/login', '/logout']} exact >\n                            <Switch>\n                                <Route exact path=\"/login\" component={Login} />\n                                <Route exact path=\"/logout\" component={Logout} />\n                            </Switch>\n                        </Route>\n\n                        <Route path=\"*\" component={NotFound} status={404} />\n                    </Switch>\n                </Router>\n            </ThemeProvider>\n        </Provider>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
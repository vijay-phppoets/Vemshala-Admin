{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/ProductDescription/ProductDescription.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form, Input, Row, Col, Table, Divider, Popconfirm, Space } from \"antd\";\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\";\n/* actions */\n\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\";\nimport { addDescription, addDescriptionReset } from \"../../action/addDescriptionAction\";\nimport { listDescription, listDescriptionReset } from \"../../action/listDescriptionAction\";\n\nconst ProductDescription = props => {\n  /* variables */\n  const product_id = props.match.params.product_id;\n  const {\n    getProductView,\n    getProductViewReset,\n    getProductViewState,\n    addDescription,\n    addDescriptionReset,\n    addDescriptionState,\n    listDescription,\n    listDescriptionReset,\n    listDescriptionState\n  } = props;\n  const [formData, setFormData] = useState({\n    product_id: product_id,\n    title: \"\"\n  });\n  const [refresh, setRefresh] = useState(0);\n  const columns = [{\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title'\n  }, {\n    title: 'Sequence',\n    dataIndex: 'sequence',\n    key: 'sequence'\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: obj => /*#__PURE__*/React.createElement(Space, {\n      size: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/product/${product_id}/edit/description/${obj.key}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      icon: /*#__PURE__*/React.createElement(EditOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 52\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure to delete?\",\n      onConfirm: () => console.log(\"hello\"),\n      okText: \"DELETE\",\n      cancelText: \"Cancel\",\n      okType: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 52\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    })))\n  }];\n  const [tableData, setTableData] = useState([]);\n  /* callbacks */\n\n  useEffect(() => {\n    return () => {\n      addDescriptionReset();\n      listDescription();\n    };\n  }, []);\n  useEffect(() => {\n    getProductView({\n      product_id: product_id\n    });\n    listDescription({\n      product_id: product_id\n    });\n  }, [refresh]);\n  useEffect(() => {\n    if (addDescriptionState.apiState === \"success\") {\n      setRefresh(refresh + 1);\n    }\n  }, [addDescriptionState]);\n  useEffect(() => {\n    if (listDescriptionState.apiState === \"success\") {\n      let tblData = [];\n      listDescriptionState.list.map(item => {\n        tblData.push({\n          key: item.id,\n          title: item.title,\n          sequence: item.sequence,\n          action: item.id\n        });\n      });\n      setTableData(tblData);\n    }\n  }, [listDescriptionState]);\n  /* FUNTIONS */\n\n  const handleSubmit = () => {\n    addDescription(formData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    title: \"Product Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, getProductViewState.apiState === \"success\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductTabs, {\n    id: product_id,\n    active: \"description\",\n    type: getProductViewState.product.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 6,\n    xl: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"title\",\n    placeholder: \"Enter Title\",\n    onChange: e => setFormData({ ...formData,\n      ['title']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 41\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: tableData,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  getProductViewState: state.getProductView,\n  addDescriptionState: state.addDescription,\n  listDescriptionState: state.listDescription\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getProductView: params => dispatch(getProductView(params)),\n  getProductViewReset: () => dispatch(getProductViewReset()),\n  addDescription: params => dispatch(addDescription(params)),\n  addDescriptionReset: () => dispatch(addDescriptionReset()),\n  listDescription: params => dispatch(listDescription(params)),\n  listDescriptionReset: () => dispatch(listDescriptionReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescription);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/ProductDescription/ProductDescription.js"],"names":["React","useState","useEffect","connect","Button","Form","Input","Row","Col","Table","Divider","Popconfirm","Space","EditOutlined","DeleteOutlined","Link","Header","PageContainer","ProductTabs","getProductView","getProductViewReset","addDescription","addDescriptionReset","listDescription","listDescriptionReset","ProductDescription","props","product_id","match","params","getProductViewState","addDescriptionState","listDescriptionState","formData","setFormData","title","refresh","setRefresh","columns","dataIndex","key","render","obj","console","log","tableData","setTableData","apiState","tblData","list","map","item","push","id","sequence","action","handleSubmit","product","type","required","message","e","target","value","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, Row, Col, Table, Divider, Popconfirm, Space } from \"antd\"\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\nimport { Link } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* actions */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { addDescription, addDescriptionReset } from \"../../action/addDescriptionAction\"\nimport { listDescription, listDescriptionReset } from \"../../action/listDescriptionAction\"\n\n\nconst ProductDescription = props => {\n    /* variables */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        addDescription, addDescriptionReset, addDescriptionState,\n        listDescription, listDescriptionReset, listDescriptionState,\n    } = props\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        title: \"\"\n    })\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            key: 'title',\n        },\n        {\n            title: 'Sequence',\n            dataIndex: 'sequence',\n            key: 'sequence',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: obj => (\n                <Space size=\"middle\">\n                    <Link to={`/product/${product_id}/edit/description/${obj.key}`}>\n                        <Button size=\"small\" icon={<EditOutlined />} />\n                    </Link>\n                    <Popconfirm\n                        title=\"Are you sure to delete?\"\n                        onConfirm={() => console.log(\"hello\")}\n                        okText=\"DELETE\"\n                        cancelText=\"Cancel\"\n                        okType=\"danger\"\n                    >\n                        <Button size=\"small\" icon={<DeleteOutlined />} />\n                    </Popconfirm>\n                </Space>\n            ),\n        },\n    ];\n    const [tableData, setTableData] = useState([])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            addDescriptionReset()\n            listDescription()\n        })\n    }, [])\n\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        listDescription({\n            product_id: product_id\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (addDescriptionState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n        }\n    }, [addDescriptionState])\n\n    useEffect(() => {\n        if (listDescriptionState.apiState === \"success\") {\n            let tblData = []\n            listDescriptionState.list.map(item => {\n                tblData.push({\n                    key: item.id,\n                    title: item.title,\n                    sequence: item.sequence,\n                    action: item.id,\n                })\n            })\n            setTableData(tblData)\n        }\n    }, [listDescriptionState])\n\n    /* FUNTIONS */\n    const handleSubmit = () => {\n        addDescription(formData)\n    }\n\n    return (\n        <>\n            <Header\n                title=\"Product Description\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={product_id} active=\"description\" type={getProductViewState.product.type} />\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\n                                    <Form.Item\n                                        label=\"Title\"\n                                        name=\"title\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Input name=\"title\" placeholder=\"Enter Title\"\n                                            onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Button type=\"primary\" htmlType=\"submit\" >SUBMIT</Button>\n                        </Form>\n                        <Divider />\n                        <Table columns={columns} dataSource={tableData} size='small' />\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    addDescriptionState: state.addDescription,\n    listDescriptionState: state.listDescription,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    addDescription: (params) => dispatch(addDescription(params)),\n    addDescriptionReset: () => dispatch(addDescriptionReset()),\n    listDescription: (params) => dispatch(listDescription(params)),\n    listDescriptionReset: () => dispatch(listDescriptionReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescription)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/RelatedProducts/RelatedProducts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Form, Select, Row, Col, message, Table, Divider, Popconfirm } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n/* CUSTOM COMPONENTS */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\";\n/* ACTIONS */\n\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\";\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\";\nimport { addRelProd, addRelProdReset } from \"../../action/addRelProdAction\";\nimport { listRelProd, listRelProdReset } from \"../../action/listRelProdAction\";\nimport { delRelProd, delRelProdReset } from \"../../action/delRelProdAction\";\n\nconst RelatedProducts = props => {\n  /* VARIABLES */\n  const product_id = props.match.params.product_id;\n  const {\n    getProductView,\n    getProductViewReset,\n    getProductViewState,\n    getProductList,\n    getProductListReset,\n    getProductListState,\n    addRelProd,\n    addRelProdReset,\n    addRelProdState,\n    listRelProd,\n    listRelProdReset,\n    listRelProdState,\n    delRelProd,\n    delRelProdReset,\n    delRelProdState\n  } = props;\n  const [formData, setFormData] = useState({\n    product_id: product_id,\n    related_product_id: \"\"\n  });\n  const [refresh, setRefresh] = useState(0);\n  const [tableData, setTableData] = useState([]);\n  const columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: obj => /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure to delete?\",\n      onConfirm: () => delRelProd({\n        product_id: product_id,\n        related_product_id: obj.key\n      }),\n      okText: \"DELETE\",\n      cancelText: \"Cancel\",\n      okType: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 48\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }))\n  }];\n  /* callbacks */\n\n  useEffect(() => {\n    getProductView({\n      product_id: product_id\n    });\n    getProductList();\n    listRelProd({\n      product_id: product_id\n    });\n  }, [refresh]);\n  useEffect(() => {\n    if (addRelProdState.apiState === \"success\") {\n      addRelProdReset();\n      setRefresh(refresh + 1);\n      message.success(addRelProdState.message);\n    }\n\n    if (addRelProdState.apiState === \"error\") {\n      message.error(addRelProdState.message);\n    }\n  }, [addRelProdState]);\n  useEffect(() => {\n    if (listRelProdState.apiState === \"success\") {\n      let tblData = [];\n      listRelProdState.list.map(item => {\n        tblData.push({\n          key: item.id,\n          name: item.name,\n          action: item.id\n        });\n      });\n      setTableData(tblData);\n    }\n  }, [listRelProdState]);\n  useEffect(() => {\n    if (delRelProdState.apiState === \"success\") {\n      delRelProdReset();\n      setRefresh(refresh + 1);\n      message.success(delRelProdState.message);\n    }\n\n    if (delRelProdState.apiState === \"error\") {\n      message.error(delRelProdState.message);\n    }\n  }, [delRelProdState]);\n  /* FUNCTIONS */\n\n  const handleSubmit = () => {\n    addRelProd(formData);\n  };\n\n  const handleSelect = (name, value) => {\n    setFormData({ ...formData,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    title: \"Related Products\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, getProductViewState.apiState === \"success\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductTabs, {\n    id: product_id,\n    active: \"related_products\",\n    type: getProductViewState.product.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 12,\n    xl: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Related Product\",\n    name: \"related_product_id\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: \"related_product_id\",\n    placeholder: \"Select Related Product\",\n    showSearch: true,\n    filterOption: (input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    onChange: value => handleSelect(\"related_product_id\", value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 41\n    }\n  }, getProductListState.list.map(p => /*#__PURE__*/React.createElement(Select.Option, {\n    key: p.id,\n    value: p.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 49\n    }\n  }, `${p.name}`)))))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }\n  }, \"SAVE\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: tableData,\n    size: \"small\",\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  })))));\n};\n\nconst mapStateToProps = state => ({\n  getProductViewState: state.getProductView,\n  getProductListState: state.getProductList,\n  addRelProdState: state.addRelProd,\n  listRelProdState: state.listRelProd,\n  delRelProdState: state.delRelProd\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getProductView: params => dispatch(getProductView(params)),\n  getProductViewReset: () => dispatch(getProductViewReset()),\n  getProductList: params => dispatch(getProductList(params)),\n  getProductListReset: () => dispatch(getProductListReset()),\n  addRelProd: params => dispatch(addRelProd(params)),\n  addRelProdReset: () => dispatch(addRelProdReset()),\n  listRelProd: params => dispatch(listRelProd(params)),\n  listRelProdReset: () => dispatch(listRelProdReset()),\n  delRelProd: params => dispatch(delRelProd(params)),\n  delRelProdReset: () => dispatch(delRelProdReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RelatedProducts);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/RelatedProducts/RelatedProducts.js"],"names":["React","useState","useEffect","connect","Button","Form","Select","Row","Col","message","Table","Divider","Popconfirm","DeleteOutlined","Header","PageContainer","ProductTabs","getProductView","getProductViewReset","getProductList","getProductListReset","addRelProd","addRelProdReset","listRelProd","listRelProdReset","delRelProd","delRelProdReset","RelatedProducts","props","product_id","match","params","getProductViewState","getProductListState","addRelProdState","listRelProdState","delRelProdState","formData","setFormData","related_product_id","refresh","setRefresh","tableData","setTableData","columns","title","dataIndex","key","render","obj","apiState","success","error","tblData","list","map","item","push","id","name","action","handleSubmit","handleSelect","value","product","type","required","input","option","children","toLowerCase","indexOf","p","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Form, Select, Row, Col, message, Table, Divider, Popconfirm } from \"antd\"\nimport { DeleteOutlined } from \"@ant-design/icons\"\n/* CUSTOM COMPONENTS */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\n\n/* ACTIONS */\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\"\nimport { addRelProd, addRelProdReset } from \"../../action/addRelProdAction\"\nimport { listRelProd, listRelProdReset } from \"../../action/listRelProdAction\"\nimport { delRelProd, delRelProdReset } from \"../../action/delRelProdAction\"\n\nconst RelatedProducts = props => {\n    /* VARIABLES */\n    const product_id = props.match.params.product_id\n    const {\n        getProductView, getProductViewReset, getProductViewState,\n        getProductList, getProductListReset, getProductListState,\n        addRelProd, addRelProdReset, addRelProdState,\n        listRelProd, listRelProdReset, listRelProdState,\n        delRelProd, delRelProdReset, delRelProdState,\n    } = props\n    const [formData, setFormData] = useState({\n        product_id: product_id,\n        related_product_id: \"\"\n    })\n    const [refresh, setRefresh] = useState(0)\n    const [tableData, setTableData] = useState([])\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: obj => (\n                <Popconfirm\n                    title=\"Are you sure to delete?\"\n                    onConfirm={() => delRelProd({\n                        product_id: product_id,\n                        related_product_id: obj.key,\n                    })}\n                    okText=\"DELETE\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            ),\n        },\n    ];\n\n    /* callbacks */\n    useEffect(() => {\n        getProductView({\n            product_id: product_id\n        })\n        getProductList()\n        listRelProd({\n            product_id: product_id\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        if (addRelProdState.apiState === \"success\") {\n            addRelProdReset()\n            setRefresh(refresh + 1)\n            message.success(addRelProdState.message);\n        }\n\n        if (addRelProdState.apiState === \"error\") {\n            message.error(addRelProdState.message);\n        }\n    }, [addRelProdState])\n\n    useEffect(() => {\n        if (listRelProdState.apiState === \"success\") {\n            let tblData = []\n            listRelProdState.list.map(item => {\n                tblData.push({\n                    key: item.id,\n                    name: item.name,\n                    action: item.id,\n                })\n            })\n            setTableData(tblData)\n        }\n    }, [listRelProdState])\n\n\n    useEffect(() => {\n        if (delRelProdState.apiState === \"success\") {\n            delRelProdReset()\n            setRefresh(refresh + 1)\n            message.success(delRelProdState.message);\n        }\n\n        if (delRelProdState.apiState === \"error\") {\n            message.error(delRelProdState.message);\n        }\n    }, [delRelProdState])\n\n\n\n    /* FUNCTIONS */\n    const handleSubmit = () => {\n        addRelProd(formData)\n    }\n\n    const handleSelect = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n    return (\n        <>\n            <Header\n                title=\"Related Products\"\n            />\n            <PageContainer>\n                {getProductViewState.apiState === \"success\" &&\n                    <>\n                        <ProductTabs id={product_id} active=\"related_products\" type={getProductViewState.product.type} />\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\n                            <Row gutter={20}>\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <Form.Item\n                                        label=\"Related Product\"\n                                        name=\"related_product_id\"\n                                        rules={[{ required: true, message: 'Required' }]}\n                                    >\n                                        <Select name=\"related_product_id\" placeholder=\"Select Related Product\"\n                                            showSearch\n                                            filterOption={(input, option) =>\n                                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                            }\n                                            onChange={(value) => handleSelect(\"related_product_id\", value)}\n                                        >\n                                            {getProductListState.list.map(p => (\n                                                <Select.Option key={p.id} value={p.id} >{`${p.name}`}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <Button type=\"primary\" htmlType=\"submit\" >SAVE</Button>\n                            <Divider />\n                            <Table columns={columns} dataSource={tableData} size='small' pagination={false} />\n                        </Form>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getProductViewState: state.getProductView,\n    getProductListState: state.getProductList,\n    addRelProdState: state.addRelProd,\n    listRelProdState: state.listRelProd,\n    delRelProdState: state.delRelProd,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getProductView: (params) => dispatch(getProductView(params)),\n    getProductViewReset: () => dispatch(getProductViewReset()),\n    getProductList: (params) => dispatch(getProductList(params)),\n    getProductListReset: () => dispatch(getProductListReset()),\n    addRelProd: (params) => dispatch(addRelProd(params)),\n    addRelProdReset: () => dispatch(addRelProdReset()),\n    listRelProd: (params) => dispatch(listRelProd(params)),\n    listRelProdReset: () => dispatch(listRelProdReset()),\n    delRelProd: (params) => dispatch(delRelProd(params)),\n    delRelProdReset: () => dispatch(delRelProdReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RelatedProducts)"]},"metadata":{},"sourceType":"module"}
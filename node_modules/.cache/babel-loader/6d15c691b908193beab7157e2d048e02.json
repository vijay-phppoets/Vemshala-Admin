{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryAdd/CategoryAdd.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Row, Col, TreeSelect, Button, message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\n/* action */\n\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\";\nimport { createCategory, createCategoryReset } from \"../../action/createCategoryAction\";\n/* others */\n\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\";\nimport cnf from \"../../config\";\nconst {\n  TreeNode\n} = TreeSelect;\n\nconst CategoryAdd = props => {\n  /* variables */\n  const {\n    getCategoryTree,\n    getCategoryTreeReset,\n    getCategoryTreeState,\n    createCategory,\n    createCategoryReset,\n    createCategoryState\n  } = props;\n  const [formData, setFormData] = useState({\n    parent_category_id: null,\n    name: \"\",\n    url_key: \"\",\n    image: \"\",\n    banner_img: \"\",\n    m_banner_img: \"\"\n  });\n  const [image, set_image] = useState(null);\n  const [banner_img, set_banner_img] = useState(null);\n  const [m_banner_img, set_m_banner_img] = useState(null);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [redirect, setRedirect] = useState([false, '']);\n  /* callbacks */\n\n  useEffect(() => {\n    return () => {\n      getCategoryTreeReset();\n      createCategoryReset();\n    };\n  }, []);\n  useEffect(() => {\n    getCategoryTree();\n  }, []);\n  useEffect(() => {\n    if (createCategoryState.apiState === \"success\") {\n      setRedirect([true, '/category/list']);\n      message.success(createCategoryState.message);\n    }\n\n    if (createCategoryState.apiState === \"error\") {\n      createCategoryReset();\n      message.error(createCategoryState.message);\n    }\n  }, [createCategoryState]);\n  /* function */\n\n  const categoryOptions = tree => {\n    let finalJsx = [];\n    tree.map(node => {\n      if (node.children.length > 0) {\n        finalJsx.push( /*#__PURE__*/React.createElement(TreeNode, {\n          value: node.id,\n          title: node.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }\n        }, categoryOptions(node.children)));\n      } else {\n        finalJsx.push( /*#__PURE__*/React.createElement(TreeNode, {\n          value: node.id,\n          title: node.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }\n        }));\n      }\n    });\n    return finalJsx;\n  };\n\n  const handleSubmit = async () => {\n    let image_filename = uuidv4();\n    let banner_img_filename = uuidv4();\n    let m_banner_img_filename = uuidv4();\n    let imageValRes = validateImageFile(image);\n    let bannerImageValRes = validateImageFile(banner_img);\n    let mBannerImageValRes = validateImageFile(m_banner_img);\n\n    if (!imageValRes.status) {\n      alert(\"Image's extension is not allowed.\");\n      return;\n    }\n\n    if (!bannerImageValRes.status) {\n      alert(\"Banner Image's extension is not allowed.\");\n      return;\n    }\n\n    if (!mBannerImageValRes.status) {\n      alert(\"Mobile Banner Image's extension is not allowed.\");\n      return;\n    }\n\n    setSubmitLoading(true);\n    let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image);\n    await axios.put(s3UrlRes1.url, image);\n    let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img);\n    await axios.put(s3UrlRes2.url, banner_img);\n    let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img);\n    await axios.put(s3UrlRes3.url, m_banner_img);\n    formData.image = `${image_filename}.${imageValRes.ext}`;\n    formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`;\n    formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`;\n    createCategory(formData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    title: \"Category Add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Parent Category (Empty for Root level category)\",\n    name: \"parent_category_id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TreeSelect, {\n    showSearch: true,\n    filterTreeNode: (input, treeNode) => treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    style: {\n      width: '100%'\n    },\n    dropdownStyle: {\n      maxHeight: 400,\n      overflow: 'auto'\n    },\n    placeholder: \"Blank for root category\",\n    allowClear: true,\n    treeDefaultExpandAll: true,\n    onChange: (value, node) => setFormData({ ...formData,\n      ['parent_category_id']: value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }\n  }, categoryOptions(getCategoryTreeState.tree)))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Name\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"name\",\n    placeholder: \"Enter Category Name\",\n    onChange: e => setFormData({ ...formData,\n      ['name']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"URL Key\",\n    name: \"url_key\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n      message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"url_key\",\n    placeholder: \"Enter Category URL Key\",\n    onChange: e => setFormData({ ...formData,\n      ['url_key']: e.target.value\n    }),\n    addonBefore: cnf.domain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Image\",\n    name: \"image\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 40\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 1:1 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"image\",\n    onChange: e => set_image(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Banner Image\",\n    name: \"banner_img\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 40\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 4:1 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"banner_img\",\n    onChange: e => set_banner_img(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Banner Image For Mobile\",\n    name: \"m_banner_img\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 40\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 3:2 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"m_banner_img\",\n    onChange: e => set_m_banner_img(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submitLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\"))));\n};\n\nconst mapStateToProps = state => ({\n  getCategoryTreeState: state.getCategoryTree,\n  createCategoryState: state.createCategory\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCategoryTree: params => dispatch(getCategoryTree(params)),\n  getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n  createCategory: params => dispatch(createCategory(params)),\n  createCategoryReset: () => dispatch(createCategoryReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryAdd);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryAdd/CategoryAdd.js"],"names":["React","useState","useEffect","Form","Input","Row","Col","TreeSelect","Button","message","connect","v4","uuidv4","axios","Redirect","Header","PageContainer","getCategoryTree","getCategoryTreeReset","createCategory","createCategoryReset","validateImageFile","getS3SingedUrl","cnf","TreeNode","CategoryAdd","props","getCategoryTreeState","createCategoryState","formData","setFormData","parent_category_id","name","url_key","image","banner_img","m_banner_img","set_image","set_banner_img","set_m_banner_img","submitLoading","setSubmitLoading","redirect","setRedirect","apiState","success","error","categoryOptions","tree","finalJsx","map","node","children","length","push","id","handleSubmit","image_filename","banner_img_filename","m_banner_img_filename","imageValRes","bannerImageValRes","mBannerImageValRes","status","alert","s3UrlRes1","ext","put","url","s3UrlRes2","s3UrlRes3","input","treeNode","title","toLowerCase","indexOf","width","maxHeight","overflow","value","required","e","target","pattern","RegExp","domain","files","mapStateToProps","state","mapDispatchToProps","dispatch","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,MAA5C,EAAoDC,OAApD,QAAmE,MAAnE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA;;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA;;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,oCAAtD;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,mCAApD;AAEA;;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,aAAlD;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAejB,UAArB;;AAEA,MAAMkB,WAAW,GAAGC,KAAK,IAAI;AACzB;AACA,QAAM;AACFT,IAAAA,eADE;AACeC,IAAAA,oBADf;AACqCS,IAAAA,oBADrC;AAEFR,IAAAA,cAFE;AAEcC,IAAAA,mBAFd;AAEmCQ,IAAAA;AAFnC,MAGFF,KAHJ;AAIA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC;AACrC8B,IAAAA,kBAAkB,EAAE,IADiB;AAErCC,IAAAA,IAAI,EAAE,EAF+B;AAGrCC,IAAAA,OAAO,EAAE,EAH4B;AAIrCC,IAAAA,KAAK,EAAE,EAJ8B;AAKrCC,IAAAA,UAAU,EAAE,EALyB;AAMrCC,IAAAA,YAAY,EAAE;AANuB,GAAD,CAAxC;AAQA,QAAM,CAACF,KAAD,EAAQG,SAAR,IAAqBpC,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACkC,UAAD,EAAaG,cAAb,IAA+BrC,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACmC,YAAD,EAAeG,gBAAf,IAAmCtC,QAAQ,CAAC,IAAD,CAAjD;AACA,QAAM,CAACuC,aAAD,EAAgBC,gBAAhB,IAAoCxC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACyC,QAAD,EAAWC,WAAX,IAA0B1C,QAAQ,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,CAAxC;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAQ,MAAM;AACVgB,MAAAA,oBAAoB;AACpBE,MAAAA,mBAAmB;AACtB,KAHD;AAIH,GALQ,EAKN,EALM,CAAT;AAOAlB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,eAAe;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,mBAAmB,CAACgB,QAApB,KAAiC,SAArC,EAAgD;AAC5CD,MAAAA,WAAW,CAAC,CAAC,IAAD,EAAO,gBAAP,CAAD,CAAX;AACAlC,MAAAA,OAAO,CAACoC,OAAR,CAAgBjB,mBAAmB,CAACnB,OAApC;AACH;;AAED,QAAImB,mBAAmB,CAACgB,QAApB,KAAiC,OAArC,EAA8C;AAC1CxB,MAAAA,mBAAmB;AACnBX,MAAAA,OAAO,CAACqC,KAAR,CAAclB,mBAAmB,CAACnB,OAAlC;AACH;AACJ,GAVQ,EAUN,CAACmB,mBAAD,CAVM,CAAT;AAYA;;AACA,QAAMmB,eAAe,GAAIC,IAAD,IAAU;AAC9B,QAAIC,QAAQ,GAAG,EAAf;AACAD,IAAAA,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACb,UAAIA,IAAI,CAACC,QAAL,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1BJ,QAAAA,QAAQ,CAACK,IAAT,eACI,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAEH,IAAI,CAACI,EAAtB;AAA0B,UAAA,KAAK,EAAEJ,IAAI,CAACnB,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6Ce,eAAe,CAACI,IAAI,CAACC,QAAN,CAA5D,CADJ;AAGH,OAJD,MAIO;AACHH,QAAAA,QAAQ,CAACK,IAAT,eACI,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAEH,IAAI,CAACI,EAAtB;AAA0B,UAAA,KAAK,EAAEJ,IAAI,CAACnB,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AACJ,KAVD;AAWA,WAAOiB,QAAP;AACH,GAdD;;AAgBA,QAAMO,YAAY,GAAG,YAAY;AAC7B,QAAIC,cAAc,GAAG7C,MAAM,EAA3B;AACA,QAAI8C,mBAAmB,GAAG9C,MAAM,EAAhC;AACA,QAAI+C,qBAAqB,GAAG/C,MAAM,EAAlC;AAEA,QAAIgD,WAAW,GAAGvC,iBAAiB,CAACa,KAAD,CAAnC;AACA,QAAI2B,iBAAiB,GAAGxC,iBAAiB,CAACc,UAAD,CAAzC;AACA,QAAI2B,kBAAkB,GAAGzC,iBAAiB,CAACe,YAAD,CAA1C;;AAEA,QAAI,CAACwB,WAAW,CAACG,MAAjB,EAAyB;AACrBC,MAAAA,KAAK,CAAC,mCAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACH,iBAAiB,CAACE,MAAvB,EAA+B;AAC3BC,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACF,kBAAkB,CAACC,MAAxB,EAAgC;AAC5BC,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACA;AACH;;AAEDvB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,QAAIwB,SAAS,GAAG,MAAM3C,cAAc,CAACmC,cAAD,EAAiBG,WAAW,CAACM,GAA7B,EAAkChC,KAAlC,CAApC;AACA,UAAMrB,KAAK,CAACsD,GAAN,CAAUF,SAAS,CAACG,GAApB,EAAyBlC,KAAzB,CAAN;AAEA,QAAImC,SAAS,GAAG,MAAM/C,cAAc,CAACoC,mBAAD,EAAsBG,iBAAiB,CAACK,GAAxC,EAA6C/B,UAA7C,CAApC;AACA,UAAMtB,KAAK,CAACsD,GAAN,CAAUE,SAAS,CAACD,GAApB,EAAyBjC,UAAzB,CAAN;AAEA,QAAImC,SAAS,GAAG,MAAMhD,cAAc,CAACqC,qBAAD,EAAwBG,kBAAkB,CAACI,GAA3C,EAAgD9B,YAAhD,CAApC;AACA,UAAMvB,KAAK,CAACsD,GAAN,CAAUG,SAAS,CAACF,GAApB,EAAyBhC,YAAzB,CAAN;AAEAP,IAAAA,QAAQ,CAACK,KAAT,GAAkB,GAAEuB,cAAe,IAAGG,WAAW,CAACM,GAAI,EAAtD;AACArC,IAAAA,QAAQ,CAACM,UAAT,GAAuB,GAAEuB,mBAAoB,IAAGG,iBAAiB,CAACK,GAAI,EAAtE;AACArC,IAAAA,QAAQ,CAACO,YAAT,GAAyB,GAAEuB,qBAAsB,IAAGG,kBAAkB,CAACI,GAAI,EAA3E;AAEA/C,IAAAA,cAAc,CAACU,QAAD,CAAd;AACH,GAtCD;;AAwCA,sBACI,0CACKa,QAAQ,CAAC,CAAD,CAAR,iBACG,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,QAAQ,CAAC,CAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAII,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAOI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAC,UAAb;AAAwB,IAAA,QAAQ,EAAEc,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,iDADV;AAEI,IAAA,IAAI,EAAC,oBAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,UAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,cAAc,EAAE,CAACe,KAAD,EAAQC,QAAR,KACZA,QAAQ,CAACC,KAAT,CAAeC,WAAf,GAA6BC,OAA7B,CAAqCJ,KAAK,CAACG,WAAN,EAArC,KAA6D,CAHrE;AAKI,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAE;AAAT,KALX;AAMI,IAAA,aAAa,EAAE;AAAEC,MAAAA,SAAS,EAAE,GAAb;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KANnB;AAOI,IAAA,WAAW,EAAC,yBAPhB;AAQI,IAAA,UAAU,MARd;AASI,IAAA,oBAAoB,MATxB;AAUI,IAAA,QAAQ,EAAE,CAACC,KAAD,EAAQ5B,IAAR,KAAiBrB,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,OAAC,oBAAD,GAAwBkD;AAAvC,KAAD,CAV1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKhC,eAAe,CAACpB,oBAAoB,CAACqB,IAAtB,CAZpB,CAJJ,CADJ,CADJ,eAuBI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,MADV;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEgC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBvE,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AACI,IAAA,QAAQ,EAAGwE,CAAD,IAAOnD,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,OAAC,MAAD,GAAUoD,CAAC,CAACC,MAAF,CAASH;AAAlC,KAAD,CADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,CAvBJ,CADJ,eAqCI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,SADV;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,KAAK,EAAE,CACH;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBvE,MAAAA,OAAO,EAAE;AAA3B,KADG,EAEH;AACI0E,MAAAA,OAAO,EAAE,IAAIC,MAAJ,CAAW,kBAAX,CADb;AAEI3E,MAAAA,OAAO,EAAE;AAFb,KAFG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,WAAW,EAAC,wBAAlC;AACI,IAAA,QAAQ,EAAGwE,CAAD,IAAOnD,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,OAAC,SAAD,GAAaoD,CAAC,CAACC,MAAF,CAASH;AAArC,KAAD,CADhC;AAEI,IAAA,WAAW,EAAExD,GAAG,CAAC8D,MAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADJ,CADJ,eAoBI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,OADV;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEL,MAAAA,QAAQ,EAAE,IAAZ;AAAkBvE,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAII,IAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AACI,IAAA,QAAQ,EAAEwE,CAAC,IAAI5C,SAAS,CAAC4C,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CAAD,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CApBJ,CArCJ,eAuEI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,cADV;AAEI,IAAA,IAAI,EAAC,YAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEN,MAAAA,QAAQ,EAAE,IAAZ;AAAkBvE,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAII,IAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,YAAxB;AACI,IAAA,QAAQ,EAAEwE,CAAC,IAAI3C,cAAc,CAAC2C,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CADJ,eAcI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,yBADV;AAEI,IAAA,IAAI,EAAC,cAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEN,MAAAA,QAAQ,EAAE,IAAZ;AAAkBvE,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAII,IAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,cAAxB;AACI,IAAA,QAAQ,EAAEwE,CAAC,IAAI1C,gBAAgB,CAAC0C,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CAAD,CADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CAdJ,CAvEJ,eAmGI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAE9C,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnGJ,CAFJ,CAPJ,CADJ;AAmHH,CAxND;;AA0NA,MAAM+C,eAAe,GAAIC,KAAD,KAAY;AAChC7D,EAAAA,oBAAoB,EAAE6D,KAAK,CAACvE,eADI;AAEhCW,EAAAA,mBAAmB,EAAE4D,KAAK,CAACrE;AAFK,CAAZ,CAAxB;;AAKA,MAAMsE,kBAAkB,GAAIC,QAAD,KAAe;AACtCzE,EAAAA,eAAe,EAAG0E,MAAD,IAAYD,QAAQ,CAACzE,eAAe,CAAC0E,MAAD,CAAhB,CADC;AAEtCzE,EAAAA,oBAAoB,EAAE,MAAMwE,QAAQ,CAACxE,oBAAoB,EAArB,CAFE;AAGtCC,EAAAA,cAAc,EAAGwE,MAAD,IAAYD,QAAQ,CAACvE,cAAc,CAACwE,MAAD,CAAf,CAHE;AAItCvE,EAAAA,mBAAmB,EAAE,MAAMsE,QAAQ,CAACtE,mBAAmB,EAApB;AAJG,CAAf,CAA3B;;AAOA,eAAeV,OAAO,CAAC6E,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChE,WAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { Redirect } from \"react-router-dom\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { createCategory, createCategoryReset } from \"../../action/createCategoryAction\"\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst { TreeNode } = TreeSelect\n\nconst CategoryAdd = props => {\n    /* variables */\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        createCategory, createCategoryReset, createCategoryState\n    } = props\n    const [formData, setFormData] = useState({\n        parent_category_id: null,\n        name: \"\",\n        url_key: \"\",\n        image: \"\",\n        banner_img: \"\",\n        m_banner_img: \"\"\n    })\n    const [image, set_image] = useState(null)\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getCategoryTreeReset()\n            createCategoryReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getCategoryTree()\n    }, [])\n\n    useEffect(() => {\n        if (createCategoryState.apiState === \"success\") {\n            setRedirect([true, '/category/list'])\n            message.success(createCategoryState.message);\n        }\n\n        if (createCategoryState.apiState === \"error\") {\n            createCategoryReset()\n            message.error(createCategoryState.message);\n        }\n    }, [createCategoryState])\n\n    /* function */\n    const categoryOptions = (tree) => {\n        let finalJsx = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\n                )\n            } else {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name} />\n                )\n            }\n        })\n        return finalJsx\n    }\n\n    const handleSubmit = async () => {\n        let image_filename = uuidv4()\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let imageValRes = validateImageFile(image)\n        let bannerImageValRes = validateImageFile(banner_img)\n        let mBannerImageValRes = validateImageFile(m_banner_img)\n\n        if (!imageValRes.status) {\n            alert(\"Image's extension is not allowed.\")\n            return\n        }\n        if (!bannerImageValRes.status) {\n            alert(\"Banner Image's extension is not allowed.\")\n            return\n        }\n        if (!mBannerImageValRes.status) {\n            alert(\"Mobile Banner Image's extension is not allowed.\")\n            return\n        }\n\n        setSubmitLoading(true)\n\n        let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n        await axios.put(s3UrlRes1.url, image)\n\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n        await axios.put(s3UrlRes2.url, banner_img)\n\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n        await axios.put(s3UrlRes3.url, m_banner_img)\n\n        formData.image = `${image_filename}.${imageValRes.ext}`\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n\n        createCategory(formData)\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Category Add\"\n            />\n            <PageContainer>\n\n                <Form layout=\"vertical\" onFinish={handleSubmit}>\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\">\n                            <Form.Item\n                                label=\"Parent Category (Empty for Root level category)\"\n                                name=\"parent_category_id\"\n                            >\n                                <TreeSelect\n                                    showSearch\n                                    filterTreeNode={(input, treeNode) =>\n                                        treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                    style={{ width: '100%' }}\n                                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                    placeholder=\"Blank for root category\"\n                                    allowClear\n                                    treeDefaultExpandAll\n                                    onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\n                                >\n                                    {categoryOptions(getCategoryTreeState.tree)}\n                                </TreeSelect>\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Category Name\"\n                                    onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"URL Key\"\n                                name=\"url_key\"\n                                rules={[\n                                    { required: true, message: 'Required' },\n                                    {\n                                        pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                        message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                    }\n                                ]}\n                            >\n                                <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\n                                    onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\n                                    addonBefore={cnf.domain}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Image\"\n                                name=\"image\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"image\"\n                                    onChange={e => set_image(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter=\"24\" >\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Banner Image\"\n                                name=\"banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"banner_img\"\n                                    onChange={e => set_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n\n                        <Col span=\"12\" >\n                            <Form.Item\n                                label=\"Banner Image For Mobile\"\n                                name=\"m_banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n\n                </Form>\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    createCategoryState: state.createCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    createCategory: (params) => dispatch(createCategory(params)),\n    createCategoryReset: () => dispatch(createCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryAdd)"]},"metadata":{},"sourceType":"module"}
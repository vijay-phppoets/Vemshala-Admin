{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/HomeSlider/HomeSlider.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Space, Upload } from 'antd';\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\n/* action */\n\nimport { saveSliderImages, saveSliderImagesReset } from \"../../action/saveSliderImagesAction\";\nimport { getSliderList, getSliderListReset } from \"../../action/getSliderListAction\";\nimport { delSlider, delSliderReset } from \"../../action/delSliderAction\";\n/* others */\n\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\";\nimport cnf from \"../../config\";\n\nconst HomeSlider = props => {\n  /* variables */\n  const {\n    saveSliderImages,\n    saveSliderImagesReset,\n    saveSliderImagesState,\n    getSliderList,\n    getSliderListReset,\n    getSliderListState,\n    delSlider,\n    delSliderReset,\n    delSliderState\n  } = props;\n  const initial_values = {\n    banner_img: \"\",\n    m_banner_img: \"\",\n    sequence: 0\n  };\n  const [formData, setFormData] = useState(initial_values);\n  const [redirect, setRedirect] = useState([false, '']);\n  const [banner_img, set_banner_img] = useState(null);\n  const [m_banner_img, set_m_banner_img] = useState(null);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [refresh, setRefresh] = useState(0);\n  const columns = [{\n    title: 'Image',\n    dataIndex: 'image',\n    key: 'image',\n    render: image => /*#__PURE__*/React.createElement(\"img\", {\n      src: `${cnf.s3_base_url}${image}`,\n      alt: \"\",\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }\n    })\n  }, {\n    title: 'Mobile Image',\n    dataIndex: 'mobile_image',\n    key: 'mobile_image',\n    render: mobile_image => /*#__PURE__*/React.createElement(\"img\", {\n      src: `${cnf.s3_base_url}${mobile_image}`,\n      alt: \"\",\n      style: {\n        width: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 40\n      }\n    })\n  }, {\n    title: 'Sequence',\n    dataIndex: 'sequence',\n    key: 'sequence'\n  }, {\n    title: 'Action',\n    dataIndex: 'id',\n    key: 'action',\n    render: id => /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure to delete this slider?\",\n      onConfirm: () => delSlider({\n        id: id\n      }),\n      okText: \"Delete\",\n      cancelText: \"Cancel\",\n      okType: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 48\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }))\n  }];\n  const [tableData, setTableData] = useState([]);\n  const [form] = Form.useForm();\n  /* callbakcs */\n\n  useEffect(() => {\n    return () => {\n      saveSliderImagesReset();\n      getSliderListReset();\n      delSliderReset();\n    };\n  }, []);\n  useEffect(() => {\n    getSliderList();\n  }, [refresh]);\n  useEffect(() => {\n    if (saveSliderImagesState.apiState === \"success\") {\n      setRefresh(refresh + 1);\n      form.resetFields();\n      setFormData(initial_values);\n      setSubmitLoading(false);\n      message.success(saveSliderImagesState.message);\n    }\n\n    if (saveSliderImagesState.apiState === \"error\") {\n      saveSliderImagesReset();\n      setSubmitLoading(false);\n      message.error(saveSliderImagesState.message);\n    }\n  }, [saveSliderImagesState]);\n  useEffect(() => {\n    if (delSliderState.apiState === \"success\") {\n      setRefresh(refresh + 1);\n      message.success(delSliderState.message);\n    }\n\n    if (delSliderState.apiState === \"error\") {\n      delSliderReset();\n      message.error(delSliderState.message);\n    }\n  }, [delSliderState]);\n  useEffect(() => {\n    if (getSliderListState.apiState === \"success\") {\n      let ar = [];\n      getSliderListState.list.map(obj => {\n        ar.push({\n          key: obj.id,\n          image: obj.image,\n          mobile_image: obj.m_image,\n          sequence: obj.sequence,\n          id: obj.id\n        });\n      });\n      setTableData(ar);\n    }\n  }, [getSliderListState]);\n  /* functions */\n\n  const handleSubmit = async () => {\n    let banner_img_filename = uuidv4();\n    let m_banner_img_filename = uuidv4();\n    let bannerImageValRes = validateImageFile(banner_img);\n    let mBannerImageValRes = validateImageFile(m_banner_img);\n\n    if (!bannerImageValRes.status) {\n      alert(\"Banner Image's extension is not allowed.\");\n      return;\n    }\n\n    if (!mBannerImageValRes.status) {\n      alert(\"Mobile Banner Image's extension is not allowed.\");\n      return;\n    }\n\n    setSubmitLoading(true);\n    let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img);\n    await axios.put(s3UrlRes2.url, banner_img);\n    let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img);\n    await axios.put(s3UrlRes3.url, m_banner_img);\n    formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`;\n    formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`;\n    saveSliderImages(formData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    title: \"Home Page Sliders\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Upload, {\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n    listType: \"picture\",\n    maxCount: 1,\n    onChange: (...operators) => {\n      console.clear();\n      console.log(operators);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(UploadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 35\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }, \"Upload Banner Image\"))), /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Banner Image For Mobile\",\n    name: \"m_banner_img\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 40\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 3:2 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"m_banner_img\",\n    onChange: e => set_m_banner_img(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Sequence\",\n    name: \"sequence\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"sequence\",\n    placeholder: \"Enter Sequence\",\n    style: {\n      width: \"100%\"\n    },\n    onChange: v => setFormData({ ...formData,\n      [\"sequence\"]: v\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submitLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    dataSource: tableData,\n    columns: columns,\n    size: \"small\",\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  saveSliderImagesState: state.saveSliderImages,\n  getSliderListState: state.getSliderList,\n  delSliderState: state.delSlider\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveSliderImages: params => dispatch(saveSliderImages(params)),\n  saveSliderImagesReset: () => dispatch(saveSliderImagesReset()),\n  getSliderList: params => dispatch(getSliderList(params)),\n  getSliderListReset: () => dispatch(getSliderListReset()),\n  delSlider: params => dispatch(delSlider(params)),\n  delSliderReset: () => dispatch(delSliderReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/HomeSlider/HomeSlider.js"],"names":["React","useState","useEffect","Form","Input","Row","Col","TreeSelect","Button","message","InputNumber","Divider","Popconfirm","Table","Redirect","connect","v4","uuidv4","axios","DeleteOutlined","UploadOutlined","Space","Upload","Header","PageContainer","saveSliderImages","saveSliderImagesReset","getSliderList","getSliderListReset","delSlider","delSliderReset","validateImageFile","getS3SingedUrl","cnf","HomeSlider","props","saveSliderImagesState","getSliderListState","delSliderState","initial_values","banner_img","m_banner_img","sequence","formData","setFormData","redirect","setRedirect","set_banner_img","set_m_banner_img","submitLoading","setSubmitLoading","refresh","setRefresh","columns","title","dataIndex","key","render","image","s3_base_url","width","mobile_image","id","tableData","setTableData","form","useForm","apiState","resetFields","success","error","ar","list","map","obj","push","m_image","handleSubmit","banner_img_filename","m_banner_img_filename","bannerImageValRes","mBannerImageValRes","status","alert","s3UrlRes2","ext","put","url","s3UrlRes3","operators","console","clear","log","required","e","target","files","v","mapStateToProps","state","mapDispatchToProps","dispatch","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,MAA5C,EAAoDC,OAApD,EAA6DC,WAA7D,EAA0EC,OAA1E,EAAmFC,UAAnF,EAA+FC,KAA/F,QAA4G,MAA5G;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;AAEA;;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAGA;;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,qCAAxD;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,kCAAlD;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAGA;;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,aAAlD;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAKA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACxB;AACA,QAAM;AACFV,IAAAA,gBADE;AACgBC,IAAAA,qBADhB;AACuCU,IAAAA,qBADvC;AAEFT,IAAAA,aAFE;AAEaC,IAAAA,kBAFb;AAEiCS,IAAAA,kBAFjC;AAGFR,IAAAA,SAHE;AAGSC,IAAAA,cAHT;AAGyBQ,IAAAA;AAHzB,MAIFH,KAJJ;AAKA,QAAMI,cAAc,GAAG;AACnBC,IAAAA,UAAU,EAAE,EADO;AAEnBC,IAAAA,YAAY,EAAE,EAFK;AAGnBC,IAAAA,QAAQ,EAAE;AAHS,GAAvB;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B3C,QAAQ,CAACsC,cAAD,CAAxC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0B7C,QAAQ,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,CAAxC;AACA,QAAM,CAACuC,UAAD,EAAaO,cAAb,IAA+B9C,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACwC,YAAD,EAAeO,gBAAf,IAAmC/C,QAAQ,CAAC,IAAD,CAAjD;AACA,QAAM,CAACgD,aAAD,EAAgBC,gBAAhB,IAAoCjD,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACkD,OAAD,EAAUC,UAAV,IAAwBnD,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMoD,OAAO,GAAG,CACZ;AACIC,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,SAAS,EAAE,OAFf;AAGIC,IAAAA,GAAG,EAAE,OAHT;AAIIC,IAAAA,MAAM,EAAGC,KAAD,iBAAY;AAAK,MAAA,GAAG,EAAG,GAAEzB,GAAG,CAAC0B,WAAY,GAAED,KAAM,EAArC;AAAwC,MAAA,GAAG,EAAC,EAA5C;AAA+C,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJxB,GADY,EAOZ;AACIN,IAAAA,KAAK,EAAE,cADX;AAEIC,IAAAA,SAAS,EAAE,cAFf;AAGIC,IAAAA,GAAG,EAAE,cAHT;AAIIC,IAAAA,MAAM,EAAGI,YAAD,iBAAmB;AAAK,MAAA,GAAG,EAAG,GAAE5B,GAAG,CAAC0B,WAAY,GAAEE,YAAa,EAA5C;AAA+C,MAAA,GAAG,EAAC,EAAnD;AAAsD,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAE;AAAT,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJ/B,GAPY,EAaZ;AACIN,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,SAAS,EAAE,UAFf;AAGIC,IAAAA,GAAG,EAAE;AAHT,GAbY,EAkBZ;AACIF,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,SAAS,EAAE,IAFf;AAGIC,IAAAA,GAAG,EAAE,QAHT;AAIIC,IAAAA,MAAM,EAAGK,EAAD,iBACJ,oBAAC,UAAD;AACI,MAAA,KAAK,EAAC,qCADV;AAEI,MAAA,SAAS,EAAE,MAAMjC,SAAS,CAAC;AACvBiC,QAAAA,EAAE,EAAEA;AADmB,OAAD,CAF9B;AAKI,MAAA,MAAM,EAAC,QALX;AAMI,MAAA,UAAU,EAAC,QANf;AAOI,MAAA,MAAM,EAAC,QAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,IAAI,eAAE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ;AALR,GAlBY,CAAhB;AAqCA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B/D,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgE,IAAD,IAAS9D,IAAI,CAAC+D,OAAL,EAAf;AAEA;;AACAhE,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAQ,MAAM;AACVwB,MAAAA,qBAAqB;AACrBE,MAAAA,kBAAkB;AAClBE,MAAAA,cAAc;AACjB,KAJD;AAKH,GANQ,EAMN,EANM,CAAT;AAQA5B,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,aAAa;AAChB,GAFQ,EAEN,CAACwB,OAAD,CAFM,CAAT;AAIAjD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkC,qBAAqB,CAAC+B,QAAtB,KAAmC,SAAvC,EAAkD;AAC9Cf,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACAc,MAAAA,IAAI,CAACG,WAAL;AACAxB,MAAAA,WAAW,CAACL,cAAD,CAAX;AACAW,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAzC,MAAAA,OAAO,CAAC4D,OAAR,CAAgBjC,qBAAqB,CAAC3B,OAAtC;AACH;;AAED,QAAI2B,qBAAqB,CAAC+B,QAAtB,KAAmC,OAAvC,EAAgD;AAC5CzC,MAAAA,qBAAqB;AACrBwB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAzC,MAAAA,OAAO,CAAC6D,KAAR,CAAclC,qBAAqB,CAAC3B,OAApC;AACH;AACJ,GAdQ,EAcN,CAAC2B,qBAAD,CAdM,CAAT;AAiBAlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIoC,cAAc,CAAC6B,QAAf,KAA4B,SAAhC,EAA2C;AACvCf,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACA1C,MAAAA,OAAO,CAAC4D,OAAR,CAAgB/B,cAAc,CAAC7B,OAA/B;AACH;;AAED,QAAI6B,cAAc,CAAC6B,QAAf,KAA4B,OAAhC,EAAyC;AACrCrC,MAAAA,cAAc;AACdrB,MAAAA,OAAO,CAAC6D,KAAR,CAAchC,cAAc,CAAC7B,OAA7B;AACH;AACJ,GAVQ,EAUN,CAAC6B,cAAD,CAVM,CAAT;AAYApC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImC,kBAAkB,CAAC8B,QAAnB,KAAgC,SAApC,EAA+C;AAC3C,UAAII,EAAE,GAAG,EAAT;AACAlC,MAAAA,kBAAkB,CAACmC,IAAnB,CAAwBC,GAAxB,CAA4BC,GAAG,IAAI;AAC/BH,QAAAA,EAAE,CAACI,IAAH,CAAQ;AACJnB,UAAAA,GAAG,EAAEkB,GAAG,CAACZ,EADL;AAEJJ,UAAAA,KAAK,EAAEgB,GAAG,CAAChB,KAFP;AAGJG,UAAAA,YAAY,EAAEa,GAAG,CAACE,OAHd;AAIJlC,UAAAA,QAAQ,EAAEgC,GAAG,CAAChC,QAJV;AAKJoB,UAAAA,EAAE,EAAEY,GAAG,CAACZ;AALJ,SAAR;AAOH,OARD;AASAE,MAAAA,YAAY,CAACO,EAAD,CAAZ;AACH;AACJ,GAdQ,EAcN,CAAClC,kBAAD,CAdM,CAAT;AAgBA;;AACA,QAAMwC,YAAY,GAAG,YAAY;AAC7B,QAAIC,mBAAmB,GAAG7D,MAAM,EAAhC;AACA,QAAI8D,qBAAqB,GAAG9D,MAAM,EAAlC;AAEA,QAAI+D,iBAAiB,GAAGjD,iBAAiB,CAACS,UAAD,CAAzC;AACA,QAAIyC,kBAAkB,GAAGlD,iBAAiB,CAACU,YAAD,CAA1C;;AAGA,QAAI,CAACuC,iBAAiB,CAACE,MAAvB,EAA+B;AAC3BC,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACA;AACH;;AACD,QAAI,CAACF,kBAAkB,CAACC,MAAxB,EAAgC;AAC5BC,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACA;AACH;;AAEDjC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,QAAIkC,SAAS,GAAG,MAAMpD,cAAc,CAAC8C,mBAAD,EAAsBE,iBAAiB,CAACK,GAAxC,EAA6C7C,UAA7C,CAApC;AACA,UAAMtB,KAAK,CAACoE,GAAN,CAAUF,SAAS,CAACG,GAApB,EAAyB/C,UAAzB,CAAN;AAEA,QAAIgD,SAAS,GAAG,MAAMxD,cAAc,CAAC+C,qBAAD,EAAwBE,kBAAkB,CAACI,GAA3C,EAAgD5C,YAAhD,CAApC;AACA,UAAMvB,KAAK,CAACoE,GAAN,CAAUE,SAAS,CAACD,GAApB,EAAyB9C,YAAzB,CAAN;AAEAE,IAAAA,QAAQ,CAACH,UAAT,GAAuB,GAAEsC,mBAAoB,IAAGE,iBAAiB,CAACK,GAAI,EAAtE;AACA1C,IAAAA,QAAQ,CAACF,YAAT,GAAyB,GAAEsC,qBAAsB,IAAGE,kBAAkB,CAACI,GAAI,EAA3E;AAEA5D,IAAAA,gBAAgB,CAACkB,QAAD,CAAhB;AACH,GA7BD;;AAmCA,sBACI,0CACKE,QAAQ,CAAC,CAAD,CAAR,iBACG,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,QAAQ,CAAC,CAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAII,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,mBADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAOI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEoB,IAAZ;AAAkB,IAAA,MAAM,EAAC,UAAzB;AAAoC,IAAA,QAAQ,EAAEY,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,MAAD;AACJ,IAAA,MAAM,EAAC,kDADH;AAEJ,IAAA,QAAQ,EAAC,SAFL;AAGJ,IAAA,QAAQ,EAAE,CAHN;AAIJ,IAAA,QAAQ,EAAE,CAAC,GAAGY,SAAJ,KAAkB;AAAEC,MAAAA,OAAO,CAACC,KAAR;AAAiBD,MAAAA,OAAO,CAACE,GAAR,CAAYH,SAAZ;AAAyB,KAJpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMJ,oBAAC,MAAD;AAAQ,IAAA,IAAI,eAAE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BANI,CADA,CADJ,eAqBI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,yBADV;AAEI,IAAA,IAAI,EAAC,cAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEI,MAAAA,QAAQ,EAAE,IAAZ;AAAkBpF,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAII,IAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,cAAxB;AACI,IAAA,QAAQ,EAAEqF,CAAC,IAAI9C,gBAAgB,CAAC8C,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CArBJ,eAiCI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEH,MAAAA,QAAQ,EAAE,IAAZ;AAAkBpF,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC,UAAlB;AAA6B,IAAA,WAAW,EAAC,gBAAzC;AACI,IAAA,KAAK,EAAE;AAAEmD,MAAAA,KAAK,EAAE;AAAT,KADX;AAEI,IAAA,QAAQ,EAAEqC,CAAC,IAAIrD,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,OAAC,UAAD,GAAcsD;AAA7B,KAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,CAjCJ,CADJ,eA+CI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEhD,aAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/CJ,CAbJ,eA+DI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/DJ,eAgEI,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEc,SAAnB;AAA8B,IAAA,OAAO,EAAEV,OAAvC;AAAgD,IAAA,IAAI,EAAC,OAArD;AAA6D,IAAA,UAAU,EAAE,KAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhEJ,CAPJ,CADJ;AA4EH,CApOD;;AAsOA,MAAM6C,eAAe,GAAIC,KAAD,KAAY;AAChC/D,EAAAA,qBAAqB,EAAE+D,KAAK,CAAC1E,gBADG;AAEhCY,EAAAA,kBAAkB,EAAE8D,KAAK,CAACxE,aAFM;AAGhCW,EAAAA,cAAc,EAAE6D,KAAK,CAACtE;AAHU,CAAZ,CAAxB;;AAMA,MAAMuE,kBAAkB,GAAIC,QAAD,KAAe;AACtC5E,EAAAA,gBAAgB,EAAG6E,MAAD,IAAYD,QAAQ,CAAC5E,gBAAgB,CAAC6E,MAAD,CAAjB,CADA;AAEtC5E,EAAAA,qBAAqB,EAAE,MAAM2E,QAAQ,CAAC3E,qBAAqB,EAAtB,CAFC;AAGtCC,EAAAA,aAAa,EAAG2E,MAAD,IAAYD,QAAQ,CAAC1E,aAAa,CAAC2E,MAAD,CAAd,CAHG;AAItC1E,EAAAA,kBAAkB,EAAE,MAAMyE,QAAQ,CAACzE,kBAAkB,EAAnB,CAJI;AAKtCC,EAAAA,SAAS,EAAGyE,MAAD,IAAYD,QAAQ,CAACxE,SAAS,CAACyE,MAAD,CAAV,CALO;AAMtCxE,EAAAA,cAAc,EAAE,MAAMuE,QAAQ,CAACvE,cAAc,EAAf;AANQ,CAAf,CAA3B;;AASA,eAAef,OAAO,CAACmF,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClE,UAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Space, Upload } from 'antd';\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { saveSliderImages, saveSliderImagesReset } from \"../../action/saveSliderImagesAction\"\nimport { getSliderList, getSliderListReset } from \"../../action/getSliderListAction\"\nimport { delSlider, delSliderReset } from \"../../action/delSliderAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\n\n\n\nconst HomeSlider = props => {\n    /* variables */\n    const {\n        saveSliderImages, saveSliderImagesReset, saveSliderImagesState,\n        getSliderList, getSliderListReset, getSliderListState,\n        delSlider, delSliderReset, delSliderState,\n    } = props\n    const initial_values = {\n        banner_img: \"\",\n        m_banner_img: \"\",\n        sequence: 0,\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 100 }} />)\n        },\n        {\n            title: 'Mobile Image',\n            dataIndex: 'mobile_image',\n            key: 'mobile_image',\n            render: (mobile_image) => (<img src={`${cnf.s3_base_url}${mobile_image}`} alt=\"\" style={{ width: 100 }} />)\n        },\n        {\n            title: 'Sequence',\n            dataIndex: 'sequence',\n            key: 'sequence',\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Popconfirm\n                    title=\"Are you sure to delete this slider?\"\n                    onConfirm={() => delSlider({\n                        id: id,\n                    })}\n                    okText=\"Delete\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            )\n        }\n    ];\n    const [tableData, setTableData] = useState([])\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            saveSliderImagesReset()\n            getSliderListReset()\n            delSliderReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getSliderList()\n    }, [refresh])\n\n    useEffect(() => {\n        if (saveSliderImagesState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(saveSliderImagesState.message);\n        }\n\n        if (saveSliderImagesState.apiState === \"error\") {\n            saveSliderImagesReset()\n            setSubmitLoading(false)\n            message.error(saveSliderImagesState.message);\n        }\n    }, [saveSliderImagesState])\n\n\n    useEffect(() => {\n        if (delSliderState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            message.success(delSliderState.message);\n        }\n\n        if (delSliderState.apiState === \"error\") {\n            delSliderReset()\n            message.error(delSliderState.message);\n        }\n    }, [delSliderState])\n\n    useEffect(() => {\n        if (getSliderListState.apiState === \"success\") {\n            let ar = []\n            getSliderListState.list.map(obj => {\n                ar.push({\n                    key: obj.id,\n                    image: obj.image,\n                    mobile_image: obj.m_image,\n                    sequence: obj.sequence,\n                    id: obj.id,\n                })\n            })\n            setTableData(ar)\n        }\n    }, [getSliderListState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let bannerImageValRes = validateImageFile(banner_img)\n        let mBannerImageValRes = validateImageFile(m_banner_img)\n\n\n        if (!bannerImageValRes.status) {\n            alert(\"Banner Image's extension is not allowed.\")\n            return\n        }\n        if (!mBannerImageValRes.status) {\n            alert(\"Mobile Banner Image's extension is not allowed.\")\n            return\n        }\n\n        setSubmitLoading(true)\n\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n        await axios.put(s3UrlRes2.url, banner_img)\n\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n        await axios.put(s3UrlRes3.url, m_banner_img)\n\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n\n        saveSliderImages(formData)\n    }\n\n\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Home Page Sliders\"\n            />\n            <PageContainer>\n\n            {/* <Space direction=\"vertical\" style={{ width: '20%', }} size=\"large\">\n                <Upload\n                    action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                    listType=\"picture\"\n                    maxCount={1}\n                    onChange={(...operators) => { console.clear(); console.log(operators); }}\n                >\n                    <Button icon={<UploadOutlined />} >Upload Banner Image</Button>\n                </Upload>\n            </Space> */}\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n                        <Col span=\"8\">\n                        <Upload\n                    action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                    listType=\"picture\"\n                    maxCount={1}\n                    onChange={(...operators) => { console.clear(); console.log(operators); }}\n                >\n                    <Button icon={<UploadOutlined />} >Upload Banner Image</Button>\n                </Upload>\n                            {/* <Form.Item\n                                label=\"Banner Image\"\n                                name=\"banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item> */}\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Banner Image For Mobile\"\n                                name=\"m_banner_img\"\n                                rules={[{ required: true, message: 'Required' }]}\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"m_banner_img\"\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"4\">\n                            <Form.Item\n                                label=\"Sequence\"\n                                name=\"sequence\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, [\"sequence\"]: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n\n                <Divider />\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    saveSliderImagesState: state.saveSliderImages,\n    getSliderListState: state.getSliderList,\n    delSliderState: state.delSlider,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    saveSliderImages: (params) => dispatch(saveSliderImages(params)),\n    saveSliderImagesReset: () => dispatch(saveSliderImagesReset()),\n    getSliderList: (params) => dispatch(getSliderList(params)),\n    getSliderListReset: () => dispatch(getSliderListReset()),\n    delSlider: (params) => dispatch(delSlider(params)),\n    delSliderReset: () => dispatch(delSliderReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)"]},"metadata":{},"sourceType":"module"}
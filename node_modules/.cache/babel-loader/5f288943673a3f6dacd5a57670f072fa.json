{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/Testimonial/Testimonial.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { DeleteOutlined } from \"@ant-design/icons\";\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\n/* action */\n\nimport { saveTestimonial, saveTestimonialReset } from \"../../action/saveTestimonialAction\";\nimport { getTestimonialList, getTestimonialListReset } from \"../../action/getTestimonialListAction\";\nimport { delTestimonial, delTestimonialReset } from \"../../action/delTestimonialAction\";\n/* others */\n\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\";\nimport cnf from \"../../config\";\n\nconst Testimonial = props => {\n  /* variables */\n  const {\n    saveTestimonial,\n    saveTestimonialReset,\n    saveTestimonialState,\n    getTestimonialList,\n    getTestimonialListReset,\n    getTestimonialListState,\n    delTestimonial,\n    delTestimonialReset,\n    delTestimonialState\n  } = props;\n  const initial_values = {\n    description: \"\",\n    image: \"\",\n    name: \"\",\n    title: \"\",\n    sequence: 1\n  };\n  const [formData, setFormData] = useState(initial_values);\n  const [redirect, setRedirect] = useState([false, '']);\n  const [image, set_image] = useState(null);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [refresh, setRefresh] = useState(0);\n  const columns = [{\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description'\n  }, {\n    title: 'Image',\n    dataIndex: 'image',\n    key: 'image',\n    render: image => /*#__PURE__*/React.createElement(\"img\", {\n      src: `${cnf.s3_base_url}${image}`,\n      alt: \"\",\n      style: {\n        width: 50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 33\n      }\n    })\n  }, {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title'\n  }, {\n    title: 'Action',\n    dataIndex: 'id',\n    key: 'action',\n    render: id => /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure to delete this testimonial?\",\n      onConfirm: () => delTestimonial({\n        id: id\n      }),\n      okText: \"Delete\",\n      cancelText: \"Cancel\",\n      okType: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"small\",\n      icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 48\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }))\n  }];\n  const [tableData, setTableData] = useState([]);\n  const [form] = Form.useForm();\n  /* callbakcs */\n\n  useEffect(() => {\n    return () => {\n      saveTestimonialReset();\n      getTestimonialListReset();\n      delTestimonialReset();\n    };\n  }, []);\n  useEffect(() => {\n    getTestimonialList();\n  }, [refresh]);\n  useEffect(() => {\n    if (saveTestimonialState.apiState === \"success\") {\n      setRefresh(refresh + 1);\n      form.resetFields();\n      setFormData(initial_values);\n      setSubmitLoading(false);\n      message.success(saveTestimonialState.message);\n    }\n\n    if (saveTestimonialState.apiState === \"error\") {\n      saveTestimonialReset();\n      setSubmitLoading(false);\n      message.error(saveTestimonialState.message);\n    }\n  }, [saveTestimonialState]);\n  useEffect(() => {\n    if (delTestimonialState.apiState === \"success\") {\n      setRefresh(refresh + 1);\n      message.success(delTestimonialState.message);\n    }\n\n    if (delTestimonialState.apiState === \"error\") {\n      delTestimonialReset();\n      message.error(delTestimonialState.message);\n    }\n  }, [delTestimonialState]);\n  useEffect(() => {\n    if (getTestimonialListState.apiState === \"success\") {\n      let ar = [];\n      getTestimonialListState.list.map(obj => {\n        ar.push({\n          key: obj.id,\n          description: obj.description,\n          image: obj.image,\n          name: obj.name,\n          title: obj.title,\n          id: obj.id\n        });\n      });\n      setTableData(ar);\n    }\n  }, [getTestimonialListState]);\n  /* functions */\n\n  const handleSubmit = async () => {\n    let image_filename;\n    let imageValRes;\n\n    if (image) {\n      image_filename = uuidv4();\n      imageValRes = validateImageFile(image);\n\n      if (!imageValRes.status) {\n        alert(\"Image's extension is not allowed.\");\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n\n    if (image) {\n      let s3UrlRes = await getS3SingedUrl(image_filename, imageValRes.ext, image);\n      await axios.put(s3UrlRes.url, image);\n      formData.image = `${image_filename}.${imageValRes.ext}`;\n    }\n\n    saveTestimonial(formData);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    title: \"Home Page Testimonials\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Description\",\n    name: \"description\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    name: \"description\",\n    placeholder: \"Enter Description\",\n    onChange: e => setFormData({ ...formData,\n      ['description']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Image\",\n    name: \"image\",\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 40\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 1:1 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"image\",\n    onChange: e => set_image(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Name\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"name\",\n    placeholder: \"Enter Name\",\n    onChange: e => setFormData({ ...formData,\n      ['name']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"title\",\n    placeholder: \"Enter Title\",\n    onChange: e => setFormData({ ...formData,\n      ['title']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Sequence\",\n    name: \"sequence\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"sequence\",\n    placeholder: \"Enter Sequence\",\n    style: {\n      width: \"100%\"\n    },\n    onChange: v => setFormData({ ...formData,\n      ['sequence']: v\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submitLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    dataSource: tableData,\n    columns: columns,\n    size: \"small\",\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  })));\n};\n\nconst mapStateToProps = state => ({\n  saveTestimonialState: state.saveTestimonial,\n  getTestimonialListState: state.getTestimonialList,\n  delTestimonialState: state.delTestimonial\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveTestimonial: params => dispatch(saveTestimonial(params)),\n  saveTestimonialReset: () => dispatch(saveTestimonialReset()),\n  getTestimonialList: params => dispatch(getTestimonialList(params)),\n  getTestimonialListReset: () => dispatch(getTestimonialListReset()),\n  delTestimonial: params => dispatch(delTestimonial(params)),\n  delTestimonialReset: () => dispatch(delTestimonialReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Testimonial);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/Testimonial/Testimonial.js"],"names":["React","useState","useEffect","Form","Input","Row","Col","TreeSelect","Button","message","InputNumber","Divider","Popconfirm","Table","Redirect","connect","v4","uuidv4","axios","DeleteOutlined","Header","PageContainer","saveTestimonial","saveTestimonialReset","getTestimonialList","getTestimonialListReset","delTestimonial","delTestimonialReset","validateImageFile","getS3SingedUrl","cnf","Testimonial","props","saveTestimonialState","getTestimonialListState","delTestimonialState","initial_values","description","image","name","title","sequence","formData","setFormData","redirect","setRedirect","set_image","submitLoading","setSubmitLoading","refresh","setRefresh","columns","dataIndex","key","render","s3_base_url","width","id","tableData","setTableData","form","useForm","apiState","resetFields","success","error","ar","list","map","obj","push","handleSubmit","image_filename","imageValRes","status","alert","s3UrlRes","ext","put","url","required","e","target","value","files","v","mapStateToProps","state","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { DeleteOutlined } from \"@ant-design/icons\"\n\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n\n/* action */\nimport { saveTestimonial, saveTestimonialReset } from \"../../action/saveTestimonialAction\"\nimport { getTestimonialList, getTestimonialListReset } from \"../../action/getTestimonialListAction\"\nimport { delTestimonial, delTestimonialReset } from \"../../action/delTestimonialAction\"\n\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst Testimonial = props => {\n    /* variables */\n    const {\n        saveTestimonial, saveTestimonialReset, saveTestimonialState,\n        getTestimonialList, getTestimonialListReset, getTestimonialListState,\n        delTestimonial, delTestimonialReset, delTestimonialState,\n    } = props\n    const initial_values = {\n        description: \"\",\n        image: \"\",\n        name: \"\",\n        title: \"\",\n        sequence: 1,\n    }\n    const [formData, setFormData] = useState(initial_values)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [image, set_image] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [refresh, setRefresh] = useState(0)\n    const columns = [\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            key: 'title',\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'action',\n            render: (id) => (\n                <Popconfirm\n                    title=\"Are you sure to delete this testimonial?\"\n                    onConfirm={() => delTestimonial({\n                        id: id,\n                    })}\n                    okText=\"Delete\"\n                    cancelText=\"Cancel\"\n                    okType=\"danger\"\n                >\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n            )\n        }\n    ];\n    const [tableData, setTableData] = useState([])\n    const [form] = Form.useForm()\n\n    /* callbakcs */\n    useEffect(() => {\n        return (() => {\n            saveTestimonialReset()\n            getTestimonialListReset()\n            delTestimonialReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getTestimonialList()\n    }, [refresh])\n\n    useEffect(() => {\n        if (saveTestimonialState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            form.resetFields()\n            setFormData(initial_values)\n            setSubmitLoading(false)\n            message.success(saveTestimonialState.message);\n        }\n\n        if (saveTestimonialState.apiState === \"error\") {\n            saveTestimonialReset()\n            setSubmitLoading(false)\n            message.error(saveTestimonialState.message);\n        }\n    }, [saveTestimonialState])\n\n\n    useEffect(() => {\n        if (delTestimonialState.apiState === \"success\") {\n            setRefresh(refresh + 1)\n            message.success(delTestimonialState.message);\n        }\n\n        if (delTestimonialState.apiState === \"error\") {\n            delTestimonialReset()\n            message.error(delTestimonialState.message);\n        }\n    }, [delTestimonialState])\n\n    useEffect(() => {\n        if (getTestimonialListState.apiState === \"success\") {\n            let ar = []\n            getTestimonialListState.list.map(obj => {\n                ar.push({\n                    key: obj.id,\n                    description: obj.description,\n                    image: obj.image,\n                    name: obj.name,\n                    title: obj.title,\n                    id: obj.id,\n                })\n            })\n            setTableData(ar)\n        }\n    }, [getTestimonialListState])\n\n    /* functions */\n    const handleSubmit = async () => {\n        let image_filename\n        let imageValRes\n        if (image) {\n            image_filename = uuidv4()\n            imageValRes = validateImageFile(image)\n            if (!imageValRes.status) {\n                alert(\"Image's extension is not allowed.\")\n                return\n            }\n        }\n\n\n        setSubmitLoading(true)\n\n        if (image) {\n            let s3UrlRes = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n            await axios.put(s3UrlRes.url, image)\n\n            formData.image = `${image_filename}.${imageValRes.ext}`\n        }\n\n        saveTestimonial(formData)\n    }\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Home Page Testimonials\"\n            />\n            <PageContainer>\n\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\n                    <Row gutter=\"24\" >\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Description\"\n                                name=\"description\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\n                                    onChange={e => setFormData({ ...formData, ['description']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Image\"\n                                name=\"image\"\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                            >\n                                <Input type=\"file\" name=\"image\"\n                                    onChange={e => set_image(e.target.files[0])}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[{ required: true, message: 'Required' }]}\n                            >\n                                <Input name=\"name\" placeholder=\"Enter Name\"\n                                    onChange={e => setFormData({ ...formData, ['name']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"8\">\n                            <Form.Item\n                                label=\"Title\"\n                                name=\"title\"\n                            >\n                                <Input name=\"title\" placeholder=\"Enter Title\"\n                                    onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\n                                />\n                            </Form.Item>\n                        </Col>\n                        <Col span=\"4\">\n                            <Form.Item\n                                label=\"Sequence\"\n                                name=\"sequence\"\n                            >\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\n                                    style={{ width: \"100%\" }}\n                                    onChange={v => setFormData({ ...formData, ['sequence']: v })}\n                                />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n                </Form>\n\n                <Divider />\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    saveTestimonialState: state.saveTestimonial,\n    getTestimonialListState: state.getTestimonialList,\n    delTestimonialState: state.delTestimonial,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    saveTestimonial: (params) => dispatch(saveTestimonial(params)),\n    saveTestimonialReset: () => dispatch(saveTestimonialReset()),\n    getTestimonialList: (params) => dispatch(getTestimonialList(params)),\n    getTestimonialListReset: () => dispatch(getTestimonialListReset()),\n    delTestimonial: (params) => dispatch(delTestimonial(params)),\n    delTestimonialReset: () => dispatch(delTestimonialReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Testimonial)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"/home/kuldeep/Git Hub/Vemshala-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kuldeep/Git Hub/Vemshala-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/kuldeep/Git Hub/Vemshala-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";// @custom-component-imports ------------------------------------------------------------------------ \nimport DataTable from'react-data-table-component';import DataTableExtensions from'react-data-table-component-extensions';import'react-data-table-component-extensions/dist/index.css';import{Button,Modal,notification}from'antd';import{ExclamationCircleOutlined}from'@ant-design/icons';import Header from\"../../component/Header/Header\";import{PageContainer}from\"../../component/Xcomponent\";import Mount from'../../modules/Mount';import updateStatus from\"../../api/updateCustomerStatus\";import sendEmail from\"../../api/sendCustomerEmail\";// @actions-imports ----------------------------------------------------------------------------------\nimport{getOrderList as _getOrderList,getOrderListReset as _getOrderListReset}from\"../../action/getOrderListAction\";import{getCustomerList as _getCustomerList,getCustomerListReset as _getCustomerListReset}from\"../../action/getCustomerListAction\";//-----------------------------------------------------------------------------------------------------\nvar CustomerList=function CustomerList(props){console.clear();console.log(props);var getCustomerList=props.getCustomerList,getCustomerListState=props.getCustomerListState;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tableData=_useState2[0],setTableData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),selectedRows=_useState4[0],setSelectedRows=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),clearSelectedRows=_useState6[0],updateClearSelectedRows=_useState6[1];var openNotificationWithIcon=function openNotificationWithIcon(type,message){var description=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"\";notification[type]({message:message,description:description});};var showStatusChangeModal=function showStatusChangeModal(data){if(data.status==='Active'){data.status='Deactivate';data.message=\"Do you really want to deactivate \".concat(data.name,\" ?\");}else{data.status='Active';data.message=\"Do you really want to activate \".concat(data.name,\" ?\");}Modal.confirm({title:'Confirm',icon:/*#__PURE__*/React.createElement(ExclamationCircleOutlined,null),content:data.message,okText:'Yes',cancelText:'No',onOk:function onOk(){updateCustomerStatus(data);/* call update-status api */}});};var showEmailConfirmationModal=function showEmailConfirmationModal(){Modal.confirm({title:'Confirm',icon:/*#__PURE__*/React.createElement(ExclamationCircleOutlined,null),content:'Do you really want to send email ?',okText:'Yes',cancelText:'No',onOk:function onOk(){sendCustomerEmail(selectedRows);}});};var _useState7=useState([{name:'Customer Name',cell:function cell(data){return String(data.name);},sortable:true},{name:'Customer Email',cell:function cell(data){return String(data.email);},sortable:true},{name:'Customer Contact No.',cell:function cell(data){return String(data.contact_no);},sortable:true},{name:'Customer Status',cell:function cell(data){return String(data.status);},sortable:true},{name:'Register Date',cell:function cell(data){return String(data.date);},sortable:true},{name:'Action',cell:function cell(data){return/*#__PURE__*/React.createElement(Button,{className:data.status==='Active'?'deactivate':'active',onClick:function onClick(){return showStatusChangeModal(data);}},data.status==='Active'?'Deactivate':'Activate');},sortable:true,export:false}]),_useState8=_slicedToArray(_useState7,2),columns=_useState8[0],setColumns=_useState8[1];/* @api-call -------------------------------------------------------------------------------------------------*/var sendCustomerEmail=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var serverResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return sendEmail(data);case 3:serverResponse=_context.sent;if(!(serverResponse.status==='error')){_context.next=6;break;}throw new Error();case 6:openNotificationWithIcon('success','Send Email','Email send successfully');updateClearSelectedRows(true);/* clear selected rows */setSelectedRows([]);/* clear selected rows */_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);openNotificationWithIcon('error','Send Email','Sorry email could not send to customer');case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function sendCustomerEmail(_x){return _ref.apply(this,arguments);};}();var updateCustomerStatus=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data){var serverResponse;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return updateStatus(data);case 3:serverResponse=_context2.sent;if(!(serverResponse.status==='error')){_context2.next=6;break;}throw new Error();case 6:openNotificationWithIcon('success','Customer status','Customer status updated successfully');getCustomerList();/* refresh customers list */_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);openNotificationWithIcon('error','Customer status','Customer status could not update');case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,10]]);}));return function updateCustomerStatus(_x2){return _ref2.apply(this,arguments);};}();/* callbacks -------------------------------------------------------------------------------------------------*/useEffect(function(){getCustomerList();},[]);useEffect(function(){if(getCustomerListState.apiState===\"success\"){var customerList=getCustomerListState.list.map(function(data){var serverDate=function serverDate(date){return date.toISOString().slice(0,10);};data.created_at=serverDate(new Date(data.created_at));return{id:data.id,name:data.name,email:data.email,date:data.created_at,status:data.status,contact_no:data.contact_no};});setTableData(customerList);}},[getCustomerListState]);/* ----------------------------------------------------------------------------------------------------------*/return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,{title:\"Customer List\"}),/*#__PURE__*/React.createElement(PageContainer,null,/*#__PURE__*/React.createElement(Mount,{condition:selectedRows.length>0},/*#__PURE__*/React.createElement(\"div\",{className:\"email-container\"},/*#__PURE__*/React.createElement(Button,{className:\"active\",onClick:showEmailConfirmationModal},\"Send Email\"))),/*#__PURE__*/React.createElement(DataTableExtensions,{print:false,exportHeaders:true,columns:columns,data:tableData},/*#__PURE__*/React.createElement(DataTable,{noHeader:true,defaultSortField:\"id\",defaultSortAsc:false,pagination:true,highlightOnHover:true,exportHeaders:true,selectableRows:true,onSelectedRowsChange:function onSelectedRowsChange(data){updateClearSelectedRows(false);setSelectedRows(data.selectedRows);},clearSelectedRows:clearSelectedRows}))));};var mapStateToProps=function mapStateToProps(state){return{getOrderListState:state.getOrderList,getCustomerListState:state.getCustomerList};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getOrderList:function getOrderList(params){return dispatch(_getOrderList(params));},getOrderListReset:function getOrderListReset(){return dispatch(_getOrderListReset());},getCustomerList:function getCustomerList(params){return dispatch(_getCustomerList(params));},getCustomerListReset:function getCustomerListReset(){return dispatch(_getCustomerListReset());}};};export default connect(mapStateToProps,mapDispatchToProps)(CustomerList);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js"],"names":["React","useEffect","useState","connect","DataTable","DataTableExtensions","Button","Modal","notification","ExclamationCircleOutlined","Header","PageContainer","Mount","updateStatus","sendEmail","getOrderList","getOrderListReset","getCustomerList","getCustomerListReset","CustomerList","props","console","clear","log","getCustomerListState","tableData","setTableData","selectedRows","setSelectedRows","clearSelectedRows","updateClearSelectedRows","openNotificationWithIcon","type","message","description","showStatusChangeModal","data","status","name","confirm","title","icon","content","okText","cancelText","onOk","updateCustomerStatus","showEmailConfirmationModal","sendCustomerEmail","cell","String","sortable","email","contact_no","date","export","columns","setColumns","serverResponse","Error","apiState","customerList","list","map","serverDate","toISOString","slice","created_at","Date","id","length","mapStateToProps","state","getOrderListState","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n    import { Button, Modal,notification   } from 'antd'\n    import { ExclamationCircleOutlined } from '@ant-design/icons';\n \n    import Header from \"../../component/Header/Header\"\n    import { PageContainer } from \"../../component/Xcomponent\"\n    import Mount from '../../modules/Mount'\n\n    import updateStatus from \"../../api/updateCustomerStatus\";\n    import sendEmail    from \"../../api/sendCustomerEmail\"\n\n// @actions-imports ----------------------------------------------------------------------------------\n\n    import { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n    import { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\n \n//-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n\n  console.clear(); console.log(props)\n   \n    const { getCustomerList, getCustomerListState } = props\n    const [tableData, setTableData] = useState([])\n    const [selectedRows,setSelectedRows] = useState([])\n    const [clearSelectedRows,updateClearSelectedRows] = useState(false)\n\n    const openNotificationWithIcon = (type,message,description = \"\") => {\n        notification[type]({\n          message     : message,\n          description : description,\n        });\n    };\n  \n    const showStatusChangeModal = (data) => {\n\n        if(data.status === 'Active') {\n\n            data.status  = 'Deactivate'\n            data.message = `Do you really want to deactivate ${data.name} ?`\n        }\n\n        else { \n            data.status  = 'Active'\n            data.message = `Do you really want to activate ${data.name} ?`\n        }\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: data.message,\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { updateCustomerStatus(data) /* call update-status api */ },\n        });\n    };\n\n    const showEmailConfirmationModal = () => {\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: 'Do you really want to send email ?',\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { sendCustomerEmail(selectedRows) },\n        });\n    };\n\n    const [columns,setColumns] = useState([{\n            name: 'Customer Name',\n            cell: data => String(data.name),\n            sortable: true,\n        },{\n            name: 'Customer Email',\n            cell: data => String(data.email),\n            sortable: true,\n        },{\n            name: 'Customer Contact No.',\n            cell: data => String(data.contact_no),\n            sortable: true,\n        },{\n            name: 'Customer Status',\n            cell: data => String(data.status),\n            sortable: true,\n        },{\n            name: 'Register Date',\n            cell: data => String(data.date),\n            sortable: true,\n        },{\n            name: 'Action',\n            cell: data => <Button className={ data.status === 'Active' ? 'deactivate' : 'active' } onClick={() => showStatusChangeModal(data)}>{ data.status === 'Active' ? 'Deactivate' : 'Activate' }</Button>,\n            sortable: true,\n            export:false,\n        }\n    ])\n\n/* @api-call -------------------------------------------------------------------------------------------------*/ \n\n    const sendCustomerEmail = async(data) => {\n\n        try {\n\n            const serverResponse = await sendEmail(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Send Email','Email send successfully');\n\n            updateClearSelectedRows(true) /* clear selected rows */\n\n            setSelectedRows([]) /* clear selected rows */\n\n        } catch (error) { openNotificationWithIcon('error','Send Email','Sorry email could not send to customer') }\n    }\n\n    const updateCustomerStatus = async(data) => {\n\n        try {\n\n            const serverResponse = await updateStatus(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Customer status','Customer status updated successfully');\n\n            getCustomerList() /* refresh customers list */\n            \n        } catch (error) { openNotificationWithIcon('error','Customer status','Customer status could not update') }\n    }\n\n/* callbacks -------------------------------------------------------------------------------------------------*/\n\n    useEffect(() => { getCustomerList()}, [])\n    useEffect(() => {\n        \n        if (getCustomerListState.apiState === \"success\") {\n\n            const customerList = getCustomerListState.list.map(data => {\n\n                const serverDate = date => date.toISOString().slice(0, 10);\n\n                data.created_at = serverDate(new Date(data.created_at))\n       \n                return  {\n                    id     : data.id,\n                    name   : data.name,\n                    email  : data.email,\n                    date   : data.created_at,\n                    status : data.status,\n                    contact_no: data.contact_no,\n                }\n            })\n\n            setTableData(customerList);\n        }\n    }, [getCustomerListState])\n\n/* ----------------------------------------------------------------------------------------------------------*/\n\n    return (\n        <React.Fragment>\n            <Header title=\"Customer List\"/>\n            <PageContainer>\n                <Mount condition={selectedRows.length > 0 }>\n                    <div className=\"email-container\">\n                        <Button className=\"active\" onClick={showEmailConfirmationModal}>Send Email</Button>\n                    </div>\n                </Mount>     \n             \n                <DataTableExtensions print={false} exportHeaders={true} columns={columns} data={tableData} >\n                    <DataTable\n                        noHeader\n                        defaultSortField=\"id\"\n                        defaultSortAsc={false}\n                        pagination\n                        highlightOnHover\n                        exportHeaders={true}\n                        selectableRows={true}\n                        onSelectedRowsChange={(data) => { updateClearSelectedRows(false); setSelectedRows(data.selectedRows) }}\n                        clearSelectedRows={clearSelectedRows}\n                    />\n                </DataTableExtensions>\n            </PageContainer>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = (state) => ({\n    getOrderListState    : state.getOrderList,\n    getCustomerListState : state.getCustomerList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList:         (params) => dispatch(getOrderList(params)),\n    getOrderListReset:    ()       => dispatch(getOrderListReset()),\n    getCustomerList:      (params) => dispatch(getCustomerList(params)),\n    getCustomerListReset: ()       => dispatch(getCustomerListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)"]},"metadata":{},"sourceType":"module"}
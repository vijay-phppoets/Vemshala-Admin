{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryList/CategoryList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Tree, Skeleton, Space, Popconfirm, message } from \"antd\";\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\n/* action */\n\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\";\nimport { deleteCategory, deleteCategoryReset } from \"../../action/deleteCategoryAction\";\n/* others */\n\nimport cnf from \"../../config\";\n\nconst CategoryList = props => {\n  /* variables */\n  const {\n    getCategoryTree,\n    getCategoryTreeReset,\n    getCategoryTreeState,\n    deleteCategory,\n    deleteCategoryReset,\n    deleteCategoryState\n  } = props;\n  const [redirect, setRedirect] = useState([false, \"\"]);\n  const [refresh, setRefresh] = useState(0);\n  /* callbacks */\n\n  useEffect(() => {\n    getCategoryTree();\n  }, [refresh]);\n  useEffect(() => {\n    if (deleteCategoryState.apiState === \"success\") {\n      message.success(deleteCategoryState.message);\n      deleteCategoryReset();\n      setRefresh(refresh + 1);\n    }\n\n    if (deleteCategoryState.apiState === \"error\") {\n      message.error(deleteCategoryState.message);\n      deleteCategoryReset();\n    }\n  }, [deleteCategoryState]);\n  /* functions */\n\n  const getTreeData = tree => {\n    let finalArray = [];\n    tree.map(node => {\n      if (node.children.length > 0) {\n        finalArray.push({\n          title: /*#__PURE__*/React.createElement(Space, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: `${cnf.s3_base_url}${node.image}`,\n            alt: \"\",\n            style: {\n              width: 40\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }\n          }, node.name), /*#__PURE__*/React.createElement(Link, {\n            to: `/category/${node.id}/edit`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: \"small\",\n            icon: /*#__PURE__*/React.createElement(EditOutlined, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 95\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 68\n            }\n          })), /*#__PURE__*/React.createElement(Popconfirm, {\n            title: \"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\",\n            onConfirm: () => deleteCategory({\n              category_id: node.id\n            }),\n            okText: \"Delete\",\n            cancelText: \"Cancel\",\n            okType: \"danger\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: \"small\",\n            icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 60\n              }\n            }),\n            loading: deleteCategoryState.apiState === \"loading\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }\n          }))),\n          key: node.id,\n          children: getTreeData(node.children)\n        });\n      } else {\n        finalArray.push({\n          title: /*#__PURE__*/React.createElement(Space, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: `${cnf.s3_base_url}${node.image}`,\n            alt: \"\",\n            style: {\n              width: 40\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }\n          }, node.name), /*#__PURE__*/React.createElement(Link, {\n            to: `/category/${node.id}/edit`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: \"small\",\n            icon: /*#__PURE__*/React.createElement(EditOutlined, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 95\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 68\n            }\n          })), /*#__PURE__*/React.createElement(Popconfirm, {\n            title: \"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\",\n            onConfirm: () => deleteCategory({\n              category_id: node.id\n            }),\n            okText: \"Delete\",\n            cancelText: \"Cancel\",\n            okType: \"danger\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            size: \"small\",\n            icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 60\n              }\n            }),\n            loading: deleteCategoryState.apiState === \"loading\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }\n          }))),\n          key: node.id\n        });\n      }\n    });\n    return finalArray;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    title: \"Category List\",\n    actionBtn: /*#__PURE__*/React.createElement(Link, {\n      to: \"/category/add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 53\n      }\n    }, \"New\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, getCategoryTreeState.apiState === \"loading\" && /*#__PURE__*/React.createElement(Skeleton, {\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), getCategoryTreeState.apiState === \"error\" && /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"Something is not right\"), getCategoryTreeState.apiState === \"success\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      border: \"solid 1px #ccc\",\n      width: \"max-content\",\n      padding: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    treeData: getTreeData(getCategoryTreeState.tree),\n    showLine: {\n      showLeafIcon: false\n    },\n    showIcon: false,\n    selectable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  })))));\n};\n\nconst mapStateToProps = state => ({\n  getCategoryTreeState: state.getCategoryTree,\n  deleteCategoryState: state.deleteCategory\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCategoryTree: params => dispatch(getCategoryTree(params)),\n  getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n  deleteCategory: params => dispatch(deleteCategory(params)),\n  deleteCategoryReset: () => dispatch(deleteCategoryReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryList/CategoryList.js"],"names":["React","useState","useEffect","Button","Tree","Skeleton","Space","Popconfirm","message","Link","Redirect","connect","EditOutlined","DeleteOutlined","Header","PageContainer","getCategoryTree","getCategoryTreeReset","deleteCategory","deleteCategoryReset","cnf","CategoryList","props","getCategoryTreeState","deleteCategoryState","redirect","setRedirect","refresh","setRefresh","apiState","success","error","getTreeData","tree","finalArray","map","node","children","length","push","title","s3_base_url","image","width","name","id","category_id","key","border","padding","showLeafIcon","mapStateToProps","state","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Button, Tree, Skeleton, Space, Popconfirm, message } from \"antd\"\nimport { Link, Redirect } from 'react-router-dom'\nimport { connect } from \"react-redux\"\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { deleteCategory, deleteCategoryReset } from \"../../action/deleteCategoryAction\"\n\n/* others */\nimport cnf from \"../../config\"\n\nconst CategoryList = props => {\n    /* variables */\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        deleteCategory, deleteCategoryReset, deleteCategoryState\n    } = props\n    const [redirect, setRedirect] = useState([false, \"\"])\n    const [refresh, setRefresh] = useState(0)\n\n    /* callbacks */\n    useEffect(() => {\n        getCategoryTree()\n    }, [refresh])\n\n    useEffect(() => {\n        if (deleteCategoryState.apiState === \"success\") {\n            message.success(deleteCategoryState.message);\n            deleteCategoryReset()\n            setRefresh(refresh + 1)\n        }\n\n        if (deleteCategoryState.apiState === \"error\") {\n            message.error(deleteCategoryState.message);\n            deleteCategoryReset()\n        }\n    }, [deleteCategoryState])\n\n    /* functions */\n    const getTreeData = (tree) => {\n        let finalArray = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalArray.push(\n                    {\n                        title: (<Space>\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\n                            <span>{node.name}</span>\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n                            <Popconfirm\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\n                                okText=\"Delete\"\n                                cancelText=\"Cancel\"\n                                okType=\"danger\"\n                            >\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\n                            </Popconfirm>\n                        </Space>),\n                        key: node.id,\n                        children: getTreeData(node.children)\n                    }\n                )\n            } else {\n                finalArray.push(\n                    {\n                        title: (<Space>\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\n                            <span>{node.name}</span>\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\n                            <Popconfirm\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\n                                okText=\"Delete\"\n                                cancelText=\"Cancel\"\n                                okType=\"danger\"\n                            >\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\n                            </Popconfirm>\n                        </Space>),\n                        key: node.id,\n                    }\n                )\n            }\n\n        })\n        return finalArray\n    }\n\n\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n\n            <Header\n                title=\"Category List\"\n                actionBtn={<Link to='/category/add'><Button >New</Button></Link>}\n            />\n            <PageContainer>\n                {getCategoryTreeState.apiState === \"loading\" &&\n                    <Skeleton active />}\n\n                {getCategoryTreeState.apiState === \"error\" &&\n                    <h1>Something is not right</h1>}\n\n                {getCategoryTreeState.apiState === \"success\" &&\n                    <>\n                        <div style={{ border: \"solid 1px #ccc\", width: \"max-content\", padding: 10 }} >\n                            <Tree\n                                treeData={getTreeData(getCategoryTreeState.tree)}\n                                showLine={{ showLeafIcon: false }}\n                                showIcon={false}\n                                selectable={false}\n                            />\n                        </div>\n                    </>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    deleteCategoryState: state.deleteCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    deleteCategory: (params) => dispatch(deleteCategory(params)),\n    deleteCategoryReset: () => dispatch(deleteCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList)"]},"metadata":{},"sourceType":"module"}
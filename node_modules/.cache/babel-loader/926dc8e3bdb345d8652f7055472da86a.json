{"ast":null,"code":"import cnf from '../src/config';\nexport const isLogin = () => {\n  const PikyUserToken = localStorage.getItem('PikyUserToken');\n  if (PikyUserToken) return true;else return false;\n};\nexport const validateImageFile = file => {\n  let ext;\n  if (file.type == \"image/jpeg\") ext = \"jpeg\";\n  if (file.type == \"image/png\") ext = \"png\";\n  if (file.type == \"image/jpg\") ext = \"jpg\";\n  if (file.type == \"image/webp\") ext = \"webp\";\n\n  if (ext) {\n    return {\n      status: true,\n      ext: ext\n    };\n  } else {\n    return {\n      status: false\n    };\n  }\n};\nexport const getUserToken = () => {\n  return localStorage.getItem('PikyUserToken') || null;\n};\nexport const getS3SingedUrl = async (filename, ext, file) => {\n  return new Promise((resolve, reject) => {\n    fetch(`${cnf.api.base_url}get-singed-url-for-put?filename=${filename}&ext=${ext}`, {\n      method: 'get',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n        \"authorization\": `Bearer ${getUserToken()}`\n      }\n    }).then(res => {\n      const result = res.json();\n      return Promise.all([result]);\n    }).then(result => {\n      resolve({\n        ['url']: result[0].url,\n        ['filename']: `${filename}.${ext}`\n      });\n    }).catch(console.log);\n  });\n};","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/utils.js"],"names":["cnf","isLogin","PikyUserToken","localStorage","getItem","validateImageFile","file","ext","type","status","getUserToken","getS3SingedUrl","filename","Promise","resolve","reject","fetch","api","base_url","method","headers","then","res","result","json","all","url","catch","console","log"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,eAAhB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAtB;AAEA,MAAIF,aAAJ,EAAmB,OAAO,IAAP,CAAnB,KACK,OAAO,KAAP;AACR,CALM;AAOP,OAAO,MAAMG,iBAAiB,GAAIC,IAAD,IAAU;AACvC,MAAIC,GAAJ;AACA,MAAID,IAAI,CAACE,IAAL,IAAa,YAAjB,EAA+BD,GAAG,GAAG,MAAN;AAC/B,MAAID,IAAI,CAACE,IAAL,IAAa,WAAjB,EAA8BD,GAAG,GAAG,KAAN;AAC9B,MAAID,IAAI,CAACE,IAAL,IAAa,WAAjB,EAA8BD,GAAG,GAAG,KAAN;AAC9B,MAAID,IAAI,CAACE,IAAL,IAAa,YAAjB,EAA+BD,GAAG,GAAG,MAAN;;AAE/B,MAAIA,GAAJ,EAAS;AACL,WAAO;AAAEE,MAAAA,MAAM,EAAE,IAAV;AAAgBF,MAAAA,GAAG,EAAEA;AAArB,KAAP;AACH,GAFD,MAEO;AACH,WAAO;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAP;AACH;AACJ,CAZM;AAcP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAOP,YAAY,CAACC,OAAb,CAAqB,eAArB,KAAyC,IAAhD;AACH,CAFM;AAIP,OAAO,MAAMO,cAAc,GAAG,OAAOC,QAAP,EAAiBL,GAAjB,EAAsBD,IAAtB,KAA+B;AACzD,SAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,KAAK,CAAE,GAAEhB,GAAG,CAACiB,GAAJ,CAAQC,QAAS,mCAAkCN,QAAS,QAAOL,GAAI,EAA3E,EAA8E;AAC/EY,MAAAA,MAAM,EAAE,KADuE;AAE/EC,MAAAA,OAAO,EAAE;AACL,wBAAgB,iCADX;AAEL,yBAAkB,UAASV,YAAY,EAAG;AAFrC;AAFsE,KAA9E,CAAL,CAMGW,IANH,CAMQC,GAAG,IAAI;AACX,YAAMC,MAAM,GAAGD,GAAG,CAACE,IAAJ,EAAf;AACA,aAAOX,OAAO,CAACY,GAAR,CAAY,CAACF,MAAD,CAAZ,CAAP;AACH,KATD,EASGF,IATH,CASSE,MAAD,IAAY;AAChBT,MAAAA,OAAO,CAAC;AAAE,SAAC,KAAD,GAASS,MAAM,CAAC,CAAD,CAAN,CAAUG,GAArB;AAA0B,SAAC,UAAD,GAAe,GAAEd,QAAS,IAAGL,GAAI;AAA3D,OAAD,CAAP;AACH,KAXD,EAWGoB,KAXH,CAWSC,OAAO,CAACC,GAXjB;AAYH,GAbM,CAAP;AAcH,CAfM","sourcesContent":["import cnf from '../src/config'\n\nexport const isLogin = () => {\n    const PikyUserToken = localStorage.getItem('PikyUserToken')\n\n    if (PikyUserToken) return true\n    else return false\n}\n\nexport const validateImageFile = (file) => {\n    let ext\n    if (file.type == \"image/jpeg\") ext = \"jpeg\"\n    if (file.type == \"image/png\") ext = \"png\"\n    if (file.type == \"image/jpg\") ext = \"jpg\"\n    if (file.type == \"image/webp\") ext = \"webp\"\n\n    if (ext) {\n        return { status: true, ext: ext }\n    } else {\n        return { status: false }\n    }\n}\n\nexport const getUserToken = () => {\n    return localStorage.getItem('PikyUserToken') || null\n}\n\nexport const getS3SingedUrl = async (filename, ext, file) => {\n    return new Promise((resolve, reject) => {\n        fetch(`${cnf.api.base_url}get-singed-url-for-put?filename=${filename}&ext=${ext}`, {\n            method: 'get',\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\",\n                \"authorization\": `Bearer ${getUserToken()}`\n            }\n        }).then(res => {\n            const result = res.json();\n            return Promise.all([result]);\n        }).then((result) => {\n            resolve({ ['url']: result[0].url, ['filename']: `${filename}.${ext}` })\n        }).catch(console.log)\n    })\n}"]},"metadata":{},"sourceType":"module"}
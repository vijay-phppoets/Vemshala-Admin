{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\"; // @custom-component-imports ------------------------------------------------------------------------ \n\nimport DataTable from 'react-data-table-component';\nimport DataTableExtensions from 'react-data-table-component-extensions';\nimport 'react-data-table-component-extensions/dist/index.css';\nimport { Button, Modal, notification } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\nimport Mount from '../../modules/Mount';\nimport updateStatus from \"../../api/updateCustomerStatus\";\nimport sendEmail from \"../../api/sendCustomerEmail\"; // @actions-imports ----------------------------------------------------------------------------------\n\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\";\nimport { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"; //-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n  console.clear();\n  console.log(props);\n  const {\n    getCustomerList,\n    getCustomerListState\n  } = props;\n  const [tableData, setTableData] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n\n  const openNotificationWithIcon = (type, message, description = \"\") => {\n    notification[type]({\n      message: message,\n      description: description\n    });\n  };\n\n  const showStatusChangeModal = data => {\n    if (data.status === 'Active') {\n      data.status = 'Deactivate';\n      data.message = `Do you really want to deactivate ${data.name} ?`;\n    } else {\n      data.status = 'Active';\n      data.message = `Do you really want to activate ${data.name} ?`;\n    }\n\n    Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }),\n      content: data.message,\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk: function () {\n        updateCustomerStatus(data);\n        /* call update-status api */\n      }\n    });\n  };\n\n  const showEmailConfirmationModal = () => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }),\n      content: 'Do you really want to send email ?',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk: function () {\n        sendCustomerEmail(selectedRows);\n      }\n    });\n  };\n\n  const [columns, setColumns] = useState([{\n    name: 'Customer Name',\n    selector: data => data.name,\n    sortable: true\n  }, {\n    name: 'Customer Email',\n    selector: data => data.email,\n    sortable: true\n  }, {\n    name: 'Customer Contact No.',\n    selector: data => data.contact_no,\n    sortable: true\n  }, {\n    name: 'Customer Status',\n    selector: data => data.status,\n    sortable: true\n  }, {\n    name: 'Register Date',\n    selector: data => data.date,\n    sortable: true\n  }, {\n    name: 'Action',\n    selector: data => /*#__PURE__*/React.createElement(Button, {\n      className: data.status === 'Active' ? 'deactivate' : 'active',\n      onClick: () => showStatusChangeModal(data),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 31\n      }\n    }, data.status === 'Active' ? 'Deactivate' : 'Activate'),\n    sortable: true\n  }]);\n  /* @api-call -------------------------------------------------------------------------------------------------*/\n\n  const sendCustomerEmail = async data => {\n    try {\n      const serverResponse = await sendEmail(data);\n\n      if (serverResponse.status === 'error') {\n        throw new Error();\n      }\n\n      openNotificationWithIcon('success', 'Send Email', 'Email send successfully');\n    } catch (error) {\n      openNotificationWithIcon('error', 'Send Email', 'Sorry email could not send to customer');\n    }\n  };\n\n  const updateCustomerStatus = async data => {\n    try {\n      const serverResponse = await updateStatus(data);\n\n      if (serverResponse.status === 'error') {\n        throw new Error();\n      }\n\n      openNotificationWithIcon('success', 'Customer status', 'Customer status updated successfully');\n      getCustomerList();\n      /* refresh customers list */\n    } catch (error) {\n      openNotificationWithIcon('error', 'Customer status', 'Customer status could not update');\n    }\n  };\n  /* callbacks -------------------------------------------------------------------------------------------------*/\n\n\n  useEffect(() => {\n    getCustomerList();\n  }, []);\n  useEffect(() => {\n    if (getCustomerListState.apiState === \"success\") {\n      const customerList = getCustomerListState.list.map(data => {\n        const serverDate = date => date.toISOString().slice(0, 10);\n\n        data.created_at = serverDate(new Date(data.created_at));\n        return {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          date: data.created_at,\n          status: data.status,\n          contact_no: data.contact_no\n        };\n      });\n      setTableData(customerList);\n    }\n  }, [getCustomerListState]);\n  /* ----------------------------------------------------------------------------------------------------------*/\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    title: \"Customer List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Mount, {\n    condition: selectedRows.length > 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"email-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"active\",\n    onClick: showEmailConfirmationModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }, \"Send Email\"))), /*#__PURE__*/React.createElement(DataTableExtensions, {\n    print: false,\n    columns: columns,\n    data: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    noHeader: true,\n    defaultSortField: \"id\",\n    defaultSortAsc: false,\n    pagination: true,\n    highlightOnHover: true,\n    selectableRows: true,\n    onSelectedRowsChange: data => {\n      setSelectedRows(data.selectedRows);\n    },\n    clearSelectedRows: clearSelectedRows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  getOrderListState: state.getOrderList,\n  getCustomerListState: state.getCustomerList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getOrderList: params => dispatch(getOrderList(params)),\n  getOrderListReset: () => dispatch(getOrderListReset()),\n  getCustomerList: params => dispatch(getCustomerList(params)),\n  getCustomerListReset: () => dispatch(getCustomerListReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js"],"names":["React","useEffect","useState","connect","DataTable","DataTableExtensions","Button","Modal","notification","ExclamationCircleOutlined","Header","PageContainer","Mount","updateStatus","sendEmail","getOrderList","getOrderListReset","getCustomerList","getCustomerListReset","CustomerList","props","console","clear","log","getCustomerListState","tableData","setTableData","selectedRows","setSelectedRows","openNotificationWithIcon","type","message","description","showStatusChangeModal","data","status","name","confirm","title","icon","content","okText","cancelText","onOk","updateCustomerStatus","showEmailConfirmationModal","sendCustomerEmail","columns","setColumns","selector","sortable","email","contact_no","date","serverResponse","Error","error","apiState","customerList","list","map","serverDate","toISOString","slice","created_at","Date","id","length","clearSelectedRows","mapStateToProps","state","getOrderListState","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n    import { Button, Modal,notification   } from 'antd'\n    import { ExclamationCircleOutlined } from '@ant-design/icons';\n \n    import Header from \"../../component/Header/Header\"\n    import { PageContainer } from \"../../component/Xcomponent\"\n    import Mount from '../../modules/Mount'\n\n    import updateStatus from \"../../api/updateCustomerStatus\";\n    import sendEmail    from \"../../api/sendCustomerEmail\"\n\n// @actions-imports ----------------------------------------------------------------------------------\n\n    import { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n    import { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\n \n//-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n\n  console.clear(); console.log(props)\n   \n    const { getCustomerList, getCustomerListState } = props\n    const [tableData, setTableData] = useState([])\n    const [selectedRows,setSelectedRows] = useState([])\n\n    const openNotificationWithIcon = (type,message,description = \"\") => {\n        notification[type]({\n          message     : message,\n          description : description,\n        });\n    };\n  \n    const showStatusChangeModal = (data) => {\n\n        if(data.status === 'Active') {\n\n            data.status  = 'Deactivate'\n            data.message = `Do you really want to deactivate ${data.name} ?`\n        }\n\n        else { \n            data.status  = 'Active'\n            data.message = `Do you really want to activate ${data.name} ?`\n        }\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: data.message,\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { updateCustomerStatus(data) /* call update-status api */ },\n        });\n    };\n\n    const showEmailConfirmationModal = () => {\n\n        Modal.confirm({\n          title: 'Confirm',\n          icon: <ExclamationCircleOutlined />,\n          content: 'Do you really want to send email ?',\n          okText: 'Yes',\n          cancelText: 'No',\n          onOk: function() { sendCustomerEmail(selectedRows) },\n        });\n    };\n\n    const [columns,setColumns] = useState([{\n            name: 'Customer Name',\n            selector: data => data.name,\n            sortable: true,\n        },{\n            name: 'Customer Email',\n            selector: data => data.email,\n            sortable: true,\n        },{\n            name: 'Customer Contact No.',\n            selector: data => data.contact_no,\n            sortable: true,\n        },{\n            name: 'Customer Status',\n            selector: data => data.status,\n            sortable: true,\n        },{\n            name: 'Register Date',\n            selector: data => data.date,\n            sortable: true,\n        },{\n            name: 'Action',\n            selector: data => <Button className={ data.status === 'Active' ? 'deactivate' : 'active' } onClick={() => showStatusChangeModal(data)}>{ data.status === 'Active' ? 'Deactivate' : 'Activate' }</Button>,\n            sortable: true,\n        }\n    ])\n\n/* @api-call -------------------------------------------------------------------------------------------------*/ \n\n    const sendCustomerEmail = async(data) => {\n\n        try {\n\n            const serverResponse = await sendEmail(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Send Email','Email send successfully');\n\n        } catch (error) { openNotificationWithIcon('error','Send Email','Sorry email could not send to customer') }\n    }\n\n    const updateCustomerStatus = async(data) => {\n\n        try {\n\n            const serverResponse = await updateStatus(data);\n\n            if(serverResponse.status === 'error') { throw new Error(); }\n\n            openNotificationWithIcon('success','Customer status','Customer status updated successfully');\n\n            getCustomerList() /* refresh customers list */\n            \n        } catch (error) { openNotificationWithIcon('error','Customer status','Customer status could not update') }\n    }\n\n/* callbacks -------------------------------------------------------------------------------------------------*/\n\n    useEffect(() => { getCustomerList()}, [])\n    useEffect(() => {\n        \n        if (getCustomerListState.apiState === \"success\") {\n\n            const customerList = getCustomerListState.list.map(data => {\n\n                const serverDate = date => date.toISOString().slice(0, 10);\n\n                data.created_at = serverDate(new Date(data.created_at))\n       \n                return  {\n                    id     : data.id,\n                    name   : data.name,\n                    email  : data.email,\n                    date   : data.created_at,\n                    status : data.status,\n                    contact_no: data.contact_no,\n                }\n            })\n\n            setTableData(customerList);\n        }\n    }, [getCustomerListState])\n\n/* ----------------------------------------------------------------------------------------------------------*/\n\n    return (\n        <React.Fragment>\n            <Header title=\"Customer List\"/>\n            <PageContainer>\n                <Mount condition={selectedRows.length > 0 }>\n                    <div className=\"email-container\">\n                        <Button className=\"active\" onClick={showEmailConfirmationModal}>Send Email</Button>\n                    </div>\n                </Mount>     \n             \n                <DataTableExtensions print={false}  columns={columns} data={tableData} >\n                    <DataTable\n                        noHeader\n                        defaultSortField=\"id\"\n                        defaultSortAsc={false}\n                        pagination\n                        highlightOnHover\n                        selectableRows={true}\n                        onSelectedRowsChange={(data) => { setSelectedRows(data.selectedRows) }}\n                        clearSelectedRows={clearSelectedRows}\n                    />\n                </DataTableExtensions>\n            </PageContainer>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = (state) => ({\n    getOrderListState    : state.getOrderList,\n    getCustomerListState : state.getCustomerList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList:         (params) => dispatch(getOrderList(params)),\n    getOrderListReset:    ()       => dispatch(getOrderListReset()),\n    getCustomerList:      (params) => dispatch(getCustomerList(params)),\n    getCustomerListReset: ()       => dispatch(getCustomerListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)"]},"metadata":{},"sourceType":"module"}
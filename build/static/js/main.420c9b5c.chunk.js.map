{"version":3,"sources":["action/loginAction.js","reducer/loginReducer.js","action/getCategoryTreeAction.js","reducer/getCategoryTreeReducer.js","action/createCategoryAction.js","reducer/createCategoryReducer.js","action/getCategoryViewAction.js","reducer/getCategoryViewReducer.js","action/updateCategoryAction.js","reducer/updateCategoryReducer.js","action/deleteCategoryAction.js","reducer/deleteCategoryReducer.js","action/createProductAction.js","reducer/createProductReducer.js","action/getProductListAction.js","reducer/getProductListReducer.js","action/getProductViewAction.js","reducer/getProductViewReducer.js","action/updateProductAction.js","reducer/updateProductReducer.js","action/getAttributeListAction.js","reducer/getAttributeListReducer.js","action/saveAttributeForVariantsAction.js","reducer/saveAttributeForVariantsReducer.js","action/createProductVariantAction.js","reducer/createProductVariantReducer.js","action/getProductVariantListAction.js","reducer/getProductVariantListReducer.js","action/saveSpProdDataAction.js","reducer/saveSpProdDataReducer.js","action/saveSpImgDataAction.js","reducer/saveSpImgDataReducer.js","action/saveProdImgAction.js","reducer/saveProdImgReducer.js","action/delProdImgAction.js","reducer/delProdImgReducer.js","action/markImgThumbAction.js","reducer/markImgThumbReducer.js","action/delProdVarAction.js","reducer/delProdVarReducer.js","action/saveSliderImagesAction.js","reducer/saveSliderImagesReducer.js","action/getSliderListAction.js","reducer/getSliderListReducer.js","action/delSliderAction.js","reducer/delSliderReducer.js","action/saveTestimonialAction.js","reducer/saveTestimonialReducer.js","action/getTestimonialListAction.js","reducer/getTestimonialListReducer.js","action/delTestimonialAction.js","reducer/delTestimonialReducer.js","action/addDescriptionAction.js","reducer/addDescriptionReducer.js","action/listDescriptionAction.js","reducer/listDescriptionReducer.js","action/getDescriptionViewAction.js","reducer/getDescriptionViewReducer.js","action/updateDescriptionAction.js","reducer/updateDescriptionReducer.js","action/addRelProdAction.js","reducer/addRelProdReducer.js","action/listRelProdAction.js","reducer/listRelProdReducer.js","action/delRelProdAction.js","reducer/delRelProdReducer.js","action/updateSettingAction.js","reducer/updateSettingReducer.js","action/getSettingAction.js","reducer/getSettingReducer.js","action/updateShippingAction.js","reducer/updateShippingReducer.js","action/getVoucherListAction.js","reducer/getVoucherListReducer.js","action/createVoucherAction.js","reducer/createVoucherReducer.js","action/getVoucherViewAction.js","reducer/getVoucherViewReducer.js","action/updateVoucherAction.js","reducer/updateVoucherReducer.js","action/getOrderListAction.js","reducer/getOrderListReducer.js","action/getCustomerListAction.js","reducer/getCustomerListReducer.js","action/getOrderDetailsAction.js","reducer/getOrderDetailsReducer.js","action/updateOrderAction.js","reducer/updateOrderReducer.js","reducer.js","config.js","api/loginApi.js","saga/loginSaga.js","api/getCategoryTreeApi.js","saga/getCategoryTreeSaga.js","api/createCategoryApi.js","saga/createCategorySaga.js","api/getCategoryViewApi.js","saga/getCategoryViewSaga.js","api/updateCategoryApi.js","saga/updateCategorySaga.js","api/deleteCategoryApi.js","saga/deleteCategorySaga.js","api/createProductApi.js","saga/createProductSaga.js","api/getProductListApi.js","saga/getProductListSaga.js","api/getProductViewApi.js","saga/getProductViewSaga.js","api/updateProductApi.js","saga/updateProductSaga.js","api/getAttributeListApi.js","saga/getAttributeListSaga.js","api/saveAttributeForVariantsApi.js","saga/saveAttributeForVariantsSaga.js","api/createProductVariantApi.js","saga/createProductVariantSaga.js","api/getProductVariantListApi.js","saga/getProductVariantListSaga.js","api/saveSpProdDataApi.js","saga/saveSpProdDataSaga.js","api/saveSpImgDataApi.js","saga/saveSpImgDataSaga.js","api/saveProdImgApi.js","saga/saveProdImgSaga.js","api/delProdImgApi.js","saga/delProdImgSaga.js","api/markImgThumbApi.js","saga/markImgThumbSaga.js","api/delProdVarApi.js","saga/delProdVarSaga.js","api/saveSliderImagesApi.js","saga/saveSliderImagesSaga.js","api/getSliderListApi.js","saga/getSliderListSaga.js","api/delSliderApi.js","saga/delSliderSaga.js","api/saveTestimonialApi.js","saga/saveTestimonialSaga.js","api/getTestimonialListApi.js","saga/getTestimonialListSaga.js","api/delTestimonialApi.js","saga/delTestimonialSaga.js","api/addDescriptionApi.js","saga/addDescriptionSaga.js","api/listDescriptionApi.js","saga/listDescriptionSaga.js","api/getDescriptionViewApi.js","saga/getDescriptionViewSaga.js","api/updateDescriptionApi.js","saga/updateDescriptionSaga.js","api/addRelProdApi.js","saga/addRelProdSaga.js","api/listRelProdApi.js","saga/listRelProdSaga.js","api/delRelProdApi.js","saga/delRelProdSaga.js","api/updateSettingApi.js","saga/updateSettingSaga.js","api/getSettingApi.js","saga/getSettingSaga.js","api/updateShippingApi.js","saga/updateShippingSaga.js","api/getVoucherListApi.js","saga/getVoucherListSaga.js","api/createVoucherApi.js","saga/createVoucherSaga.js","api/getVoucherViewApi.js","saga/getVoucherViewSaga.js","api/updateVoucherApi.js","saga/updateVoucherSaga.js","api/getOrderListApi.js","saga/getOrderListSaga.js","api/getCustomerListApi.js","saga/getCustomerListSaga.js","api/getOrderDetailsApi.js","saga/getOrderDetailsSaga.js","api/updateOrderApi.js","saga/updateOrderSaga.js","store.js","component/Sidebar/Sidebar.js","utils.js","component/PrivateRoute.js","component/Header/Header.js","component/Xcomponent.js","page/Home/Home.js","page/CategoryAdd/CategoryAdd.js","page/CategoryList/CategoryList.js","page/CategoryEdit/CategoryEdit.js","page/ProductList/ProductListStyle.js","page/ProductList/ProductList.js","page/ProductAdd/ProductAdd.js","component/ProductTabs/ProductTabs.js","page/ProductEdit/ProductEdit.js","page/ProductVariants/ProductVariants.js","page/ProductImages/ProductImages.js","page/ProductDescription/ProductDescription.js","page/ProductDescriptionEdit/ProductDescriptionEdit.js","page/RelatedProducts/RelatedProducts.js","page/HomeSlider/HomeSlider.js","page/Testimonial/Testimonial.js","page/NotFound/NotFound.js","page/Login/Login.js","page/Logout.js","page/Setting/setting.js","page/ShippingCharge/ShippingCharge.js","page/VoucherList/VoucherListStyle.js","page/VoucherList/VoucherList.js","page/VoucherAdd/VoucherAdd.js","page/VoucherEdit/VoucherEdit.js","page/OrderList/OrderList.js","page/OrderList/OrderListStyle.js","page/CustomerList/CustomerList.js","page/OrderDetails/OrderDetails.js","page/OrderUpdate/OrderUpdate.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["loginSuccess","response","type","loginFail","initialState","apiState","message","data","getCategoryTree","params","getCategoryTreeSuccess","getCategoryTreeFail","tree","createCategorySuccess","createCategoryFail","getCategoryViewSuccess","getCategoryViewFail","category","updateCategorySuccess","updateCategoryFail","deleteCategorySuccess","deleteCategoryFail","createProductSuccess","createProductFail","getProductList","getProductListSuccess","getProductListFail","list","getProductView","getProductViewSuccess","getProductViewFail","product","images","attr_data_for_sp_img","updateProductSuccess","updateProductFail","getAttributeListSuccess","getAttributeListFail","saveAttributeForVariantsSuccess","saveAttributeForVariantsFail","createProductVariantSuccess","createProductVariantFail","getProductVariantListSuccess","getProductVariantListFail","saveSpProdDataSuccess","saveSpProdDataFail","saveSpImgDataSuccess","saveSpImgDataFail","saveProdImgSuccess","saveProdImgFail","delProdImgSuccess","delProdImgFail","markImgThumbSuccess","markImgThumbFail","delProdVarSuccess","delProdVarFail","saveSliderImagesSuccess","saveSliderImagesFail","getSliderListSuccess","getSliderListFail","delSliderSuccess","delSliderFail","saveTestimonialSuccess","saveTestimonialFail","getTestimonialListSuccess","getTestimonialListFail","delTestimonialSuccess","delTestimonialFail","addDescriptionSuccess","addDescriptionFail","listDescriptionSuccess","listDescriptionFail","getDescriptionViewSuccess","getDescriptionViewFail","description","updateDescriptionSuccess","updateDescriptionFail","addRelProdSuccess","addRelProdFail","listRelProdSuccess","listRelProdFail","delRelProdSuccess","delRelProdFail","updateSettingSuccess","updateSettingFail","getSetting","getSettingSuccess","getSettingFail","updateShippingSuccess","updateShippingFail","getVoucherListSuccess","getVoucherListFail","createVoucherSuccess","createVoucherFail","getVoucherViewSuccess","getVoucherViewFail","coupon","updateVoucherSuccess","updateVoucherFail","getOrderList","getOrderListSuccess","getOrderListFail","getCustomerListSuccess","getCustomerListFail","getOrderDetails","getOrderDetailsSuccess","getOrderDetailsFail","order","updateOrderSuccess","updateOrderFail","combineReducers","login","state","action","strings","api_err_msg","createCategory","getCategoryView","updateCategory","deleteCategory","createProduct","updateProduct","getAttributeList","saveAttributeForVariants","createProductVariant","getProductVariantList","saveSpProdData","saveSpImgData","saveProdImg","delProdImg","markImgThumb","delProdVar","saveSliderImages","getSliderList","delSlider","saveTestimonial","getTestimonialList","delTestimonial","addDescription","listDescription","getDescriptionView","updateDescription","addRelProd","listRelProd","delRelProd","updateSetting","updateShipping","getVoucherList","createVoucher","getVoucherView","updateVoucher","getCustomerList","updateOrder","cnf","api","base_url","s3_base_url","domain","tinyKey","loginApi","a","axios","method","url","headers","loginSaga","MySaga","call","put","takeLatest","getCategoryTreeApi","getCategoryTreeSaga","createCategoryApi","createCategorySaga","getCategoryViewApi","getCategoryViewSaga","updateCategoryApi","updateCategorySaga","deleteCategoryApi","deleteCategorySaga","createProductApi","createProductSaga","getProductListApi","getProductListSaga","getProductViewApi","getProductViewSaga","updateProductApi","console","log","updateProductSaga","getAttributeListApi","getAttributeListSaga","saveAttributeForVariantsApi","saveAttributeForVariantsSaga","createProductVariantApi","createProductVariantSaga","getProductVariantListApi","getProductVariantListSaga","saveSpProdDataApi","saveSpProdDataSaga","saveSpImgDataApi","saveSpImgDataSaga","saveProdImgApi","saveProdImgSaga","delProdImgApi","delProdImgSaga","markImgThumbApi","markImgThumbSaga","delProdVarApi","delProdVarSaga","saveSliderImagesApi","saveSliderImagesSaga","getSliderListApi","getSliderListSaga","delSliderApi","delSliderSaga","saveTestimonialApi","saveTestimonialSaga","getTestimonialListApi","getTestimonialListSaga","delTestimonialApi","delTestimonialSaga","addDescriptionApi","addDescriptionSaga","listDescriptionApi","listDescriptionSaga","getDescriptionViewApi","getDescriptionViewSaga","updateDescriptionApi","updateDescriptionSaga","addRelProdApi","addRelProdSaga","listRelProdApi","listRelProdSaga","delRelProdApi","delRelProdSaga","updateSettingApi","getSettingApi","getSettingSaga","UpdateShippingApi","updateShippingSaga","updateShippingApi","getVoucherListApi","getVoucherListSaga","createVoucherApi","createVoucherSaga","getVoucherViewApi","getVoucherViewSaga","updateVoucherApi","updateVoucherSaga","getOrderListApi","getOrderListSaga","getCustomerListApi","getCustomerListSaga","getOrderDetailsApi","getOrderDetailsSaga","updateOrderApi","updateOrderSaga","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","run","updateSettingSaga","Sidebar","Menu","SubMenu","props","style","padding","textAlign","color","mode","theme","Item","key","to","title","validateImageFile","file","ext","status","getS3SingedUrl","filename","Promise","resolve","reject","fetch","localStorage","getItem","then","res","result","json","all","catch","PrivateRoute","Component","component","rest","render","Header","height","background","display","alignItems","justifyContent","borderBottom","position","top","zIndex","margin","actionBtn","placement","content","trigger","backgroundColor","icon","UserOutlined","LoginContainer","styled","div","PageContainer","Home","TreeNode","TreeSelect","connect","getCategoryTreeState","createCategoryState","dispatch","getCategoryTreeReset","createCategoryReset","useState","parent_category_id","name","url_key","image","banner_img","m_banner_img","formData","setFormData","set_image","set_banner_img","set_m_banner_img","submitLoading","setSubmitLoading","redirect","setRedirect","useEffect","success","error","handleSubmit","image_filename","uuidv4","banner_img_filename","m_banner_img_filename","imageValRes","bannerImageValRes","mBannerImageValRes","alert","s3UrlRes1","s3UrlRes2","s3UrlRes3","layout","onFinish","gutter","span","label","showSearch","filterTreeNode","input","treeNode","toLowerCase","indexOf","width","dropdownStyle","maxHeight","overflow","placeholder","allowClear","treeDefaultExpandAll","onChange","value","node","categoryOptions","finalJsx","map","children","length","push","id","rules","required","e","target","pattern","RegExp","addonBefore","extra","files","htmlType","loading","deleteCategoryState","deleteCategoryReset","refresh","setRefresh","active","border","treeData","getTreeData","finalArray","src","alt","size","EditOutlined","onConfirm","category_id","okText","cancelText","okType","DeleteOutlined","showLine","showLeafIcon","showIcon","selectable","getCategoryViewState","updateCategoryState","getCategoryViewReset","updateCategoryReset","match","Form","useForm","form","imgChanged","setImgChanged","setFieldsValue","_","merge","maxWidth","Indicator","green","css","red","getProductListState","getProductListReset","tableData","setTableData","columns","dataIndex","textTransform","obj","is_sale_price","textDecoration","price","sale_price","row","dataSource","pagination","createProductState","createProductReset","gst","handleChange","handleNumberChange","onSelect","v","Option","defaultValue","min","ProductTabs","Tabs","TabPane","serRedirect","activeKey","tab","getProductViewState","updateProductState","getProductViewReset","updateProductReset","product_id","categories","is_exclusive","sku","short_description","tags","stock","xs","sm","md","lg","xl","disabled","multiple","handleSelect","showCheckedStrategy","SHOW_ALL","checkedChildren","unCheckedChildren","checked","defaultChecked","TextArea","getAttributeListState","saveAttributeForVariantsState","createProductVariantState","getProductVariantListState","saveSpProdDataState","saveSpImgDataState","delProdVarState","getAttributeListReset","saveAttributeForVariantsReset","createProductVariantReset","getProductVariantListReset","saveSpProdDataReset","saveSpImgDataReset","delProdVarReset","attributes_for_variants","set_attributes_for_variants","form2","form3","attributes","variant_data","set_variant_data","set_columns","display_separate","attribute_id","separateProductData","setSeparateProductData","separateImgData","setSeparateImgData","nature","split","variant_count","display_separate_product_by_attribute","display_separate_attribute_id","display_separate_img","attribute_for_separate_images","display_separate_img_attribute_id","product_variant_id","p","rowObj","option_value","attr","marginBottom","jsx","includes","arr","findIndex","attr_id","filter","item","handleAttributeChange","option_id","options","option","renderVariantForm","marginTop","onClick","saveProdImgState","delProdImgState","markImgThumbState","saveProdImgReset","delProdImgReset","markImgThumbReset","attribute_option_id","imgAttr","setImgAttr","handleImgSub","img","marginRight","img_id","is_thumbnail","StarOutlined","addDescriptionState","listDescriptionState","addDescriptionReset","listDescriptionReset","tblData","sequence","getDescriptionViewState","updateDescriptionState","getDescriptionViewReset","updateDescriptionReset","description_id","initialValue","decodeURIComponent","apiKey","init","menubar","plugins","toolbar","fontsize_formats","onEditorChange","editor","encodeURI","addRelProdState","listRelProdState","delRelProdState","addRelProdReset","listRelProdReset","delRelProdReset","related_product_id","filterOption","saveSliderImagesState","getSliderListState","delSliderState","saveSliderImagesReset","getSliderListReset","delSliderReset","initial_values","mobile_image","resetFields","ar","m_image","saveTestimonialState","getTestimonialListState","delTestimonialState","saveTestimonialReset","getTestimonialListReset","delTestimonialReset","s3UrlRes","NotFound","loginState","loginReset","email","password","setItem","token","JSON","stringify","user","borderRadius","minWidth","Password","block","Logout","removeItem","notification","updateSettingState","getSettingState","updateSettingReset","getSettingReset","international_price","admin_email","offer_strip","IP","find","AE","OS","meta_value","updateShippingState","updateShippingReset","minimun_cart_value","shipping_price","international_shipping","SP","MCV","ISP","getVoucherListState","getVoucherListReset","code","discount","valid_from","date","Date","formattedDate","getMonth","getDate","getFullYear","valid_to","discountData","RangePicker","DatePicker","createVoucherState","createVoucherReset","no_of_usage_for_all","minimum_cart_value","maximum_discount_amount","showTime","format","dateString","updateVoucherState","getVoucherViewState","updateVoucherReset","getVoucherViewReset","voucher_id","validity","moment","getOrderListState","getOrderListReset","s_phone","order_no","order_date","payment_type","total","toUpperCase","CopyOutlined","customer_name","s_fname","s_lname","s_email","getCustomerListState","getCustomerListReset","created_at","getOrderDetailsState","getOrderDetailsReset","order_id","orderData","setOrderData","product_name","quantity","items","thumbnail","b_fname","b_lname","b_email","grand_total","payment_mode","shipping_charge","coupon_code","b_phone","b_company_name","b_country","b_state","b_city","b_street","b_landmark","s_company_name","s_country","s_state","s_city","s_street","s_landmark","updateOrderState","updateOrderReset","currencyType","device","mobileS","mobileM","mobileL","mobileXL","tablet","laptopS","laptop","laptopL","desktop","desktopL","colors","primary","black","Sider","Layout","Footer","Content","App","path","exact","left","className","marginLeft","CategoryList","CategoryAdd","CategoryEdit","ProductList","ProductAdd","ProductEdit","ProductVariants","ProductImages","ProductDescription","ProductDescriptionEdit","RelatedProducts","HomeSlider","Testimonial","setting","ShippingCharge","VoucherList","VoucherAdd","VoucherEdit","OrderList","CustomerList","OrderDetails","OrderUpdate","Login","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.420c9b5c.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\r\nexport const LOGIN_RESET = 'LOGIN_RESET'\r\n\r\nexport const login = (params) => {\r\n    return { type: LOGIN, params }\r\n}\r\n\r\nexport const loginSuccess = (response) => {\r\n    return { type: LOGIN_SUCCESS, response }\r\n}\r\n\r\nexport const loginFail = (response) => {\r\n    return { type: LOGIN_FAIL, response }\r\n}\r\n\r\nexport const loginReset = () => {\r\n    return { type: LOGIN_RESET }\r\n}","import {\r\n    LOGIN,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGIN_RESET\r\n} from '../action/loginAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    data: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                data: action.response.data\r\n            }\r\n\r\n        case LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case LOGIN_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_CATEGORY_TREE = 'GET_CATEGORY_TREE'\r\nexport const GET_CATEGORY_TREE_SUCCESS = 'GET_CATEGORY_TREE_SUCCESS'\r\nexport const GET_CATEGORY_TREE_FAIL = 'GET_CATEGORY_TREE_FAIL'\r\nexport const GET_CATEGORY_TREE_RESET = 'GET_CATEGORY_TREE_RESET'\r\n\r\nexport const getCategoryTree = (params) => {\r\n    return { type: GET_CATEGORY_TREE, params }\r\n}\r\n\r\nexport const getCategoryTreeSuccess = (response) => {\r\n    return { type: GET_CATEGORY_TREE_SUCCESS, response }\r\n}\r\n\r\nexport const getCategoryTreeFail = (response) => {\r\n    return { type: GET_CATEGORY_TREE_FAIL, response }\r\n}\r\n\r\nexport const getCategoryTreeReset = () => {\r\n    return { type: GET_CATEGORY_TREE_RESET }\r\n}","import {\r\n    GET_CATEGORY_TREE,\r\n    GET_CATEGORY_TREE_SUCCESS,\r\n    GET_CATEGORY_TREE_FAIL,\r\n    GET_CATEGORY_TREE_RESET\r\n} from '../action/getCategoryTreeAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    tree: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CATEGORY_TREE:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_CATEGORY_TREE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                tree: action.response.data.tree\r\n            }\r\n\r\n        case GET_CATEGORY_TREE_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_CATEGORY_TREE_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const CREATE_CATEGORY = 'CREATE_CATEGORY'\r\nexport const CREATE_CATEGORY_SUCCESS = 'CREATE_CATEGORY_SUCCESS'\r\nexport const CREATE_CATEGORY_FAIL = 'CREATE_CATEGORY_FAIL'\r\nexport const CREATE_CATEGORY_RESET = 'CREATE_CATEGORY_RESET'\r\n\r\nexport const createCategory = (params) => {\r\n    return { type: CREATE_CATEGORY, params }\r\n}\r\n\r\nexport const createCategorySuccess = (response) => {\r\n    return { type: CREATE_CATEGORY_SUCCESS, response }\r\n}\r\n\r\nexport const createCategoryFail = (response) => {\r\n    return { type: CREATE_CATEGORY_FAIL, response }\r\n}\r\n\r\nexport const createCategoryReset = () => {\r\n    return { type: CREATE_CATEGORY_RESET }\r\n}","import {\r\n    CREATE_CATEGORY,\r\n    CREATE_CATEGORY_SUCCESS,\r\n    CREATE_CATEGORY_FAIL,\r\n    CREATE_CATEGORY_RESET\r\n} from '../action/createCategoryAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CREATE_CATEGORY:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case CREATE_CATEGORY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case CREATE_CATEGORY_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case CREATE_CATEGORY_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_CATEGORY_VIEW = 'GET_CATEGORY_VIEW'\r\nexport const GET_CATEGORY_VIEW_SUCCESS = 'GET_CATEGORY_VIEW_SUCCESS'\r\nexport const GET_CATEGORY_VIEW_FAIL = 'GET_CATEGORY_VIEW_FAIL'\r\nexport const GET_CATEGORY_VIEW_RESET = 'GET_CATEGORY_VIEW_RESET'\r\n\r\nexport const getCategoryView = (params) => {\r\n    return { type: GET_CATEGORY_VIEW, params }\r\n}\r\n\r\nexport const getCategoryViewSuccess = (response) => {\r\n    return { type: GET_CATEGORY_VIEW_SUCCESS, response }\r\n}\r\n\r\nexport const getCategoryViewFail = (response) => {\r\n    return { type: GET_CATEGORY_VIEW_FAIL, response }\r\n}\r\n\r\nexport const getCategoryViewReset = () => {\r\n    return { type: GET_CATEGORY_VIEW_RESET }\r\n}","import {\r\n    GET_CATEGORY_VIEW,\r\n    GET_CATEGORY_VIEW_SUCCESS,\r\n    GET_CATEGORY_VIEW_FAIL,\r\n    GET_CATEGORY_VIEW_RESET\r\n} from '../action/getCategoryViewAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    category: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CATEGORY_VIEW:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_CATEGORY_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                category: action.response.data.category\r\n            }\r\n\r\n        case GET_CATEGORY_VIEW_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_CATEGORY_VIEW_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_CATEGORY = 'UPDATE_CATEGORY'\r\nexport const UPDATE_CATEGORY_SUCCESS = 'UPDATE_CATEGORY_SUCCESS'\r\nexport const UPDATE_CATEGORY_FAIL = 'UPDATE_CATEGORY_FAIL'\r\nexport const UPDATE_CATEGORY_RESET = 'UPDATE_CATEGORY_RESET'\r\n\r\nexport const updateCategory = (params) => {\r\n    return { type: UPDATE_CATEGORY, params }\r\n}\r\n\r\nexport const updateCategorySuccess = (response) => {\r\n    return { type: UPDATE_CATEGORY_SUCCESS, response }\r\n}\r\n\r\nexport const updateCategoryFail = (response) => {\r\n    return { type: UPDATE_CATEGORY_FAIL, response }\r\n}\r\n\r\nexport const updateCategoryReset = () => {\r\n    return { type: UPDATE_CATEGORY_RESET }\r\n}","import {\r\n    UPDATE_CATEGORY,\r\n    UPDATE_CATEGORY_SUCCESS,\r\n    UPDATE_CATEGORY_FAIL,\r\n    UPDATE_CATEGORY_RESET\r\n} from '../action/updateCategoryAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_CATEGORY:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_CATEGORY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_CATEGORY_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_CATEGORY_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DELETE_CATEGORY = 'DELETE_CATEGORY'\r\nexport const DELETE_CATEGORY_SUCCESS = 'DELETE_CATEGORY_SUCCESS'\r\nexport const DELETE_CATEGORY_FAIL = 'DELETE_CATEGORY_FAIL'\r\nexport const DELETE_CATEGORY_RESET = 'DELETE_CATEGORY_RESET'\r\n\r\nexport const deleteCategory = (params) => {\r\n    return { type: DELETE_CATEGORY, params }\r\n}\r\n\r\nexport const deleteCategorySuccess = (response) => {\r\n    return { type: DELETE_CATEGORY_SUCCESS, response }\r\n}\r\n\r\nexport const deleteCategoryFail = (response) => {\r\n    return { type: DELETE_CATEGORY_FAIL, response }\r\n}\r\n\r\nexport const deleteCategoryReset = () => {\r\n    return { type: DELETE_CATEGORY_RESET }\r\n}","import {\r\n    DELETE_CATEGORY,\r\n    DELETE_CATEGORY_SUCCESS,\r\n    DELETE_CATEGORY_FAIL,\r\n    DELETE_CATEGORY_RESET\r\n} from '../action/deleteCategoryAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DELETE_CATEGORY:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DELETE_CATEGORY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DELETE_CATEGORY_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DELETE_CATEGORY_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const CREATE_PRODUCT = 'CREATE_PRODUCT'\r\nexport const CREATE_PRODUCT_SUCCESS = 'CREATE_PRODUCT_SUCCESS'\r\nexport const CREATE_PRODUCT_FAIL = 'CREATE_PRODUCT_FAIL'\r\nexport const CREATE_PRODUCT_RESET = 'CREATE_PRODUCT_RESET'\r\n\r\nexport const createProduct = (params) => {\r\n    return { type: CREATE_PRODUCT, params }\r\n}\r\n\r\nexport const createProductSuccess = (response) => {\r\n    return { type: CREATE_PRODUCT_SUCCESS, response }\r\n}\r\n\r\nexport const createProductFail = (response) => {\r\n    return { type: CREATE_PRODUCT_FAIL, response }\r\n}\r\n\r\nexport const createProductReset = () => {\r\n    return { type: CREATE_PRODUCT_RESET }\r\n}","import {\r\n    CREATE_PRODUCT,\r\n    CREATE_PRODUCT_SUCCESS,\r\n    CREATE_PRODUCT_FAIL,\r\n    CREATE_PRODUCT_RESET\r\n} from '../action/createProductAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    data: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CREATE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case CREATE_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                data: action.response.data.data,\r\n            }\r\n\r\n        case CREATE_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case CREATE_PRODUCT_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_PRODUCT_LIST = 'GET_PRODUCT_LIST'\r\nexport const GET_PRODUCT_LIST_SUCCESS = 'GET_PRODUCT_LIST_SUCCESS'\r\nexport const GET_PRODUCT_LIST_FAIL = 'GET_PRODUCT_LIST_FAIL'\r\nexport const GET_PRODUCT_LIST_RESET = 'GET_PRODUCT_LIST_RESET'\r\n\r\nexport const getProductList = (params) => {\r\n    return { type: GET_PRODUCT_LIST, params }\r\n}\r\n\r\nexport const getProductListSuccess = (response) => {\r\n    return { type: GET_PRODUCT_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getProductListFail = (response) => {\r\n    return { type: GET_PRODUCT_LIST_FAIL, response }\r\n}\r\n\r\nexport const getProductListReset = () => {\r\n    return { type: GET_PRODUCT_LIST_RESET }\r\n}","import {\r\n    GET_PRODUCT_LIST,\r\n    GET_PRODUCT_LIST_SUCCESS,\r\n    GET_PRODUCT_LIST_FAIL,\r\n    GET_PRODUCT_LIST_RESET\r\n} from '../action/getProductListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_PRODUCT_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_PRODUCT_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_PRODUCT_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_PRODUCT_VIEW = 'GET_PRODUCT_VIEW'\r\nexport const GET_PRODUCT_VIEW_SUCCESS = 'GET_PRODUCT_VIEW_SUCCESS'\r\nexport const GET_PRODUCT_VIEW_FAIL = 'GET_PRODUCT_VIEW_FAIL'\r\nexport const GET_PRODUCT_VIEW_RESET = 'GET_PRODUCT_VIEW_RESET'\r\n\r\nexport const getProductView = (params) => {\r\n    return { type: GET_PRODUCT_VIEW, params }\r\n}\r\n\r\nexport const getProductViewSuccess = (response) => {\r\n    return { type: GET_PRODUCT_VIEW_SUCCESS, response }\r\n}\r\n\r\nexport const getProductViewFail = (response) => {\r\n    return { type: GET_PRODUCT_VIEW_FAIL, response }\r\n}\r\n\r\nexport const getProductViewReset = () => {\r\n    return { type: GET_PRODUCT_VIEW_RESET }\r\n}","import {\r\n    GET_PRODUCT_VIEW,\r\n    GET_PRODUCT_VIEW_SUCCESS,\r\n    GET_PRODUCT_VIEW_FAIL,\r\n    GET_PRODUCT_VIEW_RESET\r\n} from '../action/getProductViewAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    product: {},\r\n    images: [],\r\n    attr_data_for_sp_img: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_PRODUCT_VIEW:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_PRODUCT_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                product: action.response.data.product,\r\n                images: action.response.data.images,\r\n                attr_data_for_sp_img: action.response.data.attr_data_for_sp_img,\r\n            }\r\n\r\n        case GET_PRODUCT_VIEW_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_PRODUCT_VIEW_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_PRODUCT = 'UPDATE_PRODUCT'\r\nexport const UPDATE_PRODUCT_SUCCESS = 'UPDATE_PRODUCT_SUCCESS'\r\nexport const UPDATE_PRODUCT_FAIL = 'UPDATE_PRODUCT_FAIL'\r\nexport const UPDATE_PRODUCT_RESET = 'UPDATE_PRODUCT_RESET'\r\n\r\nexport const updateProduct = (params) => {\r\n    return { type: UPDATE_PRODUCT, params }\r\n}\r\n\r\nexport const updateProductSuccess = (response) => {\r\n    return { type: UPDATE_PRODUCT_SUCCESS, response }\r\n}\r\n\r\nexport const updateProductFail = (response) => {\r\n    return { type: UPDATE_PRODUCT_FAIL, response }\r\n}\r\n\r\nexport const updateProductReset = () => {\r\n    return { type: UPDATE_PRODUCT_RESET }\r\n}","import {\r\n    UPDATE_PRODUCT,\r\n    UPDATE_PRODUCT_SUCCESS,\r\n    UPDATE_PRODUCT_FAIL,\r\n    UPDATE_PRODUCT_RESET\r\n} from '../action/updateProductAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_PRODUCT_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_ATTRIBUTE_LIST = 'GET_ATTRIBUTE_LIST'\r\nexport const GET_ATTRIBUTE_LIST_SUCCESS = 'GET_ATTRIBUTE_LIST_SUCCESS'\r\nexport const GET_ATTRIBUTE_LIST_FAIL = 'GET_ATTRIBUTE_LIST_FAIL'\r\nexport const GET_ATTRIBUTE_LIST_RESET = 'GET_ATTRIBUTE_LIST_RESET'\r\n\r\nexport const getAttributeList = (params) => {\r\n    return { type: GET_ATTRIBUTE_LIST, params }\r\n}\r\n\r\nexport const getAttributeListSuccess = (response) => {\r\n    return { type: GET_ATTRIBUTE_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getAttributeListFail = (response) => {\r\n    return { type: GET_ATTRIBUTE_LIST_FAIL, response }\r\n}\r\n\r\nexport const getAttributeListReset = () => {\r\n    return { type: GET_ATTRIBUTE_LIST_RESET }\r\n}","import {\r\n    GET_ATTRIBUTE_LIST,\r\n    GET_ATTRIBUTE_LIST_SUCCESS,\r\n    GET_ATTRIBUTE_LIST_FAIL,\r\n    GET_ATTRIBUTE_LIST_RESET\r\n} from '../action/getAttributeListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ATTRIBUTE_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_ATTRIBUTE_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_ATTRIBUTE_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_ATTRIBUTE_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_ATTRIBUTE_FOR_VARIANTS = 'SAVE_ATTRIBUTE_FOR_VARIANTS'\r\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS = 'SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS'\r\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL = 'SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL'\r\nexport const SAVE_ATTRIBUTE_FOR_VARIANTS_RESET = 'SAVE_ATTRIBUTE_FOR_VARIANTS_RESET'\r\n\r\nexport const saveAttributeForVariants = (params) => {\r\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS, params }\r\n}\r\n\r\nexport const saveAttributeForVariantsSuccess = (response) => {\r\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS, response }\r\n}\r\n\r\nexport const saveAttributeForVariantsFail = (response) => {\r\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL, response }\r\n}\r\n\r\nexport const saveAttributeForVariantsReset = () => {\r\n    return { type: SAVE_ATTRIBUTE_FOR_VARIANTS_RESET }\r\n}","import {\r\n    SAVE_ATTRIBUTE_FOR_VARIANTS,\r\n    SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS,\r\n    SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL,\r\n    SAVE_ATTRIBUTE_FOR_VARIANTS_RESET\r\n} from '../action/saveAttributeForVariantsAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_ATTRIBUTE_FOR_VARIANTS:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_ATTRIBUTE_FOR_VARIANTS_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const CREATE_PRODUCT_VARIANT = 'CREATE_PRODUCT_VARIANT'\r\nexport const CREATE_PRODUCT_VARIANT_SUCCESS = 'CREATE_PRODUCT_VARIANT_SUCCESS'\r\nexport const CREATE_PRODUCT_VARIANT_FAIL = 'CREATE_PRODUCT_VARIANT_FAIL'\r\nexport const CREATE_PRODUCT_VARIANT_RESET = 'CREATE_PRODUCT_VARIANT_RESET'\r\n\r\nexport const createProductVariant = (params) => {\r\n    return { type: CREATE_PRODUCT_VARIANT, params }\r\n}\r\n\r\nexport const createProductVariantSuccess = (response) => {\r\n    return { type: CREATE_PRODUCT_VARIANT_SUCCESS, response }\r\n}\r\n\r\nexport const createProductVariantFail = (response) => {\r\n    return { type: CREATE_PRODUCT_VARIANT_FAIL, response }\r\n}\r\n\r\nexport const createProductVariantReset = () => {\r\n    return { type: CREATE_PRODUCT_VARIANT_RESET }\r\n}","import {\r\n    CREATE_PRODUCT_VARIANT,\r\n    CREATE_PRODUCT_VARIANT_SUCCESS,\r\n    CREATE_PRODUCT_VARIANT_FAIL,\r\n    CREATE_PRODUCT_VARIANT_RESET\r\n} from '../action/createProductVariantAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    data: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CREATE_PRODUCT_VARIANT:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case CREATE_PRODUCT_VARIANT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                data: action.response.data.data,\r\n            }\r\n\r\n        case CREATE_PRODUCT_VARIANT_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case CREATE_PRODUCT_VARIANT_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_PRODUCT_VARIANT_LIST = 'GET_PRODUCT_VARIANT_LIST'\r\nexport const GET_PRODUCT_VARIANT_LIST_SUCCESS = 'GET_PRODUCT_VARIANT_LIST_SUCCESS'\r\nexport const GET_PRODUCT_VARIANT_LIST_FAIL = 'GET_PRODUCT_VARIANT_LIST_FAIL'\r\nexport const GET_PRODUCT_VARIANT_LIST_RESET = 'GET_PRODUCT_VARIANT_LIST_RESET'\r\n\r\nexport const getProductVariantList = (params) => {\r\n    return { type: GET_PRODUCT_VARIANT_LIST, params }\r\n}\r\n\r\nexport const getProductVariantListSuccess = (response) => {\r\n    return { type: GET_PRODUCT_VARIANT_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getProductVariantListFail = (response) => {\r\n    return { type: GET_PRODUCT_VARIANT_LIST_FAIL, response }\r\n}\r\n\r\nexport const getProductVariantListReset = () => {\r\n    return { type: GET_PRODUCT_VARIANT_LIST_RESET }\r\n}","import {\r\n    GET_PRODUCT_VARIANT_LIST,\r\n    GET_PRODUCT_VARIANT_LIST_SUCCESS,\r\n    GET_PRODUCT_VARIANT_LIST_FAIL,\r\n    GET_PRODUCT_VARIANT_LIST_RESET\r\n} from '../action/getProductVariantListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_PRODUCT_VARIANT_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_PRODUCT_VARIANT_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_PRODUCT_VARIANT_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_PRODUCT_VARIANT_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_SP_PROD_DATA = 'SAVE_SP_PROD_DATA'\r\nexport const SAVE_SP_PROD_DATA_SUCCESS = 'SAVE_SP_PROD_DATA_SUCCESS'\r\nexport const SAVE_SP_PROD_DATA_FAIL = 'SAVE_SP_PROD_DATA_FAIL'\r\nexport const SAVE_SP_PROD_DATA_RESET = 'SAVE_SP_PROD_DATA_RESET'\r\n\r\nexport const saveSpProdData = (params) => {\r\n    return { type: SAVE_SP_PROD_DATA, params }\r\n}\r\n\r\nexport const saveSpProdDataSuccess = (response) => {\r\n    return { type: SAVE_SP_PROD_DATA_SUCCESS, response }\r\n}\r\n\r\nexport const saveSpProdDataFail = (response) => {\r\n    return { type: SAVE_SP_PROD_DATA_FAIL, response }\r\n}\r\n\r\nexport const saveSpProdDataReset = () => {\r\n    return { type: SAVE_SP_PROD_DATA_RESET }\r\n}","import {\r\n    SAVE_SP_PROD_DATA,\r\n    SAVE_SP_PROD_DATA_SUCCESS,\r\n    SAVE_SP_PROD_DATA_FAIL,\r\n    SAVE_SP_PROD_DATA_RESET\r\n} from '../action/saveSpProdDataAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_SP_PROD_DATA:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_SP_PROD_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_SP_PROD_DATA_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_SP_PROD_DATA_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_SP_IMG_DATA = 'SAVE_SP_IMG_DATA'\r\nexport const SAVE_SP_IMG_DATA_SUCCESS = 'SAVE_SP_IMG_DATA_SUCCESS'\r\nexport const SAVE_SP_IMG_DATA_FAIL = 'SAVE_SP_IMG_DATA_FAIL'\r\nexport const SAVE_SP_IMG_DATA_RESET = 'SAVE_SP_IMG_DATA_RESET'\r\n\r\nexport const saveSpImgData = (params) => {\r\n    return { type: SAVE_SP_IMG_DATA, params }\r\n}\r\n\r\nexport const saveSpImgDataSuccess = (response) => {\r\n    return { type: SAVE_SP_IMG_DATA_SUCCESS, response }\r\n}\r\n\r\nexport const saveSpImgDataFail = (response) => {\r\n    return { type: SAVE_SP_IMG_DATA_FAIL, response }\r\n}\r\n\r\nexport const saveSpImgDataReset = () => {\r\n    return { type: SAVE_SP_IMG_DATA_RESET }\r\n}","import {\r\n    SAVE_SP_IMG_DATA,\r\n    SAVE_SP_IMG_DATA_SUCCESS,\r\n    SAVE_SP_IMG_DATA_FAIL,\r\n    SAVE_SP_IMG_DATA_RESET\r\n} from '../action/saveSpImgDataAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_SP_IMG_DATA:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_SP_IMG_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_SP_IMG_DATA_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_SP_IMG_DATA_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_PROD_IMG = 'SAVE_PROD_IMG'\r\nexport const SAVE_PROD_IMG_SUCCESS = 'SAVE_PROD_IMG_SUCCESS'\r\nexport const SAVE_PROD_IMG_FAIL = 'SAVE_PROD_IMG_FAIL'\r\nexport const SAVE_PROD_IMG_RESET = 'SAVE_PROD_IMG_RESET'\r\n\r\nexport const saveProdImg = (params) => {\r\n    return { type: SAVE_PROD_IMG, params }\r\n}\r\n\r\nexport const saveProdImgSuccess = (response) => {\r\n    return { type: SAVE_PROD_IMG_SUCCESS, response }\r\n}\r\n\r\nexport const saveProdImgFail = (response) => {\r\n    return { type: SAVE_PROD_IMG_FAIL, response }\r\n}\r\n\r\nexport const saveProdImgReset = () => {\r\n    return { type: SAVE_PROD_IMG_RESET }\r\n}","import {\r\n    SAVE_PROD_IMG,\r\n    SAVE_PROD_IMG_SUCCESS,\r\n    SAVE_PROD_IMG_FAIL,\r\n    SAVE_PROD_IMG_RESET\r\n} from '../action/saveProdImgAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_PROD_IMG:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_PROD_IMG_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_PROD_IMG_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_PROD_IMG_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DEL_PROD_IMG = 'DEL_PROD_IMG'\r\nexport const DEL_PROD_IMG_SUCCESS = 'DEL_PROD_IMG_SUCCESS'\r\nexport const DEL_PROD_IMG_FAIL = 'DEL_PROD_IMG_FAIL'\r\nexport const DEL_PROD_IMG_RESET = 'DEL_PROD_IMG_RESET'\r\n\r\nexport const delProdImg = (params) => {\r\n    return { type: DEL_PROD_IMG, params }\r\n}\r\n\r\nexport const delProdImgSuccess = (response) => {\r\n    return { type: DEL_PROD_IMG_SUCCESS, response }\r\n}\r\n\r\nexport const delProdImgFail = (response) => {\r\n    return { type: DEL_PROD_IMG_FAIL, response }\r\n}\r\n\r\nexport const delProdImgReset = () => {\r\n    return { type: DEL_PROD_IMG_RESET }\r\n}","import {\r\n    DEL_PROD_IMG,\r\n    DEL_PROD_IMG_SUCCESS,\r\n    DEL_PROD_IMG_FAIL,\r\n    DEL_PROD_IMG_RESET\r\n} from '../action/delProdImgAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DEL_PROD_IMG:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DEL_PROD_IMG_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DEL_PROD_IMG_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DEL_PROD_IMG_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const MARK_IMG_THUMB = 'MARK_IMG_THUMB'\r\nexport const MARK_IMG_THUMB_SUCCESS = 'MARK_IMG_THUMB_SUCCESS'\r\nexport const MARK_IMG_THUMB_FAIL = 'MARK_IMG_THUMB_FAIL'\r\nexport const MARK_IMG_THUMB_RESET = 'MARK_IMG_THUMB_RESET'\r\n\r\nexport const markImgThumb = (params) => {\r\n    return { type: MARK_IMG_THUMB, params }\r\n}\r\n\r\nexport const markImgThumbSuccess = (response) => {\r\n    return { type: MARK_IMG_THUMB_SUCCESS, response }\r\n}\r\n\r\nexport const markImgThumbFail = (response) => {\r\n    return { type: MARK_IMG_THUMB_FAIL, response }\r\n}\r\n\r\nexport const markImgThumbReset = () => {\r\n    return { type: MARK_IMG_THUMB_RESET }\r\n}","import {\r\n    MARK_IMG_THUMB,\r\n    MARK_IMG_THUMB_SUCCESS,\r\n    MARK_IMG_THUMB_FAIL,\r\n    MARK_IMG_THUMB_RESET\r\n} from '../action/markImgThumbAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case MARK_IMG_THUMB:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case MARK_IMG_THUMB_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case MARK_IMG_THUMB_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case MARK_IMG_THUMB_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DEL_PROD_VAR = 'DEL_PROD_VAR'\r\nexport const DEL_PROD_VAR_SUCCESS = 'DEL_PROD_VAR_SUCCESS'\r\nexport const DEL_PROD_VAR_FAIL = 'DEL_PROD_VAR_FAIL'\r\nexport const DEL_PROD_VAR_RESET = 'DEL_PROD_VAR_RESET'\r\n\r\nexport const delProdVar = (params) => {\r\n    return { type: DEL_PROD_VAR, params }\r\n}\r\n\r\nexport const delProdVarSuccess = (response) => {\r\n    return { type: DEL_PROD_VAR_SUCCESS, response }\r\n}\r\n\r\nexport const delProdVarFail = (response) => {\r\n    return { type: DEL_PROD_VAR_FAIL, response }\r\n}\r\n\r\nexport const delProdVarReset = () => {\r\n    return { type: DEL_PROD_VAR_RESET }\r\n}","import {\r\n    DEL_PROD_VAR,\r\n    DEL_PROD_VAR_SUCCESS,\r\n    DEL_PROD_VAR_FAIL,\r\n    DEL_PROD_VAR_RESET\r\n} from '../action/delProdVarAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DEL_PROD_VAR:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DEL_PROD_VAR_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DEL_PROD_VAR_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DEL_PROD_VAR_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_SLIDER_IMAGES = 'SAVE_SLIDER_IMAGES'\r\nexport const SAVE_SLIDER_IMAGES_SUCCESS = 'SAVE_SLIDER_IMAGES_SUCCESS'\r\nexport const SAVE_SLIDER_IMAGES_FAIL = 'SAVE_SLIDER_IMAGES_FAIL'\r\nexport const SAVE_SLIDER_IMAGES_RESET = 'SAVE_SLIDER_IMAGES_RESET'\r\n\r\nexport const saveSliderImages = (params) => {\r\n    return { type: SAVE_SLIDER_IMAGES, params }\r\n}\r\n\r\nexport const saveSliderImagesSuccess = (response) => {\r\n    return { type: SAVE_SLIDER_IMAGES_SUCCESS, response }\r\n}\r\n\r\nexport const saveSliderImagesFail = (response) => {\r\n    return { type: SAVE_SLIDER_IMAGES_FAIL, response }\r\n}\r\n\r\nexport const saveSliderImagesReset = () => {\r\n    return { type: SAVE_SLIDER_IMAGES_RESET }\r\n}","import {\r\n    SAVE_SLIDER_IMAGES,\r\n    SAVE_SLIDER_IMAGES_SUCCESS,\r\n    SAVE_SLIDER_IMAGES_FAIL,\r\n    SAVE_SLIDER_IMAGES_RESET\r\n} from '../action/saveSliderImagesAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_SLIDER_IMAGES:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_SLIDER_IMAGES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_SLIDER_IMAGES_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_SLIDER_IMAGES_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_SLIDER_LIST = 'GET_SLIDER_LIST'\r\nexport const GET_SLIDER_LIST_SUCCESS = 'GET_SLIDER_LIST_SUCCESS'\r\nexport const GET_SLIDER_LIST_FAIL = 'GET_SLIDER_LIST_FAIL'\r\nexport const GET_SLIDER_LIST_RESET = 'GET_SLIDER_LIST_RESET'\r\n\r\nexport const getSliderList = (params) => {\r\n    return { type: GET_SLIDER_LIST, params }\r\n}\r\n\r\nexport const getSliderListSuccess = (response) => {\r\n    return { type: GET_SLIDER_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getSliderListFail = (response) => {\r\n    return { type: GET_SLIDER_LIST_FAIL, response }\r\n}\r\n\r\nexport const getSliderListReset = () => {\r\n    return { type: GET_SLIDER_LIST_RESET }\r\n}","import {\r\n    GET_SLIDER_LIST,\r\n    GET_SLIDER_LIST_SUCCESS,\r\n    GET_SLIDER_LIST_FAIL,\r\n    GET_SLIDER_LIST_RESET\r\n} from '../action/getSliderListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_SLIDER_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_SLIDER_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_SLIDER_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_SLIDER_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DEL_SLIDER = 'DEL_SLIDER'\r\nexport const DEL_SLIDER_SUCCESS = 'DEL_SLIDER_SUCCESS'\r\nexport const DEL_SLIDER_FAIL = 'DEL_SLIDER_FAIL'\r\nexport const DEL_SLIDER_RESET = 'DEL_SLIDER_RESET'\r\n\r\nexport const delSlider = (params) => {\r\n    return { type: DEL_SLIDER, params }\r\n}\r\n\r\nexport const delSliderSuccess = (response) => {\r\n    return { type: DEL_SLIDER_SUCCESS, response }\r\n}\r\n\r\nexport const delSliderFail = (response) => {\r\n    return { type: DEL_SLIDER_FAIL, response }\r\n}\r\n\r\nexport const delSliderReset = () => {\r\n    return { type: DEL_SLIDER_RESET }\r\n}","import {\r\n    DEL_SLIDER,\r\n    DEL_SLIDER_SUCCESS,\r\n    DEL_SLIDER_FAIL,\r\n    DEL_SLIDER_RESET\r\n} from '../action/delSliderAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DEL_SLIDER:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DEL_SLIDER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DEL_SLIDER_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DEL_SLIDER_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const SAVE_TESTIMONIAL = 'SAVE_TESTIMONIAL'\r\nexport const SAVE_TESTIMONIAL_SUCCESS = 'SAVE_TESTIMONIAL_SUCCESS'\r\nexport const SAVE_TESTIMONIAL_FAIL = 'SAVE_TESTIMONIAL_FAIL'\r\nexport const SAVE_TESTIMONIAL_RESET = 'SAVE_TESTIMONIAL_RESET'\r\n\r\nexport const saveTestimonial = (params) => {\r\n    return { type: SAVE_TESTIMONIAL, params }\r\n}\r\n\r\nexport const saveTestimonialSuccess = (response) => {\r\n    return { type: SAVE_TESTIMONIAL_SUCCESS, response }\r\n}\r\n\r\nexport const saveTestimonialFail = (response) => {\r\n    return { type: SAVE_TESTIMONIAL_FAIL, response }\r\n}\r\n\r\nexport const saveTestimonialReset = () => {\r\n    return { type: SAVE_TESTIMONIAL_RESET }\r\n}","import {\r\n    SAVE_TESTIMONIAL,\r\n    SAVE_TESTIMONIAL_SUCCESS,\r\n    SAVE_TESTIMONIAL_FAIL,\r\n    SAVE_TESTIMONIAL_RESET\r\n} from '../action/saveTestimonialAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SAVE_TESTIMONIAL:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case SAVE_TESTIMONIAL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n            }\r\n\r\n        case SAVE_TESTIMONIAL_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case SAVE_TESTIMONIAL_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_TESTIMONIAL_LIST = 'GET_TESTIMONIAL_LIST'\r\nexport const GET_TESTIMONIAL_LIST_SUCCESS = 'GET_TESTIMONIAL_LIST_SUCCESS'\r\nexport const GET_TESTIMONIAL_LIST_FAIL = 'GET_TESTIMONIAL_LIST_FAIL'\r\nexport const GET_TESTIMONIAL_LIST_RESET = 'GET_TESTIMONIAL_LIST_RESET'\r\n\r\nexport const getTestimonialList = (params) => {\r\n    return { type: GET_TESTIMONIAL_LIST, params }\r\n}\r\n\r\nexport const getTestimonialListSuccess = (response) => {\r\n    return { type: GET_TESTIMONIAL_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getTestimonialListFail = (response) => {\r\n    return { type: GET_TESTIMONIAL_LIST_FAIL, response }\r\n}\r\n\r\nexport const getTestimonialListReset = () => {\r\n    return { type: GET_TESTIMONIAL_LIST_RESET }\r\n}","import {\r\n    GET_TESTIMONIAL_LIST,\r\n    GET_TESTIMONIAL_LIST_SUCCESS,\r\n    GET_TESTIMONIAL_LIST_FAIL,\r\n    GET_TESTIMONIAL_LIST_RESET\r\n} from '../action/getTestimonialListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_TESTIMONIAL_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_TESTIMONIAL_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_TESTIMONIAL_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_TESTIMONIAL_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DEL_TESTIMONIAL = 'DEL_TESTIMONIAL'\r\nexport const DEL_TESTIMONIAL_SUCCESS = 'DEL_TESTIMONIAL_SUCCESS'\r\nexport const DEL_TESTIMONIAL_FAIL = 'DEL_TESTIMONIAL_FAIL'\r\nexport const DEL_TESTIMONIAL_RESET = 'DEL_TESTIMONIAL_RESET'\r\n\r\nexport const delTestimonial = (params) => {\r\n    return { type: DEL_TESTIMONIAL, params }\r\n}\r\n\r\nexport const delTestimonialSuccess = (response) => {\r\n    return { type: DEL_TESTIMONIAL_SUCCESS, response }\r\n}\r\n\r\nexport const delTestimonialFail = (response) => {\r\n    return { type: DEL_TESTIMONIAL_FAIL, response }\r\n}\r\n\r\nexport const delTestimonialReset = () => {\r\n    return { type: DEL_TESTIMONIAL_RESET }\r\n}","import {\r\n    DEL_TESTIMONIAL,\r\n    DEL_TESTIMONIAL_SUCCESS,\r\n    DEL_TESTIMONIAL_FAIL,\r\n    DEL_TESTIMONIAL_RESET\r\n} from '../action/delTestimonialAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DEL_TESTIMONIAL:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DEL_TESTIMONIAL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DEL_TESTIMONIAL_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DEL_TESTIMONIAL_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const ADD_DESCRIPTION = 'ADD_DESCRIPTION'\r\nexport const ADD_DESCRIPTION_SUCCESS = 'ADD_DESCRIPTION_SUCCESS'\r\nexport const ADD_DESCRIPTION_FAIL = 'ADD_DESCRIPTION_FAIL'\r\nexport const ADD_DESCRIPTION_RESET = 'ADD_DESCRIPTION_RESET'\r\n\r\nexport const addDescription = (params) => {\r\n    return { type: ADD_DESCRIPTION, params }\r\n}\r\n\r\nexport const addDescriptionSuccess = (response) => {\r\n    return { type: ADD_DESCRIPTION_SUCCESS, response }\r\n}\r\n\r\nexport const addDescriptionFail = (response) => {\r\n    return { type: ADD_DESCRIPTION_FAIL, response }\r\n}\r\n\r\nexport const addDescriptionReset = () => {\r\n    return { type: ADD_DESCRIPTION_RESET }\r\n}","import {\r\n    ADD_DESCRIPTION,\r\n    ADD_DESCRIPTION_SUCCESS,\r\n    ADD_DESCRIPTION_FAIL,\r\n    ADD_DESCRIPTION_RESET\r\n} from '../action/addDescriptionAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case ADD_DESCRIPTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case ADD_DESCRIPTION_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case ADD_DESCRIPTION_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const LIST_DESCRIPTION = 'LIST_DESCRIPTION'\r\nexport const LIST_DESCRIPTION_SUCCESS = 'LIST_DESCRIPTION_SUCCESS'\r\nexport const LIST_DESCRIPTION_FAIL = 'LIST_DESCRIPTION_FAIL'\r\nexport const LIST_DESCRIPTION_RESET = 'LIST_DESCRIPTION_RESET'\r\n\r\nexport const listDescription = (params) => {\r\n    return { type: LIST_DESCRIPTION, params }\r\n}\r\n\r\nexport const listDescriptionSuccess = (response) => {\r\n    return { type: LIST_DESCRIPTION_SUCCESS, response }\r\n}\r\n\r\nexport const listDescriptionFail = (response) => {\r\n    return { type: LIST_DESCRIPTION_FAIL, response }\r\n}\r\n\r\nexport const listDescriptionReset = () => {\r\n    return { type: LIST_DESCRIPTION_RESET }\r\n}","import {\r\n    LIST_DESCRIPTION,\r\n    LIST_DESCRIPTION_SUCCESS,\r\n    LIST_DESCRIPTION_FAIL,\r\n    LIST_DESCRIPTION_RESET\r\n} from '../action/listDescriptionAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case LIST_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case LIST_DESCRIPTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case LIST_DESCRIPTION_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case LIST_DESCRIPTION_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_DESCRIPTION_VIEW = 'GET_DESCRIPTION_VIEW'\r\nexport const GET_DESCRIPTION_VIEW_SUCCESS = 'GET_DESCRIPTION_VIEW_SUCCESS'\r\nexport const GET_DESCRIPTION_VIEW_FAIL = 'GET_DESCRIPTION_VIEW_FAIL'\r\nexport const GET_DESCRIPTION_VIEW_RESET = 'GET_DESCRIPTION_VIEW_RESET'\r\n\r\nexport const getDescriptionView = (params) => {\r\n    return { type: GET_DESCRIPTION_VIEW, params }\r\n}\r\n\r\nexport const getDescriptionViewSuccess = (response) => {\r\n    return { type: GET_DESCRIPTION_VIEW_SUCCESS, response }\r\n}\r\n\r\nexport const getDescriptionViewFail = (response) => {\r\n    return { type: GET_DESCRIPTION_VIEW_FAIL, response }\r\n}\r\n\r\nexport const getDescriptionViewReset = () => {\r\n    return { type: GET_DESCRIPTION_VIEW_RESET }\r\n}","import {\r\n    GET_DESCRIPTION_VIEW,\r\n    GET_DESCRIPTION_VIEW_SUCCESS,\r\n    GET_DESCRIPTION_VIEW_FAIL,\r\n    GET_DESCRIPTION_VIEW_RESET\r\n} from '../action/getDescriptionViewAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    description: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_DESCRIPTION_VIEW:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_DESCRIPTION_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                description: action.response.data.description\r\n            }\r\n\r\n        case GET_DESCRIPTION_VIEW_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_DESCRIPTION_VIEW_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_DESCRIPTION = 'UPDATE_DESCRIPTION'\r\nexport const UPDATE_DESCRIPTION_SUCCESS = 'UPDATE_DESCRIPTION_SUCCESS'\r\nexport const UPDATE_DESCRIPTION_FAIL = 'UPDATE_DESCRIPTION_FAIL'\r\nexport const UPDATE_DESCRIPTION_RESET = 'UPDATE_DESCRIPTION_RESET'\r\n\r\nexport const updateDescription = (params) => {\r\n    return { type: UPDATE_DESCRIPTION, params }\r\n}\r\n\r\nexport const updateDescriptionSuccess = (response) => {\r\n    return { type: UPDATE_DESCRIPTION_SUCCESS, response }\r\n}\r\n\r\nexport const updateDescriptionFail = (response) => {\r\n    return { type: UPDATE_DESCRIPTION_FAIL, response }\r\n}\r\n\r\nexport const updateDescriptionReset = () => {\r\n    return { type: UPDATE_DESCRIPTION_RESET }\r\n}","import {\r\n    UPDATE_DESCRIPTION,\r\n    UPDATE_DESCRIPTION_SUCCESS,\r\n    UPDATE_DESCRIPTION_FAIL,\r\n    UPDATE_DESCRIPTION_RESET\r\n} from '../action/updateDescriptionAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_DESCRIPTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_DESCRIPTION_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_DESCRIPTION_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const ADD_REL_PROD = 'ADD_REL_PROD'\r\nexport const ADD_REL_PROD_SUCCESS = 'ADD_REL_PROD_SUCCESS'\r\nexport const ADD_REL_PROD_FAIL = 'ADD_REL_PROD_FAIL'\r\nexport const ADD_REL_PROD_RESET = 'ADD_REL_PROD_RESET'\r\n\r\nexport const addRelProd = (params) => {\r\n    return { type: ADD_REL_PROD, params }\r\n}\r\n\r\nexport const addRelProdSuccess = (response) => {\r\n    return { type: ADD_REL_PROD_SUCCESS, response }\r\n}\r\n\r\nexport const addRelProdFail = (response) => {\r\n    return { type: ADD_REL_PROD_FAIL, response }\r\n}\r\n\r\nexport const addRelProdReset = () => {\r\n    return { type: ADD_REL_PROD_RESET }\r\n}","import {\r\n    ADD_REL_PROD,\r\n    ADD_REL_PROD_SUCCESS,\r\n    ADD_REL_PROD_FAIL,\r\n    ADD_REL_PROD_RESET\r\n} from '../action/addRelProdAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_REL_PROD:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case ADD_REL_PROD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case ADD_REL_PROD_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case ADD_REL_PROD_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const LIST_REL_PROD = 'LIST_REL_PROD'\r\nexport const LIST_REL_PROD_SUCCESS = 'LIST_REL_PROD_SUCCESS'\r\nexport const LIST_REL_PROD_FAIL = 'LIST_REL_PROD_FAIL'\r\nexport const LIST_REL_PROD_RESET = 'LIST_REL_PROD_RESET'\r\n\r\nexport const listRelProd = (params) => {\r\n    return { type: LIST_REL_PROD, params }\r\n}\r\n\r\nexport const listRelProdSuccess = (response) => {\r\n    return { type: LIST_REL_PROD_SUCCESS, response }\r\n}\r\n\r\nexport const listRelProdFail = (response) => {\r\n    return { type: LIST_REL_PROD_FAIL, response }\r\n}\r\n\r\nexport const listRelProdReset = () => {\r\n    return { type: LIST_REL_PROD_RESET }\r\n}","import {\r\n    LIST_REL_PROD,\r\n    LIST_REL_PROD_SUCCESS,\r\n    LIST_REL_PROD_FAIL,\r\n    LIST_REL_PROD_RESET\r\n} from '../action/listRelProdAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case LIST_REL_PROD:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case LIST_REL_PROD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case LIST_REL_PROD_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case LIST_REL_PROD_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const DEL_REL_PROD = 'DEL_REL_PROD'\r\nexport const DEL_REL_PROD_SUCCESS = 'DEL_REL_PROD_SUCCESS'\r\nexport const DEL_REL_PROD_FAIL = 'DEL_REL_PROD_FAIL'\r\nexport const DEL_REL_PROD_RESET = 'DEL_REL_PROD_RESET'\r\n\r\nexport const delRelProd = (params) => {\r\n    return { type: DEL_REL_PROD, params }\r\n}\r\n\r\nexport const delRelProdSuccess = (response) => {\r\n    return { type: DEL_REL_PROD_SUCCESS, response }\r\n}\r\n\r\nexport const delRelProdFail = (response) => {\r\n    return { type: DEL_REL_PROD_FAIL, response }\r\n}\r\n\r\nexport const delRelProdReset = () => {\r\n    return { type: DEL_REL_PROD_RESET }\r\n}","import {\r\n    DEL_REL_PROD,\r\n    DEL_REL_PROD_SUCCESS,\r\n    DEL_REL_PROD_FAIL,\r\n    DEL_REL_PROD_RESET\r\n} from '../action/delRelProdAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case DEL_REL_PROD:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case DEL_REL_PROD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case DEL_REL_PROD_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case DEL_REL_PROD_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_SETTING = 'UPDATE_SETTING'\r\nexport const UPDATE_SETTING_SUCCESS = 'UPDATE_SETTING_SUCCESS'\r\nexport const UPDATE_SETTING_FAIL = 'UPDATE_SETTING_FAIL'\r\nexport const UPDATE_SETTING_RESET = 'SAVE_TESTIMONIAL_RESET'\r\n\r\nexport const updateSetting = (params) => {\r\n    return { type: UPDATE_SETTING, params }\r\n}\r\n\r\nexport const updateSettingSuccess = (response) => {\r\n    return { type: UPDATE_SETTING_SUCCESS, response }\r\n}\r\n\r\nexport const updateSettingFail = (response) => {\r\n    return { type: UPDATE_SETTING_FAIL, response }\r\n}\r\n\r\nexport const updateSettingReset = () => {\r\n    return { type: UPDATE_SETTING_RESET }\r\n}","import {\r\n    UPDATE_SETTING,\r\n    UPDATE_SETTING_SUCCESS,\r\n    UPDATE_SETTING_FAIL,\r\n    UPDATE_SETTING_RESET\r\n} from '../action/updateSettingAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_SETTING:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_SETTING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_SETTING_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_SETTING_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_SETTING = 'GET_SETTING'\r\nexport const GET_SETTING_SUCCESS = 'GET_SETTING_SUCCESS'\r\nexport const GET_SETTING_FAIL = 'GET_SETTING_FAIL'\r\nexport const GET_SETTING_RESET = 'GET_SETTING_RESET'\r\n\r\nexport const getSetting = (params) => {\r\n    return { type: GET_SETTING, params }\r\n}\r\n\r\nexport const getSettingSuccess = (response) => {\r\n    return { type: GET_SETTING_SUCCESS, response }\r\n}\r\n\r\nexport const getSettingFail = (response) => {\r\n    return { type: GET_SETTING_FAIL, response }\r\n}\r\n\r\nexport const getSettingReset = () => {\r\n    return { type: GET_SETTING_RESET }\r\n}","import {\r\n    GET_SETTING,\r\n    GET_SETTING_SUCCESS,\r\n    GET_SETTING_FAIL,\r\n    GET_SETTING_RESET\r\n} from '../action/getSettingAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_SETTING:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_SETTING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_SETTING_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_SETTING_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_SHIPPING = 'UPDATE_SHIPPING'\r\nexport const UPDATE_SHIPPING_SUCCESS = 'UPDATE_SHIPPING_SUCCESS'\r\nexport const UPDATE_SHIPPING_FAIL = 'UPDATE_SHIPPING_FAIL'\r\nexport const UPDATE_SHIPPING_RESET = 'UPDATE_SHIPPING_RESET'\r\n\r\nexport const updateShipping = (params) => {\r\n    return { type: UPDATE_SHIPPING, params }\r\n}\r\n\r\nexport const updateShippingSuccess = (response) => {\r\n    return { type: UPDATE_SHIPPING_SUCCESS, response }\r\n}\r\n\r\nexport const updateShippingFail = (response) => {\r\n    return { type: UPDATE_SHIPPING_FAIL, response }\r\n}\r\n\r\nexport const updateShippingReset = () => {\r\n    return { type: UPDATE_SHIPPING_RESET }\r\n}","import {\r\n    UPDATE_SHIPPING,\r\n    UPDATE_SHIPPING_SUCCESS,\r\n    UPDATE_SHIPPING_FAIL,\r\n    UPDATE_SHIPPING_RESET\r\n} from '../action/updateShippingAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_SHIPPING:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_SHIPPING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_SHIPPING_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_SHIPPING_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_VOUCHER_LIST = 'GET_VOUCHER_LIST'\r\nexport const GET_VOUCHER_LIST_SUCCESS = 'GET_VOUCHER_LIST_SUCCESS'\r\nexport const GET_VOUCHER_LIST_FAIL = 'GET_VOUCHER_LIST_FAIL'\r\nexport const GET_VOUCHER_LIST_RESET = 'GET_VOUCHER_LIST_RESET'\r\n\r\nexport const getVoucherList = (params) => {\r\n    return { type: GET_VOUCHER_LIST, params }\r\n}\r\n\r\nexport const getVoucherListSuccess = (response) => {\r\n    return { type: GET_VOUCHER_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getVoucherListFail = (response) => {\r\n    return { type: GET_VOUCHER_LIST_FAIL, response }\r\n}\r\n\r\nexport const getVoucherListReset = () => {\r\n    return { type: GET_VOUCHER_LIST_RESET }\r\n}","import {\r\n    GET_VOUCHER_LIST,\r\n    GET_VOUCHER_LIST_SUCCESS,\r\n    GET_VOUCHER_LIST_FAIL,\r\n    GET_VOUCHER_LIST_RESET\r\n} from '../action/getVoucherListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_VOUCHER_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_VOUCHER_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_VOUCHER_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_VOUCHER_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const CREATE_VOUCHER = 'CREATE_VOUCHER'\r\nexport const CREATE_VOUCHER_SUCCESS = 'CREATE_VOUCHER_SUCCESS'\r\nexport const CREATE_VOUCHER_FAIL = 'CREATE_VOUCHER_FAIL'\r\nexport const CREATE_VOUCHER_RESET = 'CREATE_VOUCHER_RESET'\r\n\r\nexport const createVoucher = (params) => {\r\n    return { type: CREATE_VOUCHER, params }\r\n}\r\n\r\nexport const createVoucherSuccess = (response) => {\r\n    return { type: CREATE_VOUCHER_SUCCESS, response }\r\n}\r\n\r\nexport const createVoucherFail = (response) => {\r\n    return { type: CREATE_VOUCHER_FAIL, response }\r\n}\r\n\r\nexport const createVoucherReset = () => {\r\n    return { type: CREATE_VOUCHER_RESET }\r\n}","import {\r\n    CREATE_VOUCHER,\r\n    CREATE_VOUCHER_SUCCESS,\r\n    CREATE_VOUCHER_FAIL,\r\n    CREATE_VOUCHER_RESET\r\n} from '../action/createVoucherAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    data: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CREATE_VOUCHER:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case CREATE_VOUCHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                data: action.response.data.data,\r\n            }\r\n\r\n        case CREATE_VOUCHER_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case CREATE_VOUCHER_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_VOUCHER_VIEW = 'GET_VOUCHER_VIEW'\r\nexport const GET_VOUCHER_VIEW_SUCCESS = 'GET_VOUCHER_VIEW_SUCCESS'\r\nexport const GET_VOUCHER_VIEW_FAIL = 'GET_VOUCHER_VIEW_FAIL'\r\nexport const GET_VOUCHER_VIEW_RESET = 'GET_VOUCHER_VIEW_RESET'\r\n\r\nexport const getVoucherView = (params) => {\r\n    return { type: GET_VOUCHER_VIEW, params }\r\n}\r\n\r\nexport const getVoucherViewSuccess = (response) => {\r\n    return { type: GET_VOUCHER_VIEW_SUCCESS, response }\r\n}\r\n\r\nexport const getVoucherViewFail = (response) => {\r\n    return { type: GET_VOUCHER_VIEW_FAIL, response }\r\n}\r\n\r\nexport const getVoucherViewReset = () => {\r\n    return { type: GET_VOUCHER_VIEW_RESET }\r\n}","import {\r\n    GET_VOUCHER_VIEW,\r\n    GET_VOUCHER_VIEW_SUCCESS,\r\n    GET_VOUCHER_VIEW_FAIL,\r\n    GET_VOUCHER_VIEW_RESET\r\n} from '../action/getVoucherViewAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    coupon: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_VOUCHER_VIEW:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_VOUCHER_VIEW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                coupon: action.response.data.coupon,\r\n            }\r\n\r\n        case GET_VOUCHER_VIEW_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_VOUCHER_VIEW_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_VOUCHER = 'UPDATE_VOUCHER'\r\nexport const UPDATE_VOUCHER_SUCCESS = 'UPDATE_VOUCHER_SUCCESS'\r\nexport const UPDATE_VOUCHER_FAIL = 'UPDATE_VOUCHER_FAIL'\r\nexport const UPDATE_VOUCHER_RESET = 'UPDATE_VOUCHER_RESET'\r\n\r\nexport const updateVoucher = (params) => {\r\n    return { type: UPDATE_VOUCHER, params }\r\n}\r\n\r\nexport const updateVoucherSuccess = (response) => {\r\n    return { type: UPDATE_VOUCHER_SUCCESS, response }\r\n}\r\n\r\nexport const updateVoucherFail = (response) => {\r\n    return { type: UPDATE_VOUCHER_FAIL, response }\r\n}\r\n\r\nexport const updateVoucherReset = () => {\r\n    return { type: UPDATE_VOUCHER_RESET }\r\n}","import {\r\n    UPDATE_VOUCHER,\r\n    UPDATE_VOUCHER_SUCCESS,\r\n    UPDATE_VOUCHER_FAIL,\r\n    UPDATE_VOUCHER_RESET\r\n} from '../action/updateVoucherAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_VOUCHER:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_VOUCHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message\r\n            }\r\n\r\n        case UPDATE_VOUCHER_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_VOUCHER_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_ORDER_LIST = 'GET_ORDER_LIST'\r\nexport const GET_ORDER_LIST_SUCCESS = 'GET_ORDER_LIST_SUCCESS'\r\nexport const GET_ORDER_LIST_FAIL = 'GET_ORDER_LIST_FAIL'\r\nexport const GET_ORDER_LIST_RESET = 'GET_ORDER_LIST_RESET'\r\n\r\nexport const getOrderList = (params) => {\r\n    return { type: GET_ORDER_LIST, params }\r\n}\r\n\r\nexport const getOrderListSuccess = (response) => {\r\n    return { type: GET_ORDER_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getOrderListFail = (response) => {\r\n    return { type: GET_ORDER_LIST_FAIL, response }\r\n}\r\n\r\nexport const getOrderListReset = () => {\r\n    return { type: GET_ORDER_LIST_RESET }\r\n}","import {\r\n    GET_ORDER_LIST,\r\n    GET_ORDER_LIST_SUCCESS,\r\n    GET_ORDER_LIST_FAIL,\r\n    GET_ORDER_LIST_RESET\r\n} from '../action/getOrderListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ORDER_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_ORDER_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_ORDER_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_ORDER_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_CUSTOMER_LIST = 'GET_CUSTOMER_LIST'\r\nexport const GET_CUSTOMER_LIST_SUCCESS = 'GET_CUSTOMER_LIST_SUCCESS'\r\nexport const GET_CUSTOMER_LIST_FAIL = 'GET_CUSTOMER_LIST_FAIL'\r\nexport const GET_CUSTOMER_LIST_RESET = 'GET_CUSTOMER_LIST_RESET'\r\n\r\nexport const getCustomerList = (params) => {\r\n    return { type: GET_CUSTOMER_LIST, params }\r\n}\r\n\r\nexport const getCustomerListSuccess = (response) => {\r\n    return { type: GET_CUSTOMER_LIST_SUCCESS, response }\r\n}\r\n\r\nexport const getCustomerListFail = (response) => {\r\n    return { type: GET_CUSTOMER_LIST_FAIL, response }\r\n}\r\n\r\nexport const getCustomerListReset = () => {\r\n    return { type: GET_CUSTOMER_LIST_RESET }\r\n}","import {\r\n    GET_CUSTOMER_LIST,\r\n    GET_CUSTOMER_LIST_SUCCESS,\r\n    GET_CUSTOMER_LIST_FAIL,\r\n    GET_CUSTOMER_LIST_RESET\r\n} from '../action/getCustomerListAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    list: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CUSTOMER_LIST:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_CUSTOMER_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                list: action.response.data.list\r\n            }\r\n\r\n        case GET_CUSTOMER_LIST_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_CUSTOMER_LIST_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const GET_ORDER_DETAILS = 'GET_ORDER_DETAILS'\r\nexport const GET_ORDER_DETAILS_SUCCESS = 'GET_ORDER_DETAILS_SUCCESS'\r\nexport const GET_ORDER_DETAILS_FAIL = ' GET_ORDER_DETAILS_FAIL'\r\nexport const GET_ORDER_DETAILS_RESET = 'GET_ORDER_DETAILS_RESET'\r\n\r\nexport const getOrderDetails = (params) => {\r\n    return { type: GET_ORDER_DETAILS, params }\r\n}\r\n\r\nexport const getOrderDetailsSuccess = (response) => {\r\n    return { type: GET_ORDER_DETAILS_SUCCESS, response }\r\n}\r\n\r\nexport const getOrderDetailsFail = (response) => {\r\n    return { type: GET_ORDER_DETAILS_FAIL, response }\r\n}\r\n\r\nexport const getOrderDetailsReset = () => {\r\n    return { type: GET_ORDER_DETAILS_RESET }\r\n}","import {\r\n    GET_ORDER_DETAILS,\r\n    GET_ORDER_DETAILS_SUCCESS,\r\n    GET_ORDER_DETAILS_FAIL,\r\n    GET_ORDER_DETAILS_RESET\r\n} from '../action/getOrderDetailsAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    order: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ORDER_DETAILS:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case GET_ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                order: action.response.data.order,\r\n            }\r\n\r\n        case GET_ORDER_DETAILS_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case GET_ORDER_DETAILS_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const UPDATE_ORDER = 'UPDATE_ORDER'\r\nexport const UPDATE_ORDER_SUCCESS = 'UPDATE_ORDER_SUCCESS'\r\nexport const UPDATE_ORDER_FAIL = 'UPDATE_ORDER_FAIL'\r\nexport const UPDATE_ORDER_RESET = 'UPDATE_ORDER_RESET'\r\n\r\nexport const updateOrder = (params) => {\r\n    return { type: UPDATE_ORDER, params }\r\n}\r\n\r\nexport const updateOrderSuccess = (response) => {\r\n    return { type: UPDATE_ORDER_SUCCESS, response }\r\n}\r\n\r\nexport const updateOrderFail = (response) => {\r\n    return { type: UPDATE_ORDER_FAIL, response }\r\n}\r\n\r\nexport const updateOrderReset = () => {\r\n    return { type: UPDATE_ORDER_RESET }\r\n}","import {\r\n    UPDATE_ORDER,\r\n    UPDATE_ORDER_SUCCESS,\r\n    UPDATE_ORDER_FAIL,\r\n    UPDATE_ORDER_RESET\r\n} from '../action/updateOrderAction'\r\nimport strings from \"../strings.json\"\r\n\r\nconst initialState = {\r\n    apiState: \"\", // loading, success, error\r\n    message: \"\",\r\n    data: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_ORDER:\r\n            return {\r\n                ...state,\r\n                apiState: \"loading\",\r\n            }\r\n\r\n        case UPDATE_ORDER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                apiState: \"success\",\r\n                message: action.response.data.message,\r\n                data: action.response.data.data,\r\n            }\r\n\r\n        case UPDATE_ORDER_FAIL:\r\n            return {\r\n                ...state,\r\n                apiState: \"error\",\r\n                message: action.response && action.response.data && action.response.data.message || strings.api_err_msg,\r\n            }\r\n\r\n        case UPDATE_ORDER_RESET:\r\n            return initialState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport login from './reducer/loginReducer'\r\nimport getCategoryTree from './reducer/getCategoryTreeReducer'\r\nimport createCategory from './reducer/createCategoryReducer'\r\nimport getCategoryView from './reducer/getCategoryViewReducer'\r\nimport updateCategory from './reducer/updateCategoryReducer'\r\nimport deleteCategory from './reducer/deleteCategoryReducer'\r\nimport createProduct from './reducer/createProductReducer'\r\nimport getProductList from './reducer/getProductListReducer'\r\nimport getProductView from './reducer/getProductViewReducer'\r\nimport updateProduct from './reducer/updateProductReducer'\r\nimport getAttributeList from './reducer/getAttributeListReducer'\r\nimport saveAttributeForVariants from './reducer/saveAttributeForVariantsReducer'\r\nimport createProductVariant from './reducer/createProductVariantReducer'\r\nimport getProductVariantList from './reducer/getProductVariantListReducer'\r\nimport saveSpProdData from './reducer/saveSpProdDataReducer'\r\nimport saveSpImgData from './reducer/saveSpImgDataReducer'\r\nimport saveProdImg from './reducer/saveProdImgReducer'\r\nimport delProdImg from './reducer/delProdImgReducer'\r\nimport markImgThumb from './reducer/markImgThumbReducer'\r\nimport delProdVar from './reducer/delProdVarReducer'\r\nimport saveSliderImages from './reducer/saveSliderImagesReducer'\r\nimport getSliderList from './reducer/getSliderListReducer'\r\nimport delSlider from './reducer/delSliderReducer'\r\nimport saveTestimonial from './reducer/saveTestimonialReducer'\r\nimport getTestimonialList from './reducer/getTestimonialListReducer'\r\nimport delTestimonial from './reducer/delTestimonialReducer'\r\nimport addDescription from './reducer/addDescriptionReducer'\r\nimport listDescription from './reducer/listDescriptionReducer'\r\nimport getDescriptionView from './reducer/getDescriptionViewReducer'\r\nimport updateDescription from './reducer/updateDescriptionReducer'\r\nimport addRelProd from './reducer/addRelProdReducer'\r\nimport listRelProd from './reducer/listRelProdReducer'\r\nimport delRelProd from './reducer/delRelProdReducer'\r\nimport updateSetting from './reducer/updateSettingReducer'\r\nimport getSetting from './reducer/getSettingReducer'\r\nimport updateShipping from './reducer/updateShippingReducer'\r\nimport getVoucherList from './reducer/getVoucherListReducer'\r\nimport createVoucher from './reducer/createVoucherReducer'\r\nimport getVoucherView from './reducer/getVoucherViewReducer'\r\nimport updateVoucher from './reducer/updateVoucherReducer'\r\nimport getOrderList from './reducer/getOrderListReducer'\r\nimport getCustomerList from './reducer/getCustomerListReducer'\r\nimport getOrderDetails from './reducer/getOrderDetailsReducer'\r\nimport updateOrder from './reducer/updateOrderReducer'\r\n\r\n\r\nexport default combineReducers({\r\n    login,\r\n    getCategoryTree,\r\n    createCategory,\r\n    getCategoryView,\r\n    updateCategory,\r\n    deleteCategory,\r\n    createProduct,\r\n    getProductList,\r\n    getProductView,\r\n    updateProduct,\r\n    getAttributeList,\r\n    saveAttributeForVariants,\r\n    createProductVariant,\r\n    getProductVariantList,\r\n    saveSpProdData,\r\n    saveSpImgData,\r\n    saveProdImg,\r\n    delProdImg,\r\n    markImgThumb,\r\n    delProdVar,\r\n    saveSliderImages,\r\n    getSliderList,\r\n    delSlider,\r\n    saveTestimonial,\r\n    getTestimonialList,\r\n    delTestimonial,\r\n    addDescription,\r\n    listDescription,\r\n    getDescriptionView,\r\n    updateDescription,\r\n    addRelProd,\r\n    listRelProd,\r\n    delRelProd,\r\n    updateSetting,\r\n    getSetting,\r\n    updateShipping,\r\n    getVoucherList,\r\n    createVoucher,\r\n    getVoucherView,\r\n    updateVoucher,\r\n    getOrderList,\r\n    getCustomerList,\r\n    getOrderDetails,\r\n    updateOrder,\r\n})","const cnf = {\r\n    api: {\r\n        base_url: \"http://localhost:9000/\",\r\n    },\r\n    s3_base_url: \"https://piky.s3.ap-south-1.amazonaws.com/\",\r\n    domain: \"http://vemastore.com/\",\r\n    tinyKey: \"ttsmwue3os1saqfv35rgby36y5c207v31hpuyqtbpoffrm0l\"\r\n}\r\n\r\nif (process.env.REACT_APP_ENV === \"production\") {\r\n    cnf.api.base_url = \"http://api.vemastore.com/\"\r\n}\r\nexport default cnf;","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const loginApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}user/login`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default loginApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    LOGIN,\r\n    loginSuccess,\r\n    loginFail\r\n} from '../action/loginAction'\r\n\r\nimport loginApi from '../api/loginApi'\r\n\r\nexport function* loginSaga(action) {\r\n    try {\r\n        const response = yield call(() => loginApi(action.params))\r\n        yield put(loginSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(loginFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getCategoryTreeApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}category/tree`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getCategoryTreeApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_CATEGORY_TREE,\r\n    getCategoryTreeSuccess,\r\n    getCategoryTreeFail\r\n} from '../action/getCategoryTreeAction'\r\n\r\nimport getCategoryTreeApi from '../api/getCategoryTreeApi'\r\n\r\nexport function* getCategoryTreeSaga(action) {\r\n    try {\r\n        const response = yield call(() => getCategoryTreeApi(action.params))\r\n        yield put(getCategoryTreeSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getCategoryTreeFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_CATEGORY_TREE, getCategoryTreeSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const createCategoryApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}category/create`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default createCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    CREATE_CATEGORY,\r\n    createCategorySuccess,\r\n    createCategoryFail\r\n} from '../action/createCategoryAction'\r\n\r\nimport createCategoryApi from '../api/createCategoryApi'\r\n\r\nexport function* createCategorySaga(action) {\r\n    try {\r\n        const response = yield call(() => createCategoryApi(action.params))\r\n        yield put(createCategorySuccess(response, action))\r\n    } catch (e) {\r\n        yield put(createCategoryFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(CREATE_CATEGORY, createCategorySaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getCategoryViewApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}category/view`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getCategoryViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_CATEGORY_VIEW,\r\n    getCategoryViewSuccess,\r\n    getCategoryViewFail\r\n} from '../action/getCategoryViewAction'\r\n\r\nimport getCategoryViewApi from '../api/getCategoryViewApi'\r\n\r\nexport function* getCategoryViewSaga(action) {\r\n    try {\r\n        const response = yield call(() => getCategoryViewApi(action.params))\r\n        yield put(getCategoryViewSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getCategoryViewFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_CATEGORY_VIEW, getCategoryViewSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateCategoryApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}category/update`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default updateCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_CATEGORY,\r\n    updateCategorySuccess,\r\n    updateCategoryFail\r\n} from '../action/updateCategoryAction'\r\n\r\nimport updateCategoryApi from '../api/updateCategoryApi'\r\n\r\nexport function* updateCategorySaga(action) {\r\n    try {\r\n        const response = yield call(() => updateCategoryApi(action.params))\r\n        yield put(updateCategorySuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateCategoryFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_CATEGORY, updateCategorySaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const deleteCategoryApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}category/delete`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default deleteCategoryApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DELETE_CATEGORY,\r\n    deleteCategorySuccess,\r\n    deleteCategoryFail\r\n} from '../action/deleteCategoryAction'\r\n\r\nimport deleteCategoryApi from '../api/deleteCategoryApi'\r\n\r\nexport function* deleteCategorySaga(action) {\r\n    try {\r\n        const response = yield call(() => deleteCategoryApi(action.params))\r\n        yield put(deleteCategorySuccess(response, action))\r\n    } catch (e) {\r\n        yield put(deleteCategoryFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DELETE_CATEGORY, deleteCategorySaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const createProductApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/create`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default createProductApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    CREATE_PRODUCT,\r\n    createProductSuccess,\r\n    createProductFail\r\n} from '../action/createProductAction'\r\n\r\nimport createProductApi from '../api/createProductApi'\r\n\r\nexport function* createProductSaga(action) {\r\n    try {\r\n        const response = yield call(() => createProductApi(action.params))\r\n        yield put(createProductSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(createProductFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(CREATE_PRODUCT, createProductSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getProductListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/admin-list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getProductListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_PRODUCT_LIST,\r\n    getProductListSuccess,\r\n    getProductListFail\r\n} from '../action/getProductListAction'\r\n\r\nimport getProductListApi from '../api/getProductListApi'\r\n\r\nexport function* getProductListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getProductListApi(action.params))\r\n        yield put(getProductListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getProductListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_PRODUCT_LIST, getProductListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getProductViewApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/admin-view`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getProductViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_PRODUCT_VIEW,\r\n    getProductViewSuccess,\r\n    getProductViewFail\r\n} from '../action/getProductViewAction'\r\n\r\nimport getProductViewApi from '../api/getProductViewApi'\r\n\r\nexport function* getProductViewSaga(action) {\r\n    try {\r\n        const response = yield call(() => getProductViewApi(action.params))\r\n        yield put(getProductViewSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getProductViewFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_PRODUCT_VIEW, getProductViewSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateProductApi = async (params) => {\r\n\r\n    console.log(\"params\", params);\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/update`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default updateProductApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_PRODUCT,\r\n    updateProductSuccess,\r\n    updateProductFail\r\n} from '../action/updateProductAction'\r\n\r\nimport updateProductApi from '../api/updateProductApi'\r\n\r\nexport function* updateProductSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateProductApi(action.params))\r\n        yield put(updateProductSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateProductFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_PRODUCT, updateProductSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getAttributeListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}attribute/list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getAttributeListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_ATTRIBUTE_LIST,\r\n    getAttributeListSuccess,\r\n    getAttributeListFail\r\n} from '../action/getAttributeListAction'\r\n\r\nimport getAttributeListApi from '../api/getAttributeListApi'\r\n\r\nexport function* getAttributeListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getAttributeListApi(action.params))\r\n        yield put(getAttributeListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getAttributeListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_ATTRIBUTE_LIST, getAttributeListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveAttributeForVariantsApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/save-attribute-for-variants`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveAttributeForVariantsApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_ATTRIBUTE_FOR_VARIANTS,\r\n    saveAttributeForVariantsSuccess,\r\n    saveAttributeForVariantsFail\r\n} from '../action/saveAttributeForVariantsAction'\r\n\r\nimport saveAttributeForVariantsApi from '../api/saveAttributeForVariantsApi'\r\n\r\nexport function* saveAttributeForVariantsSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveAttributeForVariantsApi(action.params))\r\n        yield put(saveAttributeForVariantsSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveAttributeForVariantsFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_ATTRIBUTE_FOR_VARIANTS, saveAttributeForVariantsSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const createProductVariantApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/create-variant`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default createProductVariantApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    CREATE_PRODUCT_VARIANT,\r\n    createProductVariantSuccess,\r\n    createProductVariantFail\r\n} from '../action/createProductVariantAction'\r\n\r\nimport createProductVariantApi from '../api/createProductVariantApi'\r\n\r\nexport function* createProductVariantSaga(action) {\r\n    try {\r\n        const response = yield call(() => createProductVariantApi(action.params))\r\n        yield put(createProductVariantSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(createProductVariantFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(CREATE_PRODUCT_VARIANT, createProductVariantSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getProductVariantListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/variant-list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getProductVariantListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_PRODUCT_VARIANT_LIST,\r\n    getProductVariantListSuccess,\r\n    getProductVariantListFail\r\n} from '../action/getProductVariantListAction'\r\n\r\nimport getProductVariantListApi from '../api/getProductVariantListApi'\r\n\r\nexport function* getProductVariantListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getProductVariantListApi(action.params))\r\n        yield put(getProductVariantListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getProductVariantListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_PRODUCT_VARIANT_LIST, getProductVariantListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveSpProdDataApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/save-sp-prod-data`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveSpProdDataApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_SP_PROD_DATA,\r\n    saveSpProdDataSuccess,\r\n    saveSpProdDataFail\r\n} from '../action/saveSpProdDataAction'\r\n\r\nimport saveSpProdDataApi from '../api/saveSpProdDataApi'\r\n\r\nexport function* saveSpProdDataSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveSpProdDataApi(action.params))\r\n        yield put(saveSpProdDataSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveSpProdDataFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_SP_PROD_DATA, saveSpProdDataSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveSpImgDataApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/save-sp-img-data`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveSpImgDataApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_SP_IMG_DATA,\r\n    saveSpImgDataSuccess,\r\n    saveSpImgDataFail\r\n} from '../action/saveSpImgDataAction'\r\n\r\nimport saveSpImgDataApi from '../api/saveSpImgDataApi'\r\n\r\nexport function* saveSpImgDataSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveSpImgDataApi(action.params))\r\n        yield put(saveSpImgDataSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveSpImgDataFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_SP_IMG_DATA, saveSpImgDataSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveProdImgApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/save-prod-img`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveProdImgApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_PROD_IMG,\r\n    saveProdImgSuccess,\r\n    saveProdImgFail\r\n} from '../action/saveProdImgAction'\r\n\r\nimport saveProdImgApi from '../api/saveProdImgApi'\r\n\r\nexport function* saveProdImgSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveProdImgApi(action.params))\r\n        yield put(saveProdImgSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveProdImgFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_PROD_IMG, saveProdImgSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const delProdImgApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/del-prod-img`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default delProdImgApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DEL_PROD_IMG,\r\n    delProdImgSuccess,\r\n    delProdImgFail\r\n} from '../action/delProdImgAction'\r\n\r\nimport delProdImgApi from '../api/delProdImgApi'\r\n\r\nexport function* delProdImgSaga(action) {\r\n    try {\r\n        const response = yield call(() => delProdImgApi(action.params))\r\n        yield put(delProdImgSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(delProdImgFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DEL_PROD_IMG, delProdImgSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const markImgThumbApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/mark-img-thumb`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default markImgThumbApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    MARK_IMG_THUMB,\r\n    markImgThumbSuccess,\r\n    markImgThumbFail\r\n} from '../action/markImgThumbAction'\r\n\r\nimport markImgThumbApi from '../api/markImgThumbApi'\r\n\r\nexport function* markImgThumbSaga(action) {\r\n    try {\r\n        const response = yield call(() => markImgThumbApi(action.params))\r\n        yield put(markImgThumbSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(markImgThumbFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(MARK_IMG_THUMB, markImgThumbSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const delProdVarApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/del-prod-var`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default delProdVarApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DEL_PROD_VAR,\r\n    delProdVarSuccess,\r\n    delProdVarFail\r\n} from '../action/delProdVarAction'\r\n\r\nimport delProdVarApi from '../api/delProdVarApi'\r\n\r\nexport function* delProdVarSaga(action) {\r\n    try {\r\n        const response = yield call(() => delProdVarApi(action.params))\r\n        yield put(delProdVarSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(delProdVarFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DEL_PROD_VAR, delProdVarSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveSliderImagesApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}home/save-slider-imgs`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveSliderImagesApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_SLIDER_IMAGES,\r\n    saveSliderImagesSuccess,\r\n    saveSliderImagesFail\r\n} from '../action/saveSliderImagesAction'\r\n\r\nimport saveSliderImagesApi from '../api/saveSliderImagesApi'\r\n\r\nexport function* saveSliderImagesSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveSliderImagesApi(action.params))\r\n        yield put(saveSliderImagesSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveSliderImagesFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_SLIDER_IMAGES, saveSliderImagesSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getSliderListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}home/slider-list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getSliderListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_SLIDER_LIST,\r\n    getSliderListSuccess,\r\n    getSliderListFail\r\n} from '../action/getSliderListAction'\r\n\r\nimport getSliderListApi from '../api/getSliderListApi'\r\n\r\nexport function* getSliderListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getSliderListApi(action.params))\r\n        yield put(getSliderListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getSliderListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_SLIDER_LIST, getSliderListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const delSliderApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}home/del-slider`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default delSliderApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DEL_SLIDER,\r\n    delSliderSuccess,\r\n    delSliderFail\r\n} from '../action/delSliderAction'\r\n\r\nimport delSliderApi from '../api/delSliderApi'\r\n\r\nexport function* delSliderSaga(action) {\r\n    try {\r\n        const response = yield call(() => delSliderApi(action.params))\r\n        yield put(delSliderSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(delSliderFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DEL_SLIDER, delSliderSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const saveTestimonialApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}testimonial/save`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default saveTestimonialApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    SAVE_TESTIMONIAL,\r\n    saveTestimonialSuccess,\r\n    saveTestimonialFail\r\n} from '../action/saveTestimonialAction'\r\n\r\nimport saveTestimonialApi from '../api/saveTestimonialApi'\r\n\r\nexport function* saveTestimonialSaga(action) {\r\n    try {\r\n        const response = yield call(() => saveTestimonialApi(action.params))\r\n        yield put(saveTestimonialSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(saveTestimonialFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(SAVE_TESTIMONIAL, saveTestimonialSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getTestimonialListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}testimonial/list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getTestimonialListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_TESTIMONIAL_LIST,\r\n    getTestimonialListSuccess,\r\n    getTestimonialListFail\r\n} from '../action/getTestimonialListAction'\r\n\r\nimport getTestimonialListApi from '../api/getTestimonialListApi'\r\n\r\nexport function* getTestimonialListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getTestimonialListApi(action.params))\r\n        yield put(getTestimonialListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getTestimonialListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_TESTIMONIAL_LIST, getTestimonialListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const delTestimonialApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}testimonial/delete`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default delTestimonialApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DEL_TESTIMONIAL,\r\n    delTestimonialSuccess,\r\n    delTestimonialFail\r\n} from '../action/delTestimonialAction'\r\n\r\nimport delTestimonialApi from '../api/delTestimonialApi'\r\n\r\nexport function* delTestimonialSaga(action) {\r\n    try {\r\n        const response = yield call(() => delTestimonialApi(action.params))\r\n        yield put(delTestimonialSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(delTestimonialFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DEL_TESTIMONIAL, delTestimonialSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const addDescriptionApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/add-description`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default addDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    ADD_DESCRIPTION,\r\n    addDescriptionSuccess,\r\n    addDescriptionFail\r\n} from '../action/addDescriptionAction'\r\n\r\nimport addDescriptionApi from '../api/addDescriptionApi'\r\n\r\nexport function* addDescriptionSaga(action) {\r\n    try {\r\n        const response = yield call(() => addDescriptionApi(action.params))\r\n        yield put(addDescriptionSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(addDescriptionFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(ADD_DESCRIPTION, addDescriptionSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const listDescriptionApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/list-description`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default listDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    LIST_DESCRIPTION,\r\n    listDescriptionSuccess,\r\n    listDescriptionFail\r\n} from '../action/listDescriptionAction'\r\n\r\nimport listDescriptionApi from '../api/listDescriptionApi'\r\n\r\nexport function* listDescriptionSaga(action) {\r\n    try {\r\n        const response = yield call(() => listDescriptionApi(action.params))\r\n        yield put(listDescriptionSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(listDescriptionFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(LIST_DESCRIPTION, listDescriptionSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getDescriptionViewApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/description-view`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getDescriptionViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_DESCRIPTION_VIEW,\r\n    getDescriptionViewSuccess,\r\n    getDescriptionViewFail\r\n} from '../action/getDescriptionViewAction'\r\n\r\nimport getDescriptionViewApi from '../api/getDescriptionViewApi'\r\n\r\nexport function* getDescriptionViewSaga(action) {\r\n    try {\r\n        const response = yield call(() => getDescriptionViewApi(action.params))\r\n        yield put(getDescriptionViewSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getDescriptionViewFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_DESCRIPTION_VIEW, getDescriptionViewSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateDescriptionApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/update-description`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default updateDescriptionApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_DESCRIPTION,\r\n    updateDescriptionSuccess,\r\n    updateDescriptionFail\r\n} from '../action/updateDescriptionAction'\r\n\r\nimport updateDescriptionApi from '../api/updateDescriptionApi'\r\n\r\nexport function* updateDescriptionSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateDescriptionApi(action.params))\r\n        yield put(updateDescriptionSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateDescriptionFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_DESCRIPTION, updateDescriptionSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const addRelProdApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/add-rel-prod`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default addRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    ADD_REL_PROD,\r\n    addRelProdSuccess,\r\n    addRelProdFail\r\n} from '../action/addRelProdAction'\r\n\r\nimport addRelProdApi from '../api/addRelProdApi'\r\n\r\nexport function* addRelProdSaga(action) {\r\n    try {\r\n        const response = yield call(() => addRelProdApi(action.params))\r\n        yield put(addRelProdSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(addRelProdFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(ADD_REL_PROD, addRelProdSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const listRelProdApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}product/list-rel-prod`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default listRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    LIST_REL_PROD,\r\n    listRelProdSuccess,\r\n    listRelProdFail\r\n} from '../action/listRelProdAction'\r\n\r\nimport listRelProdApi from '../api/listRelProdApi'\r\n\r\nexport function* listRelProdSaga(action) {\r\n    try {\r\n        const response = yield call(() => listRelProdApi(action.params))\r\n        yield put(listRelProdSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(listRelProdFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(LIST_REL_PROD, listRelProdSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const delRelProdApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}product/del-rel-prod`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default delRelProdApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    DEL_REL_PROD,\r\n    delRelProdSuccess,\r\n    delRelProdFail\r\n} from '../action/delRelProdAction'\r\n\r\nimport delRelProdApi from '../api/delRelProdApi'\r\n\r\nexport function* delRelProdSaga(action) {\r\n    try {\r\n        const response = yield call(() => delRelProdApi(action.params))\r\n        yield put(delRelProdSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(delRelProdFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(DEL_REL_PROD, delRelProdSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateSettingApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}setting/update`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n    return response\r\n}\r\n\r\nexport default updateSettingApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_SETTING,\r\n    updateSettingSuccess,\r\n    updateSettingFail\r\n} from '../action/updateSettingAction'\r\n\r\nimport updateSettingApi from '../api/updateSettingApi'\r\n\r\nexport function* updateProductSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateSettingApi(action.params))\r\n        yield put(updateSettingSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateSettingFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_SETTING, updateProductSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getSettingApi = async (params) => {\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}setting/list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getSettingApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_SETTING,\r\n    getSettingSuccess,\r\n    getSettingFail\r\n} from '../action/getSettingAction'\r\n\r\nimport getSettingApi from '../api/getSettingApi'\r\n\r\nexport function* getSettingSaga(action) {\r\n    try {\r\n        const response = yield call(() => getSettingApi(action.params))\r\n        yield put(getSettingSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getSettingFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_SETTING, getSettingSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const UpdateShippingApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}setting/updateShipping`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default UpdateShippingApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_SHIPPING,\r\n    updateShippingSuccess,\r\n    updateShippingFail\r\n} from '../action/updateShippingAction'\r\n\r\nimport updateShippingApi from '../api/updateShippingApi'\r\n\r\nexport function* updateShippingSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateShippingApi(action.params))\r\n        yield put(updateShippingSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateShippingFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_SHIPPING, updateShippingSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getVoucherListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}coupon/list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getVoucherListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_VOUCHER_LIST,\r\n    getVoucherListSuccess,\r\n    getVoucherListFail\r\n} from '../action/getVoucherListAction'\r\n\r\nimport getVoucherListApi from '../api/getVoucherListApi'\r\n\r\nexport function* getVoucherListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getVoucherListApi(action.params))\r\n        yield put(getVoucherListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getVoucherListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_VOUCHER_LIST, getVoucherListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const createVoucherApi = async (params) => {\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}coupon/create`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default createVoucherApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    CREATE_VOUCHER,\r\n    createVoucherSuccess,\r\n    createVoucherFail\r\n} from '../action/createVoucherAction'\r\n\r\nimport createVoucherApi from '../api/createVoucherApi'\r\n\r\nexport function* createVoucherSaga(action) {\r\n    try {\r\n        const response = yield call(() => createVoucherApi(action.params))\r\n        yield put(createVoucherSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(createVoucherFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(CREATE_VOUCHER, createVoucherSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getVoucherViewApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}coupon/view`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getVoucherViewApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_VOUCHER_VIEW,\r\n    getVoucherViewSuccess,\r\n    getVoucherViewFail\r\n} from '../action/getVoucherViewAction'\r\n\r\nimport getVoucherViewApi from '../api/getVoucherViewApi'\r\n\r\nexport function* getVoucherViewSaga(action) {\r\n    try {\r\n        const response = yield call(() => getVoucherViewApi(action.params))\r\n        yield put(getVoucherViewSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getVoucherViewFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_VOUCHER_VIEW, getVoucherViewSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateVoucherApi = async (params) => {\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}coupon/update`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default updateVoucherApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_VOUCHER,\r\n    updateVoucherSuccess,\r\n    updateVoucherFail\r\n} from '../action/updateVoucherAction'\r\n\r\nimport updateVoucherApi from '../api/updateVoucherApi'\r\n\r\nexport function* updateVoucherSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateVoucherApi(action.params))\r\n        yield put(updateVoucherSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateVoucherFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_VOUCHER, updateVoucherSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getOrderListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}order/admin_list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getOrderListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_ORDER_LIST,\r\n    getOrderListSuccess,\r\n    getOrderListFail\r\n} from '../action/getOrderListAction'\r\n\r\nimport getOrderListApi from '../api/getOrderListApi'\r\n\r\nexport function* getOrderListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getOrderListApi(action.params))\r\n        yield put(getOrderListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getOrderListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_ORDER_LIST, getOrderListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getCustomerListApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}customer/admin_list`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getCustomerListApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_CUSTOMER_LIST,\r\n    getCustomerListSuccess,\r\n    getCustomerListFail\r\n} from '../action/getCustomerListAction'\r\n\r\nimport getCustomerListApi from '../api/getCustomerListApi'\r\n\r\nexport function* getCustomerListSaga(action) {\r\n    try {\r\n        const response = yield call(() => getCustomerListApi(action.params))\r\n        yield put(getCustomerListSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getCustomerListFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_CUSTOMER_LIST, getCustomerListSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const getOrderDetailsApi = async (params) => {\r\n\r\n    const response = await axios({\r\n        method: 'get',\r\n        url: `${cnf.api.base_url}order/admin-order-details`,\r\n        params: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default getOrderDetailsApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    GET_ORDER_DETAILS,\r\n    getOrderDetailsSuccess,\r\n    getOrderDetailsFail\r\n} from '../action/getOrderDetailsAction'\r\n\r\nimport getOrderDetailsApi from '../api/getOrderDetailsApi'\r\n\r\nexport function* getOrderDetailsSaga(action) {\r\n    try {\r\n        const response = yield call(() => getOrderDetailsApi(action.params))\r\n        yield put(getOrderDetailsSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(getOrderDetailsFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(GET_ORDER_DETAILS, getOrderDetailsSaga);\r\n}","import cnf from '../config'\r\nimport axios from 'axios'\r\n\r\nexport const updateOrderApi = async (params) => {\r\n    const response = await axios({\r\n        method: 'post',\r\n        url: `${cnf.api.base_url}order/admin-order-update`,\r\n        data: params,\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    })\r\n\r\n    return response\r\n}\r\n\r\nexport default updateOrderApi","import { call, put, takeLatest } from 'redux-saga/effects'\r\n\r\nimport {\r\n    UPDATE_ORDER,\r\n    updateOrderSuccess,\r\n    updateOrderFail\r\n} from '../action/updateOrderAction'\r\n\r\nimport updateOrderApi from '../api/updateOrderApi'\r\n\r\nexport function* updateOrderSaga(action) {\r\n    try {\r\n        const response = yield call(() => updateOrderApi(action.params))\r\n        yield put(updateOrderSuccess(response, action))\r\n    } catch (e) {\r\n        yield put(updateOrderFail(e.response, action))\r\n    }\r\n}\r\n\r\nexport default function* MySaga() {\r\n    yield takeLatest(UPDATE_ORDER, updateOrderSaga);\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport reducer from './reducer'\r\n\r\n// sagas\r\nimport loginSaga from './saga/loginSaga'\r\nimport getCategoryTreeSaga from './saga/getCategoryTreeSaga'\r\nimport createCategorySaga from './saga/createCategorySaga'\r\nimport getCategoryViewSaga from './saga/getCategoryViewSaga'\r\nimport updateCategorySaga from './saga/updateCategorySaga'\r\nimport deleteCategorySaga from './saga/deleteCategorySaga'\r\nimport createProductSaga from './saga/createProductSaga'\r\nimport getProductListSaga from './saga/getProductListSaga'\r\nimport getProductViewSaga from './saga/getProductViewSaga'\r\nimport updateProductSaga from './saga/updateProductSaga'\r\nimport getAttributeListSaga from './saga/getAttributeListSaga'\r\nimport saveAttributeForVariantsSaga from './saga/saveAttributeForVariantsSaga'\r\nimport createProductVariantSaga from './saga/createProductVariantSaga'\r\nimport getProductVariantListSaga from './saga/getProductVariantListSaga'\r\nimport saveSpProdDataSaga from './saga/saveSpProdDataSaga'\r\nimport saveSpImgDataSaga from './saga/saveSpImgDataSaga'\r\nimport saveProdImgSaga from './saga/saveProdImgSaga'\r\nimport delProdImgSaga from './saga/delProdImgSaga'\r\nimport markImgThumbSaga from './saga/markImgThumbSaga'\r\nimport delProdVarSaga from './saga/delProdVarSaga'\r\nimport saveSliderImagesSaga from './saga/saveSliderImagesSaga'\r\nimport getSliderListSaga from './saga/getSliderListSaga'\r\nimport delSliderSaga from './saga/delSliderSaga'\r\nimport saveTestimonialSaga from './saga/saveTestimonialSaga'\r\nimport getTestimonialListSaga from './saga/getTestimonialListSaga'\r\nimport delTestimonialSaga from './saga/delTestimonialSaga'\r\nimport addDescriptionSaga from './saga/addDescriptionSaga'\r\nimport listDescriptionSaga from './saga/listDescriptionSaga'\r\nimport getDescriptionViewSaga from './saga/getDescriptionViewSaga'\r\nimport updateDescriptionSaga from './saga/updateDescriptionSaga'\r\nimport addRelProdSaga from './saga/addRelProdSaga'\r\nimport listRelProdSaga from './saga/listRelProdSaga'\r\nimport delRelProdSaga from './saga/delRelProdSaga'\r\nimport updateSettingSaga from './saga/updateSettingSaga'\r\nimport getSettingSaga from './saga/getSettingSaga'\r\nimport updateShippingSaga from './saga/updateShippingSaga'\r\nimport getVoucherListSaga from './saga/getVoucherListSaga'\r\nimport createVoucherSaga from './saga/createVoucherSaga'\r\nimport getVoucherViewSaga from './saga/getVoucherViewSaga'\r\nimport updateVoucherSaga from './saga/updateVoucherSaga'\r\nimport getOrderListSaga from './saga/getOrderListSaga'\r\nimport getCustomerListSaga from './saga/getCustomerListSaga'\r\nimport getOrderDetailsSaga from './saga/getOrderDetailsSaga'\r\nimport updateOrderSaga from './saga/updateOrderSaga'\r\n\r\n\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n// mount it on the Store\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(sagaMiddleware)\r\n    )\r\n)\r\n\r\n// then run the saga\r\nsagaMiddleware.run(loginSaga)\r\nsagaMiddleware.run(getCategoryTreeSaga)\r\nsagaMiddleware.run(createCategorySaga)\r\nsagaMiddleware.run(getCategoryViewSaga)\r\nsagaMiddleware.run(updateCategorySaga)\r\nsagaMiddleware.run(deleteCategorySaga)\r\nsagaMiddleware.run(createProductSaga)\r\nsagaMiddleware.run(getProductListSaga)\r\nsagaMiddleware.run(getProductViewSaga)\r\nsagaMiddleware.run(updateProductSaga)\r\nsagaMiddleware.run(getAttributeListSaga)\r\nsagaMiddleware.run(saveAttributeForVariantsSaga)\r\nsagaMiddleware.run(createProductVariantSaga)\r\nsagaMiddleware.run(getProductVariantListSaga)\r\nsagaMiddleware.run(saveSpProdDataSaga)\r\nsagaMiddleware.run(saveSpImgDataSaga)\r\nsagaMiddleware.run(saveProdImgSaga)\r\nsagaMiddleware.run(delProdImgSaga)\r\nsagaMiddleware.run(markImgThumbSaga)\r\nsagaMiddleware.run(delProdVarSaga)\r\nsagaMiddleware.run(saveSliderImagesSaga)\r\nsagaMiddleware.run(getSliderListSaga)\r\nsagaMiddleware.run(delSliderSaga)\r\nsagaMiddleware.run(saveTestimonialSaga)\r\nsagaMiddleware.run(getTestimonialListSaga)\r\nsagaMiddleware.run(delTestimonialSaga)\r\nsagaMiddleware.run(addDescriptionSaga)\r\nsagaMiddleware.run(listDescriptionSaga)\r\nsagaMiddleware.run(getDescriptionViewSaga)\r\nsagaMiddleware.run(updateDescriptionSaga)\r\nsagaMiddleware.run(addRelProdSaga)\r\nsagaMiddleware.run(listRelProdSaga)\r\nsagaMiddleware.run(delRelProdSaga)\r\nsagaMiddleware.run(updateSettingSaga)\r\nsagaMiddleware.run(getSettingSaga)\r\nsagaMiddleware.run(updateShippingSaga)\r\nsagaMiddleware.run(getVoucherListSaga)\r\nsagaMiddleware.run(createVoucherSaga)\r\nsagaMiddleware.run(getVoucherViewSaga)\r\nsagaMiddleware.run(updateVoucherSaga)\r\nsagaMiddleware.run(getOrderListSaga)\r\nsagaMiddleware.run(getCustomerListSaga)\r\nsagaMiddleware.run(getOrderDetailsSaga)\r\nsagaMiddleware.run(updateOrderSaga)\r\n\r\n\r\n\r\n// render the application\r\nexport default store","import React from \"react\"\r\nimport { Menu } from 'antd';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst Sidebar = props => {\r\n    return (\r\n        <div>\r\n            <div style={{ padding: \"16px 8px\", textAlign: \"center\" }} >\r\n                <h1 style={{ color: \"#fff\" }} >LOGO</h1>\r\n            </div>\r\n            <Menu mode=\"inline\" theme=\"dark\" >\r\n                <Menu.Item key=\"category\"><Link to=\"/category/list\">Category</Link></Menu.Item>\r\n                <Menu.Item key=\"products\"><Link to=\"/product/list\">Product</Link></Menu.Item>\r\n                <Menu.Item key=\"settings\"><Link to=\"/setting\">Setting</Link></Menu.Item>\r\n                <Menu.Item key=\"ShippingCharge\"><Link to=\"/shipping_configuration\">Shipping Configuration</Link></Menu.Item>\r\n                <Menu.SubMenu title=\"Home Page\" key=\"Home Page\">\r\n                    <Menu.Item key=\"slider\"><Link to=\"/home/slider\">Slider</Link></Menu.Item>\r\n                    <Menu.Item key=\"testimonial\"><Link to=\"/home/testimonial\">Testimonial</Link></Menu.Item>\r\n                </Menu.SubMenu>\r\n                <Menu.Item key=\"VoucherList\"><Link to=\"/voucher_management/list\">Voucher Management</Link></Menu.Item>\r\n                <Menu.Item key=\"OrderList\"><Link to=\"/order_management/list\">Order Management</Link></Menu.Item>\r\n                <Menu.Item key=\"CustomerList\"><Link to=\"/customer/list\">Customers</Link></Menu.Item>\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import cnf from '../src/config'\r\n\r\nexport const isLogin = () => {\r\n    const PikyUserToken = localStorage.getItem('PikyUserToken')\r\n\r\n    if (PikyUserToken) return true\r\n    else return false\r\n}\r\n\r\nexport const validateImageFile = (file) => {\r\n    let ext\r\n    if (file.type == \"image/jpeg\") ext = \"jpeg\"\r\n    if (file.type == \"image/png\") ext = \"png\"\r\n    if (file.type == \"image/jpg\") ext = \"jpg\"\r\n    if (file.type == \"image/webp\") ext = \"webp\"\r\n\r\n    if (ext) {\r\n        return { status: true, ext: ext }\r\n    } else {\r\n        return { status: false }\r\n    }\r\n}\r\n\r\nexport const getUserToken = () => {\r\n    return localStorage.getItem('PikyUserToken') || null\r\n}\r\n\r\nexport const getS3SingedUrl = async (filename, ext, file) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${cnf.api.base_url}get-singed-url-for-put?filename=${filename}&ext=${ext}`, {\r\n            method: 'get',\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\",\r\n                \"authorization\": `Bearer ${getUserToken()}`\r\n            }\r\n        }).then(res => {\r\n            const result = res.json();\r\n            return Promise.all([result]);\r\n        }).then((result) => {\r\n            resolve({ ['url']: result[0].url, ['filename']: `${filename}.${ext}` })\r\n        }).catch(console.log)\r\n    })\r\n}","import React from 'react'\r\nimport { Link, Redirect, Route } from 'react-router-dom'\r\nimport { isLogin } from '../utils'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            isLogin() ?\r\n                <Component {...props} />\r\n                : <Redirect to=\"/login\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute","import React from \"react\"\r\nimport { Avatar, Popover, Button, Space } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div style={{\r\n            height: 50, background: \"#fff\", padding: \"4px 8px\", display: \"flex\", alignItems: \"center\",\r\n            justifyContent: \"space-between\", borderBottom: \"solid 1px #ccc\", position: \"sticky\", top: 0,\r\n            zIndex: 5\r\n        }} >\r\n            <div>\r\n                <h1 style={{ margin: 0 }} >{props.title}</h1>\r\n            </div>\r\n            <Space>\r\n                {props.actionBtn}\r\n                <Popover placement=\"bottomLeft\" title={null} content={\r\n                    <Link to=\"/logout\"><Button type=\"dashed\" >Log Out</Button></Link>\r\n                } trigger=\"click\">\r\n                    <a><Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} /></a>\r\n                </Popover>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import styled from \"styled-components\";\r\n\r\nexport const LoginContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    background: #f5f5f5;\r\n`\r\n\r\nexport const PageContainer = styled.div`\r\n    background: #fff;\r\n    padding: 8px 16px;\r\n    min-height: calc(100vh - 50px);\r\n\r\n    ${({ list }) => list && `\r\n        padding: 0;\r\n    `}\r\n`","import React from \"react\"\r\nimport { Button } from \"antd\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\nconst Home = props => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <PageContainer>\r\n                <h1>Home</h1>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* action */\r\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\r\nimport { createCategory, createCategoryReset } from \"../../action/createCategoryAction\"\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\n\r\nconst { TreeNode } = TreeSelect\r\n\r\nconst CategoryAdd = props => {\r\n    /* variables */\r\n    const {\r\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\r\n        createCategory, createCategoryReset, createCategoryState\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        parent_category_id: null,\r\n        name: \"\",\r\n        url_key: \"\",\r\n        image: \"\",\r\n        banner_img: \"\",\r\n        m_banner_img: \"\"\r\n    })\r\n    const [image, set_image] = useState(null)\r\n    const [banner_img, set_banner_img] = useState(null)\r\n    const [m_banner_img, set_m_banner_img] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getCategoryTreeReset()\r\n            createCategoryReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getCategoryTree()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (createCategoryState.apiState === \"success\") {\r\n            setRedirect([true, '/category/list'])\r\n            message.success(createCategoryState.message);\r\n        }\r\n\r\n        if (createCategoryState.apiState === \"error\") {\r\n            createCategoryReset()\r\n            message.error(createCategoryState.message);\r\n        }\r\n    }, [createCategoryState])\r\n\r\n    /* function */\r\n    const categoryOptions = (tree) => {\r\n        let finalJsx = []\r\n        tree.map(node => {\r\n            if (node.children.length > 0) {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\r\n                )\r\n            } else {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name} />\r\n                )\r\n            }\r\n        })\r\n        return finalJsx\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let image_filename = uuidv4()\r\n        let banner_img_filename = uuidv4()\r\n        let m_banner_img_filename = uuidv4()\r\n\r\n        let imageValRes = validateImageFile(image)\r\n        let bannerImageValRes = validateImageFile(banner_img)\r\n        let mBannerImageValRes = validateImageFile(m_banner_img)\r\n\r\n        if (!imageValRes.status) {\r\n            alert(\"Image's extension is not allowed.\")\r\n            return\r\n        }\r\n        if (!bannerImageValRes.status) {\r\n            alert(\"Banner Image's extension is not allowed.\")\r\n            return\r\n        }\r\n        if (!mBannerImageValRes.status) {\r\n            alert(\"Mobile Banner Image's extension is not allowed.\")\r\n            return\r\n        }\r\n\r\n        setSubmitLoading(true)\r\n\r\n        let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\r\n        await axios.put(s3UrlRes1.url, image)\r\n\r\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\r\n        await axios.put(s3UrlRes2.url, banner_img)\r\n\r\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\r\n        await axios.put(s3UrlRes3.url, m_banner_img)\r\n\r\n        formData.image = `${image_filename}.${imageValRes.ext}`\r\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\r\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\r\n\r\n        createCategory(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Category Add\"\r\n            />\r\n            <PageContainer>\r\n\r\n                <Form layout=\"vertical\" onFinish={handleSubmit}>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Parent Category (Empty for Root level category)\"\r\n                                name=\"parent_category_id\"\r\n                            >\r\n                                <TreeSelect\r\n                                    showSearch\r\n                                    filterTreeNode={(input, treeNode) =>\r\n                                        treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                    style={{ width: '100%' }}\r\n                                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                    placeholder=\"Blank for root category\"\r\n                                    allowClear\r\n                                    treeDefaultExpandAll\r\n                                    onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\r\n                                >\r\n                                    {categoryOptions(getCategoryTreeState.tree)}\r\n                                </TreeSelect>\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                        <Col span=\"12\" >\r\n                            <Form.Item\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"name\" placeholder=\"Enter Category Name\"\r\n                                    onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\" >\r\n                            <Form.Item\r\n                                label=\"URL Key\"\r\n                                name=\"url_key\"\r\n                                rules={[\r\n                                    { required: true, message: 'Required' },\r\n                                    {\r\n                                        pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\r\n                                        message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\r\n                                    onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\r\n                                    addonBefore={cnf.domain}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                        <Col span=\"12\" >\r\n                            <Form.Item\r\n                                label=\"Image\"\r\n                                name=\"image\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"image\"\r\n                                    onChange={e => set_image(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\" >\r\n                            <Form.Item\r\n                                label=\"Banner Image\"\r\n                                name=\"banner_img\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"banner_img\"\r\n                                    onChange={e => set_banner_img(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                        <Col span=\"12\" >\r\n                            <Form.Item\r\n                                label=\"Banner Image For Mobile\"\r\n                                name=\"m_banner_img\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"m_banner_img\"\r\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getCategoryTreeState: state.getCategoryTree,\r\n    createCategoryState: state.createCategory,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\r\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\r\n    createCategory: (params) => dispatch(createCategory(params)),\r\n    createCategoryReset: () => dispatch(createCategoryReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryAdd)","import React, { useState, useEffect } from \"react\"\r\nimport { Button, Tree, Skeleton, Space, Popconfirm, message } from \"antd\"\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* action */\r\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\r\nimport { deleteCategory, deleteCategoryReset } from \"../../action/deleteCategoryAction\"\r\n\r\n/* others */\r\nimport cnf from \"../../config\"\r\n\r\nconst CategoryList = props => {\r\n    /* variables */\r\n    const {\r\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\r\n        deleteCategory, deleteCategoryReset, deleteCategoryState\r\n    } = props\r\n    const [redirect, setRedirect] = useState([false, \"\"])\r\n    const [refresh, setRefresh] = useState(0)\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getCategoryTree()\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (deleteCategoryState.apiState === \"success\") {\r\n            message.success(deleteCategoryState.message);\r\n            deleteCategoryReset()\r\n            setRefresh(refresh + 1)\r\n        }\r\n\r\n        if (deleteCategoryState.apiState === \"error\") {\r\n            message.error(deleteCategoryState.message);\r\n            deleteCategoryReset()\r\n        }\r\n    }, [deleteCategoryState])\r\n\r\n    /* functions */\r\n    const getTreeData = (tree) => {\r\n        let finalArray = []\r\n        tree.map(node => {\r\n            if (node.children.length > 0) {\r\n                finalArray.push(\r\n                    {\r\n                        title: (<Space>\r\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\r\n                            <span>{node.name}</span>\r\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\r\n                            <Popconfirm\r\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\r\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\r\n                                okText=\"Delete\"\r\n                                cancelText=\"Cancel\"\r\n                                okType=\"danger\"\r\n                            >\r\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\r\n                            </Popconfirm>\r\n                        </Space>),\r\n                        key: node.id,\r\n                        children: getTreeData(node.children)\r\n                    }\r\n                )\r\n            } else {\r\n                finalArray.push(\r\n                    {\r\n                        title: (<Space>\r\n                            <img src={`${cnf.s3_base_url}${node.image}`} alt=\"\" style={{ width: 40 }} />\r\n                            <span>{node.name}</span>\r\n                            <Link to={`/category/${node.id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\r\n                            <Popconfirm\r\n                                title=\"Are you sure to delete this category? !!Note: Deleteting this category, all the children will be deleted also!!\"\r\n                                onConfirm={() => deleteCategory({ category_id: node.id })}\r\n                                okText=\"Delete\"\r\n                                cancelText=\"Cancel\"\r\n                                okType=\"danger\"\r\n                            >\r\n                                <Button size=\"small\" icon={<DeleteOutlined />} loading={deleteCategoryState.apiState === \"loading\"} />\r\n                            </Popconfirm>\r\n                        </Space>),\r\n                        key: node.id,\r\n                    }\r\n                )\r\n            }\r\n\r\n        })\r\n        return finalArray\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n\r\n            <Header\r\n                title=\"Category List\"\r\n                actionBtn={<Link to='/category/add'><Button >New</Button></Link>}\r\n            />\r\n            <PageContainer>\r\n                {getCategoryTreeState.apiState === \"loading\" &&\r\n                    <Skeleton active />}\r\n\r\n                {getCategoryTreeState.apiState === \"error\" &&\r\n                    <h1>Something is not right</h1>}\r\n\r\n                {getCategoryTreeState.apiState === \"success\" &&\r\n                    <>\r\n                        <div style={{ border: \"solid 1px #ccc\", width: \"max-content\", padding: 10 }} >\r\n                            <Tree\r\n                                treeData={getTreeData(getCategoryTreeState.tree)}\r\n                                showLine={{ showLeafIcon: false }}\r\n                                showIcon={false}\r\n                                selectable={false}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getCategoryTreeState: state.getCategoryTree,\r\n    deleteCategoryState: state.deleteCategory,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\r\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\r\n    deleteCategory: (params) => dispatch(deleteCategory(params)),\r\n    deleteCategoryReset: () => dispatch(deleteCategoryReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message, Skeleton } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport _ from \"lodash\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* action */\r\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\r\nimport { getCategoryView, getCategoryViewReset } from \"../../action/getCategoryViewAction\"\r\nimport { updateCategory, updateCategoryReset } from \"../../action/updateCategoryAction\"\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\n\r\nconst { TreeNode } = TreeSelect\r\n\r\nconst CategoryEdit = props => {\r\n    /* variables */\r\n    const category_id = props.match.params.category_id\r\n    const {\r\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\r\n        getCategoryView, getCategoryViewReset, getCategoryViewState,\r\n        updateCategory, updateCategoryReset, updateCategoryState,\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        category_id: category_id,\r\n        parent_category_id: null,\r\n        name: \"\",\r\n        url_key: \"\",\r\n        image: \"\",\r\n        banner_img: \"\",\r\n        m_banner_img: \"\"\r\n    })\r\n    const [image, set_image] = useState(null)\r\n    const [banner_img, set_banner_img] = useState(null)\r\n    const [m_banner_img, set_m_banner_img] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [form] = Form.useForm()\r\n    const [imgChanged, setImgChanged] = useState({\r\n        image: false,\r\n        banner_img: false,\r\n        m_banner_img: false,\r\n    })\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getCategoryTreeReset()\r\n            getCategoryViewReset()\r\n            updateCategoryReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getCategoryTree()\r\n        getCategoryView({ category_id: category_id })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getCategoryViewState.apiState === \"success\") {\r\n            form.setFieldsValue({\r\n                parent_category_id: getCategoryViewState.category.parent_category_id,\r\n                name: getCategoryViewState.category.name,\r\n                url_key: getCategoryViewState.category.url_key,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['parent_category_id']: getCategoryViewState.category.parent_category_id,\r\n                ['name']: getCategoryViewState.category.name,\r\n                ['url_key']: getCategoryViewState.category.url_key,\r\n                ['image']: getCategoryViewState.category.image,\r\n                ['banner_img']: getCategoryViewState.category.banner_img,\r\n                ['m_banner_img']: getCategoryViewState.category.m_banner_img,\r\n            })\r\n        }\r\n    }, [getCategoryViewState])\r\n\r\n    useEffect(() => {\r\n        if (updateCategoryState.apiState === \"success\") {\r\n            setRedirect([true, '/category/list'])\r\n            message.success(updateCategoryState.message);\r\n        }\r\n\r\n        if (updateCategoryState.apiState === \"error\") {\r\n            updateCategoryReset()\r\n            message.error(updateCategoryState.message);\r\n            setSubmitLoading(false)\r\n        }\r\n    }, [updateCategoryState])\r\n\r\n\r\n\r\n    /* function */\r\n    const categoryOptions = (tree) => {\r\n        let finalJsx = []\r\n        tree.map(node => {\r\n            if (node.children.length > 0) {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\r\n                )\r\n            } else {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name} />\r\n                )\r\n            }\r\n        })\r\n        return finalJsx\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        if (category_id == formData.parent_category_id) {\r\n            alert(\"You can't select same category as parent category!\")\r\n            return\r\n        }\r\n\r\n\r\n        let image_filename = uuidv4()\r\n        let banner_img_filename = uuidv4()\r\n        let m_banner_img_filename = uuidv4()\r\n\r\n        let imageValRes\r\n        let bannerImageValRes\r\n        let mBannerImageValRes\r\n\r\n        if (imgChanged.image) {\r\n            imageValRes = validateImageFile(image)\r\n            if (!imageValRes.status) {\r\n                alert(\"Image's extension is not allowed.\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (imgChanged.banner_img) {\r\n            bannerImageValRes = validateImageFile(banner_img)\r\n            if (!bannerImageValRes.status) {\r\n                alert(\"Banner Image's extension is not allowed.\")\r\n                return\r\n            }\r\n        }\r\n\r\n        if (imgChanged.m_banner_img) {\r\n            mBannerImageValRes = validateImageFile(m_banner_img)\r\n            if (!mBannerImageValRes.status) {\r\n                alert(\"Mobile Banner Image's extension is not allowed.\")\r\n                return\r\n            }\r\n        }\r\n\r\n\r\n        setSubmitLoading(true)\r\n\r\n        if (imgChanged.image) {\r\n            console.log(\"hello\", \"uploading image\");\r\n            let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\r\n            await axios.put(s3UrlRes1.url, image)\r\n            formData.image = `${image_filename}.${imageValRes.ext}`\r\n        }\r\n\r\n        if (imgChanged.banner_img) {\r\n            console.log(\"hello\", \"uploading banner_img\");\r\n            let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\r\n            await axios.put(s3UrlRes2.url, banner_img)\r\n            formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\r\n        }\r\n\r\n        if (imgChanged.m_banner_img) {\r\n            console.log(\"hello\", \"uploading m_banner_img\");\r\n            let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\r\n            await axios.put(s3UrlRes3.url, m_banner_img)\r\n            formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\r\n        }\r\n\r\n        updateCategory(_.merge(formData, { imgChanged: imgChanged }))\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Category Edit\"\r\n            />\r\n            <PageContainer>\r\n                {getCategoryViewState.apiState === \"loading\" &&\r\n                    <Skeleton active />\r\n                }\r\n\r\n                {getCategoryViewState.apiState === \"error\" &&\r\n                    <p>{getCategoryViewState.message}</p>\r\n                }\r\n\r\n                {getCategoryViewState.apiState === \"success\" &&\r\n                    <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\r\n                        <Row gutter=\"24\" >\r\n                            <Col span=\"12\">\r\n                                <Form.Item\r\n                                    label=\"Parent Category (Empty for Root level category)\"\r\n                                    name=\"parent_category_id\"\r\n                                >\r\n                                    <TreeSelect\r\n                                        showSearch\r\n                                        filterTreeNode={(input, treeNode) =>\r\n                                            treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                        }\r\n                                        style={{ width: '100%' }}\r\n                                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                        placeholder=\"Blank for root category\"\r\n                                        allowClear\r\n                                        treeDefaultExpandAll\r\n                                        onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\r\n                                    >\r\n                                        {categoryOptions(getCategoryTreeState.tree)}\r\n                                    </TreeSelect>\r\n                                </Form.Item>\r\n                            </Col>\r\n\r\n                            <Col span=\"12\" >\r\n                                <Form.Item\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    rules={[{ required: true, message: 'Required' }]}\r\n                                >\r\n                                    <Input name=\"name\" placeholder=\"Enter Category Name\"\r\n                                        onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row gutter=\"24\" >\r\n                            <Col span=\"12\" >\r\n                                <Form.Item\r\n                                    label=\"URL Key\"\r\n                                    name=\"url_key\"\r\n                                    rules={[\r\n                                        { required: true, message: 'Required' },\r\n                                        {\r\n                                            pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\r\n                                            message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\r\n                                        }\r\n                                    ]}\r\n                                >\r\n                                    <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\r\n                                        onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\r\n                                        addonBefore={cnf.domain}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n\r\n                            <Col span=\"12\" >\r\n                                <Form.Item\r\n                                    label=\"Image\"\r\n                                    name=\"image\"\r\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\r\n                                >\r\n                                    {!imgChanged.image &&\r\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.image}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\r\n                                    <Input type=\"file\" name=\"image\"\r\n                                        onChange={e => {\r\n                                            setImgChanged({ ...imgChanged, ['image']: true })\r\n                                            set_image(e.target.files[0])\r\n                                        }}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row gutter=\"24\" >\r\n                            <Col span=\"12\" >\r\n                                <Form.Item\r\n                                    label=\"Banner Image\"\r\n                                    name=\"banner_img\"\r\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\r\n                                >\r\n                                    {!imgChanged.banner_img &&\r\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\r\n                                    <Input type=\"file\" name=\"banner_img\"\r\n                                        onChange={e => {\r\n                                            setImgChanged({ ...imgChanged, ['banner_img']: true })\r\n                                            set_banner_img(e.target.files[0])\r\n                                        }}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n\r\n                            <Col span=\"12\" >\r\n                                <Form.Item\r\n                                    label=\"Banner Image For Mobile\"\r\n                                    name=\"m_banner_img\"\r\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\r\n                                >\r\n                                    {!imgChanged.m_banner_img &&\r\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.m_banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\r\n                                    <Input type=\"file\" name=\"m_banner_img\"\r\n                                        onChange={e => {\r\n                                            setImgChanged({ ...imgChanged, ['m_banner_img']: true })\r\n                                            set_m_banner_img(e.target.files[0])\r\n                                        }}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n\r\n                    </Form>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getCategoryTreeState: state.getCategoryTree,\r\n    getCategoryViewState: state.getCategoryView,\r\n    updateCategoryState: state.updateCategory,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\r\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\r\n    getCategoryView: (params) => dispatch(getCategoryView(params)),\r\n    getCategoryViewReset: () => dispatch(getCategoryViewReset()),\r\n    updateCategory: (params) => dispatch(updateCategory(params)),\r\n    updateCategoryReset: () => dispatch(updateCategoryReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryEdit)","import styled, { css } from 'styled-components'\r\n\r\nexport const Indicator = styled.div`\r\n    height: 10px;\r\n    width: 10px;\r\n    border-radius: 5px;\r\n    background-color: grey;\r\n\r\n    ${props => props.green && css`\r\n        background-color: #03c503;\r\n    `}\r\n\r\n    ${props => props.red && css`\r\n        background-color: red;\r\n    `}\r\n`","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Badge } from \"antd\"\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport { Indicator } from \"./ProductListStyle\"\r\n\r\n/* actions */\r\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\"\r\n\r\n\r\nconst ProductList = props => {\r\n    /* variables */\r\n    const { getProductList, getProductListReset, getProductListState } = props\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Type',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            render: type => <span style={{ textTransform: \"capitalize\" }} >{type}</span>\r\n        },\r\n        {\r\n            title: 'Price',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n            render: (obj) => (\r\n                <Space>\r\n                    {obj.is_sale_price === \"yes\" ?\r\n                        <>\r\n                            <span style={{ textDecoration: \"line-through\", color: \"#00000099\" }} >₹{obj.price}</span>\r\n                            <span>₹{obj.sale_price}</span>\r\n                        </>\r\n                        : <span>₹{obj.price}</span>\r\n                    }\r\n\r\n                </Space>\r\n            )\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            render: (status) => status === \"enabled\" ? <Indicator green /> : <Indicator red />\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'id',\r\n            key: 'action',\r\n            render: (id) => (\r\n                <Link to={`/product/${id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\r\n            )\r\n        },\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getProductList()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getProductListState.apiState === \"success\") {\r\n            let tableData = []\r\n            getProductListState.list.map(row => {\r\n                tableData.push({\r\n                    key: row.id,\r\n                    name: row.name,\r\n                    type: row.type,\r\n                    price: { price: row.price, is_sale_price: row.is_sale_price, sale_price: row.sale_price },\r\n                    status: row.status,\r\n                    id: row.id,\r\n                })\r\n            })\r\n            setTableData(tableData)\r\n        }\r\n    }, [getProductListState])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Product List\"\r\n                actionBtn={<Link to='/product/add'><Button >New</Button></Link>}\r\n            />\r\n            <PageContainer list >\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductListState: state.getProductList,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductList: (params) => dispatch(getProductList(params)),\r\n    getProductListReset: () => dispatch(getProductListReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* actions */\r\nimport { createProduct, createProductReset } from \"../../action/createProductAction\"\r\n\r\nconst ProductAdd = props => {\r\n    /* variables */\r\n    const {\r\n        createProduct, createProductReset, createProductState\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        type: \"\",\r\n        status: \"enabled\",\r\n        name: \"\",\r\n        url_key: \"\",\r\n        price: \"\",\r\n        is_sale_price: \"\",\r\n        sale_price: \"\",\r\n        gst:\"\"\r\n    })\r\n    const [form] = Form.useForm()\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => createProductReset())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            status: \"enabled\",\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (createProductState.apiState === \"success\") {\r\n            setRedirect([true, '/product/list'])\r\n            message.success(createProductState.message);\r\n        }\r\n\r\n        if (createProductState.apiState === \"error\") {\r\n            createProductReset()\r\n            message.error(createProductState.message);\r\n        }\r\n    }, [createProductState])\r\n\r\n    /* functions */\r\n    const handleChange = e => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleNumberChange = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSelect = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        createProduct(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Add Product\"\r\n            />\r\n            <PageContainer>\r\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Product Type\"\r\n                                name=\"type\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Select name=\"type\" placeholder=\"Select Product Type\"\r\n                                    onSelect={v => handleNumberChange(\"type\", v)}\r\n                                >\r\n                                    <Select.Option key=\"simple\" value=\"simple\">Simple</Select.Option>\r\n                                    <Select.Option key=\"variant\" value=\"variant\">Variant</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Status\"\r\n                                name=\"status\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Select name=\"status\" placeholder=\"Select Status\"\r\n                                    onSelect={v => handleNumberChange(\"status\", v)}\r\n                                >\r\n                                    <Select.Option key=\"enabled\" value=\"enabled\" >Enabled</Select.Option>\r\n                                    <Select.Option key=\"disabled\" value=\"disabled\">Disabled</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"name\" placeholder=\"Enter Name\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"URL key\"\r\n                                name=\"url_key\"\r\n                                rules={[\r\n                                    { required: true, message: 'Required' },\r\n                                    {\r\n                                        pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\r\n                                        message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input name=\"url_key\" placeholder=\"Enter URL key\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"GST\"\r\n                                name=\"gst\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Select name=\"gst\" placeholder=\"Select GST\" defaultValue=\"Select GST\"\r\n                                    onSelect={v => handleNumberChange(\"gst\", v)}\r\n                                > \r\n                                    <Select.Option key=\"5\" value=\"5\">5</Select.Option>\r\n                                    <Select.Option key=\"12\" value=\"12\">12</Select.Option>\r\n                                    <Select.Option key=\"18\" value=\"18\">18</Select.Option>\r\n                                    <Select.Option key=\"28\" value=\"28\">28</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Price\"\r\n                                name=\"price\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"price\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Set Sale Price\"\r\n                                name=\"is_sale_price\"\r\n                            >\r\n                                <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\r\n                                    onSelect={v => handleNumberChange(\"is_sale_price\", v)}\r\n                                >\r\n                                    <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\r\n                                    <Select.Option key=\"no\" value=\"no\">No</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Sale Price\"\r\n                                name=\"sale_price\"\r\n                            >\r\n                                <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"sale_price\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col> \r\n                    </Row>\r\n\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createProductState.apiState === \"loading\"} >SUBMIT</Button>\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    createProductState: state.createProduct,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    createProduct: (params) => dispatch(createProduct(params)),\r\n    createProductReset: () => dispatch(createProductReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductAdd)","import React, { useState } from \"react\"\r\nimport { Tabs } from 'antd';\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst ProductTabs = props => {\r\n    /* variable */\r\n    const [redirect, serRedirect] = useState([false, \"\"])\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Tabs activeKey={props.active}\r\n                onChange={key => {\r\n                    if (key === \"basic_info\") serRedirect([true, `/product/${props.id}/edit`])\r\n                    if (key === \"variants\") serRedirect([true, `/product/${props.id}/edit/variants`])\r\n                    if (key === \"images\") serRedirect([true, `/product/${props.id}/edit/images`])\r\n                    if (key === \"description\") serRedirect([true, `/product/${props.id}/edit/description`])\r\n                    if (key === \"related_products\") serRedirect([true, `/product/${props.id}/edit/related-products`])\r\n                }}\r\n            >\r\n                <Tabs.TabPane key=\"basic_info\" tab={\"Basic Info\"} />\r\n                {props.type === \"variant\" &&\r\n                    <Tabs.TabPane key=\"variants\" tab={\"Variants\"} />\r\n                }\r\n                <Tabs.TabPane key=\"images\" tab={\"Images\"} />\r\n                <Tabs.TabPane key=\"description\" tab={\"Description\"} />\r\n                <Tabs.TabPane key=\"related_products\" tab={\"Related Products\"} />\r\n            </Tabs>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductTabs","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, TreeSelect, Switch } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n/* actions */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { updateProduct, updateProductReset } from \"../../action/updateProductAction\"\r\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\r\n\r\nconst { TreeNode } = TreeSelect\r\n\r\n\r\n\r\nconst ProductEdit = props => {\r\n    /* variables */\r\n    const product_id = props.match.params.product_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        updateProduct, updateProductReset, updateProductState,\r\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\r\n    } = props\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [form] = Form.useForm()\r\n    const [formData, setFormData] = useState({\r\n        product_id: product_id,\r\n        type: \"\",\r\n        status: \"enabled\",\r\n        name: \"\",\r\n        url_key: \"\",\r\n        price: \"\",\r\n        is_sale_price: \"\",\r\n        sale_price: \"\",\r\n        categories: [],\r\n        is_exclusive: \"no\",\r\n        sku: \"\",\r\n        short_description: \"\",\r\n        tags: \"\",\r\n        stock: \"\",\r\n        gst: \"\",\r\n    })\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getProductViewReset()\r\n            updateProductReset()\r\n            getCategoryTreeReset()\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        getCategoryTree()\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getProductViewState.apiState === \"success\") {\r\n            form.setFieldsValue({\r\n                type: getProductViewState.product.type,\r\n                status: getProductViewState.product.status,\r\n                name: getProductViewState.product.name,\r\n                url_key: getProductViewState.product.url_key,\r\n                price: getProductViewState.product.price,\r\n                is_sale_price: getProductViewState.product.is_sale_price,\r\n                sale_price: getProductViewState.product.sale_price,\r\n                categories: getProductViewState.product.categories,\r\n                sku: getProductViewState.product.sku,\r\n                short_description: getProductViewState.product.short_description,\r\n                tags: getProductViewState.product.tags,\r\n                stock: getProductViewState.product.stock,\r\n                gst: getProductViewState.product.gst,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['type']: getProductViewState.product.type,\r\n                ['status']: getProductViewState.product.status,\r\n                ['name']: getProductViewState.product.name,\r\n                ['url_key']: getProductViewState.product.url_key,\r\n                ['price']: getProductViewState.product.price,\r\n                ['is_sale_price']: getProductViewState.product.is_sale_price,\r\n                ['sale_price']: getProductViewState.product.sale_price,\r\n                ['categories']: getProductViewState.product.categories,\r\n                ['is_exclusive']: getProductViewState.product.is_exclusive,\r\n                ['sku']: getProductViewState.product.sku,\r\n                ['short_description']: getProductViewState.product.short_description,\r\n                ['tags']: getProductViewState.product.tags,\r\n                ['stock']: getProductViewState.product.stock,\r\n                ['gst']: getProductViewState.product.gst,\r\n            })\r\n        }\r\n    }, [getProductViewState])\r\n\r\n    useEffect(() => {\r\n        if (updateProductState.apiState === \"success\") {\r\n            setRedirect([true, '/product/list'])\r\n            message.success(updateProductState.message);\r\n        }\r\n\r\n        if (updateProductState.apiState === \"error\") {\r\n            updateProductReset()\r\n            message.error(updateProductState.message);\r\n        }\r\n    }, [updateProductState])\r\n\r\n    /* functions */\r\n    const categoryOptions = (tree) => {\r\n        let finalJsx = []\r\n        tree.map(node => {\r\n            if (node.children.length > 0) {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\r\n                )\r\n            } else {\r\n                finalJsx.push(\r\n                    <TreeNode value={node.id} title={node.name} />\r\n                )\r\n            }\r\n        })\r\n        return finalJsx\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleNumberChange = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSelect = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        updateProduct(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Edit Product\"\r\n            />\r\n            <PageContainer>\r\n                {getProductViewState.apiState === \"success\" &&\r\n                    <>\r\n                        <ProductTabs id={getProductViewState.product.id} active=\"basic_info\" type={getProductViewState.product.type} />\r\n                        <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\r\n                            <Row gutter={20}>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Product Type\"\r\n                                        name=\"type\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Select name=\"type\" placeholder=\"Select Product Type\"\r\n                                            onSelect={v => handleNumberChange(\"type\", v)}\r\n                                            disabled\r\n                                        >\r\n                                            <Select.Option key=\"simple\" value=\"simple\">Simple</Select.Option>\r\n                                            <Select.Option key=\"variant\" value=\"variant\">Variant</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Status\"\r\n                                        name=\"status\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Select name=\"status\" placeholder=\"Select Status\"\r\n                                            onSelect={v => handleNumberChange(\"status\", v)}\r\n                                        >\r\n                                            <Select.Option key=\"enabled\" value=\"enabled\" >Enabled</Select.Option>\r\n                                            <Select.Option key=\"disabled\" value=\"disabled\">Disabled</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"SKU\"\r\n                                        name=\"sku\"\r\n                                    >\r\n                                        <Input name=\"sku\" placeholder=\"Enter SKU\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                {getProductViewState.product.type === \"simple\" &&\r\n                                    <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                        <Form.Item\r\n                                            label=\"Stock\"\r\n                                            name=\"stock\"\r\n                                        >\r\n                                            <InputNumber name=\"stock\" placeholder=\"Enter Stock\"\r\n                                                onChange={v => handleNumberChange(\"stock\", v)}\r\n                                                style={{ width: \"100%\" }}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                }\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Input name=\"name\" placeholder=\"Enter Name\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"URL key\"\r\n                                        name=\"url_key\"\r\n                                        rules={[\r\n                                            { required: true, message: 'Required' },\r\n                                            {\r\n                                                pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\r\n                                                message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Input name=\"url_key\" placeholder=\"Enter URL key\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Price\"\r\n                                        name=\"price\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }} min={0}\r\n                                            onChange={v => handleNumberChange(\"price\", v)}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Set Sale Price\"\r\n                                        name=\"is_sale_price\"\r\n                                    >\r\n                                        <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\r\n                                            onSelect={v => handleNumberChange(\"is_sale_price\", v)}\r\n                                        >\r\n                                            <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\r\n                                            <Select.Option key=\"no\" value=\"no\">No</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Sale Price\"\r\n                                        name=\"sale_price\"\r\n                                    >\r\n                                        <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }} min={0}\r\n                                            onChange={v => handleNumberChange(\"sale_price\", v)}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"GST\"\r\n                                        name=\"gst\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Select name=\"gst\" placeholder=\"Select GST\" defaultValue=\"Select GST\"\r\n                                            onSelect={v => handleNumberChange(\"gst\", v)}\r\n                                        >\r\n                                            <Select.Option key=\"5\" value=\"5\">5</Select.Option>\r\n                                            <Select.Option key=\"12\" value=\"12\">12</Select.Option>\r\n                                            <Select.Option key=\"18\" value=\"18\">18</Select.Option>\r\n                                            <Select.Option key=\"28\" value=\"28\">28</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"Categories\"\r\n                                        name=\"categories\"\r\n                                    >\r\n                                        <TreeSelect\r\n                                            showSearch\r\n                                            filterTreeNode={(input, treeNode) =>\r\n                                                treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                            style={{ width: '100%' }}\r\n                                            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                            placeholder=\"Select categories\"\r\n                                            allowClear\r\n                                            multiple\r\n                                            treeDefaultExpandAll\r\n                                            onChange={(value, node) => handleSelect(\"categories\", value)}\r\n                                            showCheckedStrategy={TreeSelect.SHOW_ALL}\r\n                                        >\r\n                                            {categoryOptions(getCategoryTreeState.tree)}\r\n                                        </TreeSelect>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Is Exclusive?\"\r\n                                        name=\"is_exclusive\"\r\n                                    >\r\n                                        <Switch name=\"is_exclusive\" checkedChildren=\"Yes\" unCheckedChildren=\"No\"\r\n                                            onChange={checked => setFormData({ ...formData, ['is_exclusive']: checked ? \"yes\" : \"no\" })}\r\n                                            defaultChecked={getProductViewState.product.is_exclusive === \"yes\" ? true : false}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"Short Description\"\r\n                                        name=\"short_description\"\r\n                                    >\r\n                                        <Input.TextArea name=\"short_description\" placeholder=\"Enter Short Description\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"Tags (comma separted)\"\r\n                                        name=\"tags\"\r\n                                    >\r\n                                        <Input.TextArea name=\"tags\" placeholder=\"Enter comma separted Tags\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Button type=\"primary\" htmlType=\"submit\" loading={updateProductState.apiState === \"loading\"} >SUBMIT</Button>\r\n                        </Form>\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    updateProductState: state.updateProduct,\r\n    getCategoryTreeState: state.getCategoryTree,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    updateProduct: (params) => dispatch(updateProduct(params)),\r\n    updateProductReset: () => dispatch(updateProductReset()),\r\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\r\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductEdit)","import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n    Select, Form, Row, Col, Button, message, Divider, Alert, InputNumber, Table, Switch,\r\n    Space, Popconfirm, Input\r\n} from \"antd\"\r\nimport _ from \"lodash\"\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n/* actions */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { getAttributeList, getAttributeListReset } from \"../../action/getAttributeListAction\"\r\nimport { saveAttributeForVariants, saveAttributeForVariantsReset } from \"../../action/saveAttributeForVariantsAction\"\r\nimport { createProductVariant, createProductVariantReset } from \"../../action/createProductVariantAction\"\r\nimport { getProductVariantList, getProductVariantListReset } from \"../../action/getProductVariantListAction\"\r\nimport { saveSpProdData, saveSpProdDataReset } from \"../../action/saveSpProdDataAction\"\r\nimport { saveSpImgData, saveSpImgDataReset } from \"../../action/saveSpImgDataAction\"\r\nimport { delProdVar, delProdVarReset } from \"../../action/delProdVarAction\"\r\n\r\nconst ProductVariants = props => {\r\n    /* variables */\r\n    const product_id = props.match.params.product_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        getAttributeList, getAttributeListReset, getAttributeListState,\r\n        saveAttributeForVariants, saveAttributeForVariantsReset, saveAttributeForVariantsState,\r\n        createProductVariant, createProductVariantReset, createProductVariantState,\r\n        getProductVariantList, getProductVariantListReset, getProductVariantListState,\r\n        saveSpProdData, saveSpProdDataReset, saveSpProdDataState,\r\n        saveSpImgData, saveSpImgDataReset, saveSpImgDataState,\r\n        delProdVar, delProdVarReset, delProdVarState,\r\n    } = props\r\n    const [attributes_for_variants, set_attributes_for_variants] = useState([])\r\n    const [refresh, setRefresh] = useState(0)\r\n    const [form] = Form.useForm()\r\n    const [form2] = Form.useForm()\r\n    const [form3] = Form.useForm()\r\n    const [variant_data, set_variant_data] = useState({\r\n        attributes: [],\r\n        stock: 0,\r\n        price: 0,\r\n        product_id: product_id\r\n    })\r\n    const [columns, set_columns] = useState([])\r\n    const [tableData, setTableData] = useState([])\r\n    const [separateProductData, setSeparateProductData] = useState({\r\n        product_id: product_id,\r\n        display_separate: false,\r\n        attribute_id: \"\"\r\n    })\r\n    const [separateImgData, setSeparateImgData] = useState({\r\n        product_id: product_id,\r\n        display_separate: false,\r\n        attribute_id: \"\"\r\n    })\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getProductViewReset()\r\n            getAttributeListReset()\r\n            saveAttributeForVariantsReset()\r\n            createProductVariantReset()\r\n            getProductVariantListReset()\r\n            saveSpProdDataReset()\r\n            saveSpImgDataReset()\r\n            delProdVarReset()\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n        getAttributeList({\r\n            nature: \"variant\"\r\n        })\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (getProductViewState.apiState === \"success\") {\r\n            if (getProductViewState.product.attributes_for_variants) {\r\n                form.setFieldsValue({\r\n                    attributes_for_variants: getProductViewState.product.attributes_for_variants.split(\",\")\r\n                })\r\n                set_attributes_for_variants(getProductViewState.product.attributes_for_variants.split(\",\"))\r\n            }\r\n\r\n            if (getProductViewState.product.variant_count > 0) {\r\n                getProductVariantList({ product_id: product_id })\r\n            }\r\n\r\n            form2.setFieldsValue({\r\n                display_separate: getProductViewState.product.display_separate_product_by_attribute ? true : false,\r\n                display_separate_attribute_id: getProductViewState.product.display_separate_product_by_attribute,\r\n            })\r\n            setSeparateProductData({\r\n                ...separateProductData,\r\n                [\"display_separate\"]: getProductViewState.product.display_separate_product_by_attribute ? true : false,\r\n                [\"attribute_id\"]: getProductViewState.product.display_separate_product_by_attribute\r\n            })\r\n\r\n            form3.setFieldsValue({\r\n                display_separate_img: getProductViewState.product.attribute_for_separate_images ? true : false,\r\n                display_separate_img_attribute_id: getProductViewState.product.attribute_for_separate_images,\r\n            })\r\n            setSeparateImgData({\r\n                ...separateImgData,\r\n                [\"display_separate\"]: getProductViewState.product.attribute_for_separate_images ? true : false,\r\n                [\"attribute_id\"]: getProductViewState.product.attribute_for_separate_images\r\n            })\r\n\r\n        }\r\n    }, [getProductViewState])\r\n\r\n    useEffect(() => {\r\n        if (saveAttributeForVariantsState.apiState === \"success\") {\r\n            message.success(saveAttributeForVariantsState.message);\r\n            setRefresh(refresh + 1)\r\n            saveAttributeForVariantsReset()\r\n        }\r\n\r\n        if (saveAttributeForVariantsState.apiState === \"error\") {\r\n            saveAttributeForVariantsReset()\r\n            message.error(saveAttributeForVariantsState.message);\r\n        }\r\n    }, [saveAttributeForVariantsState])\r\n\r\n    useEffect(() => {\r\n        if (createProductVariantState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            createProductVariantReset()\r\n            message.success(createProductVariantState.message);\r\n        }\r\n\r\n        if (createProductVariantState.apiState === \"error\") {\r\n            createProductVariantReset()\r\n            message.error(createProductVariantState.message);\r\n        }\r\n    }, [createProductVariantState])\r\n\r\n    useEffect(() => {\r\n        if (getProductVariantListState.apiState === \"success\") {\r\n            let columns = []\r\n\r\n            getProductVariantListState.list[0].attributes.map(obj => {\r\n                columns.push({\r\n                    title: obj.name,\r\n                    dataIndex: obj.name,\r\n                    key: obj.name,\r\n                })\r\n            })\r\n            columns.push({\r\n                title: \"Name\",\r\n                dataIndex: \"name\",\r\n                key: \"name\",\r\n            }, {\r\n                title: \"Price\",\r\n                dataIndex: \"price\",\r\n                key: \"Price\",\r\n            }, {\r\n                title: \"Is Sale Price\",\r\n                dataIndex: \"is_sale_price\",\r\n                key: \"is_sale_price\",\r\n            }, {\r\n                title: \"Sale Price\",\r\n                dataIndex: \"sale_price\",\r\n                key: \"sale_price\",\r\n            }, {\r\n                title: \"Stock\",\r\n                dataIndex: \"stock\",\r\n                key: \"Stock\",\r\n            }, {\r\n                title: 'Action',\r\n                dataIndex: 'id',\r\n                key: 'action',\r\n                render: (id) => (\r\n                    <Popconfirm\r\n                        title=\"Are you sure to delete this variant?\"\r\n                        onConfirm={() => delProdVar({\r\n                            product_id: product_id,\r\n                            product_variant_id: id\r\n                        })}\r\n                        okText=\"Delete\"\r\n                        cancelText=\"Cancel\"\r\n                        okType=\"danger\"\r\n                    >\r\n                        <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                    </Popconfirm>\r\n                )\r\n            })\r\n            set_columns(columns)\r\n\r\n            let tableData = []\r\n            getProductVariantListState.list.map(p => {\r\n                let rowObj = {}\r\n                rowObj.key = p.id\r\n                rowObj.name = p.name\r\n                rowObj.price = p.price\r\n                rowObj.is_sale_price = p.is_sale_price\r\n                rowObj.sale_price = p.sale_price\r\n                rowObj.stock = p.stock\r\n                rowObj.id = p.id\r\n                p.attributes.map(obj => {\r\n                    rowObj[obj.name] = obj.option_value\r\n                })\r\n                tableData.push(rowObj)\r\n            })\r\n            setTableData(tableData)\r\n        }\r\n    }, [getProductVariantListState])\r\n\r\n    useEffect(() => {\r\n        if (saveSpProdDataState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            saveSpProdDataReset()\r\n            message.success(saveSpProdDataState.message);\r\n        }\r\n\r\n        if (saveSpProdDataState.apiState === \"error\") {\r\n            saveSpProdDataReset()\r\n            message.error(saveSpProdDataState.message);\r\n        }\r\n    }, [saveSpProdDataState])\r\n\r\n    useEffect(() => {\r\n        if (saveSpImgDataState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            saveSpImgDataReset()\r\n            message.success(saveSpImgDataState.message);\r\n        }\r\n\r\n        if (saveSpImgDataState.apiState === \"error\") {\r\n            saveSpImgDataReset()\r\n            message.error(saveSpImgDataState.message);\r\n        }\r\n    }, [saveSpImgDataState])\r\n\r\n    useEffect(() => {\r\n        if (delProdVarState.apiState === \"success\") {\r\n            message.success(delProdVarState.message);\r\n            setRefresh(refresh + 1)\r\n            delProdVarReset()\r\n        }\r\n\r\n        if (delProdVarState.apiState === \"error\") {\r\n            delProdVarReset()\r\n            message.error(delProdVarState.message);\r\n        }\r\n    }, [delProdVarState])\r\n\r\n\r\n    /* functions */\r\n    const handleAttributeForVariantsSubmit = () => {\r\n        saveAttributeForVariants({\r\n            product_id: product_id,\r\n            attributes: attributes_for_variants\r\n        })\r\n    }\r\n\r\n    const handleAttributeChange = (obj) => {\r\n        let arr = variant_data.attributes\r\n        if (_.findIndex(arr, { 'attr_id': obj.attr_id }) > -1) {\r\n            arr = arr.filter(item => item.attr_id !== obj.attr_id)\r\n        }\r\n        arr.push(obj)\r\n        set_variant_data({ ...variant_data, ['attributes']: arr })\r\n    }\r\n\r\n    const renderVariantForm = () => {\r\n        let jsx = []\r\n        getAttributeListState.list.map(attr => {\r\n            let attributes_for_variants = getProductViewState.product.attributes_for_variants.split(\",\")\r\n            if (attributes_for_variants.includes(attr.id)) {\r\n                jsx.push(\r\n                    <Col span=\"6\">\r\n                        <Form.Item\r\n                            name={`attribute_${attr.id}`}\r\n                            label={`${attr.name}`}\r\n                            rules={[{ required: true, message: 'Required' }]}\r\n                        >\r\n                            <Select\r\n                                onChange={v => handleAttributeChange({ attr_id: attr.id, option_id: v })}\r\n                                placeholder={`Select ${attr.name}`}\r\n                                name={`attribute_${attr.id}`}\r\n                            >\r\n                                {attr.options.map(option => (\r\n                                    <Select.Option key={option.id} value={option.id} >{option.option_value}</Select.Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                )\r\n            }\r\n        })\r\n        jsx.push(\r\n            <>\r\n                <Col span=\"6\">\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{ required: true, message: 'Required' }]}\r\n                    >\r\n                        <Input name=\"name\" placeholder=\"Enter Name\"\r\n                            onChange={e => set_variant_data({ ...variant_data, [\"name\"]: e.target.value })}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span=\"6\">\r\n                    <Form.Item\r\n                        name=\"price\"\r\n                        label=\"Price\"\r\n                        rules={[{ required: true, message: 'Required' }]}\r\n                    >\r\n                        <InputNumber name=\"price\" placeholder=\"Enter Price\" style={{ width: \"100%\" }}\r\n                            onChange={v => set_variant_data({ ...variant_data, [\"price\"]: v })}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span=\"6\">\r\n                    <Form.Item\r\n                        name=\"is_sale_price\"\r\n                        label=\"Set Sale Price\"\r\n                    >\r\n                        <Select name=\"is_sale_price\" placeholder=\"Select Sale Price Rule\" defaultValue=\"no\"\r\n                            onSelect={v => set_variant_data({ ...variant_data, [\"is_sale_price\"]: v })}\r\n                        >\r\n                            <Select.Option key=\"yes\" value=\"yes\">Yes</Select.Option>\r\n                            <Select.Option key=\"no\" value=\"no\">No</Select.Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span=\"6\">\r\n                    <Form.Item\r\n                        name=\"sale_price\"\r\n                        label=\"Sale Price\"\r\n                    >\r\n                        <InputNumber name=\"sale_price\" placeholder=\"Enter Sale Price\" style={{ width: \"100%\" }}\r\n                            onChange={v => set_variant_data({ ...variant_data, [\"sale_price\"]: v })}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span=\"6\">\r\n                    <Form.Item\r\n                        name=\"stock\"\r\n                        label=\"Stock\"\r\n                        rules={[{ required: true, message: 'Required' }]}\r\n                    >\r\n                        <InputNumber name=\"stock\" placeholder=\"Enter Stock\" style={{ width: \"100%\" }}\r\n                            onChange={v => set_variant_data({ ...variant_data, [\"stock\"]: v })}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n            </>\r\n        )\r\n        return jsx\r\n    }\r\n\r\n    const handleCreateVariantSubmit = () => {\r\n        createProductVariant(variant_data)\r\n    }\r\n\r\n    const handleSpProdDataSub = () => {\r\n        if (separateProductData.display_separate) {\r\n            if (!separateProductData.attribute_id) {\r\n                alert(\"Select an attribute\")\r\n                return\r\n            }\r\n        }\r\n\r\n        saveSpProdData(separateProductData)\r\n    }\r\n\r\n    const handleSpImgDataSub = () => {\r\n        if (separateImgData.display_separate) {\r\n            if (!separateImgData.attribute_id) {\r\n                alert(\"Select an attribute\")\r\n                return\r\n            }\r\n        }\r\n\r\n        saveSpImgData(separateImgData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Edit Product\"\r\n            />\r\n            <PageContainer>\r\n                {(getProductViewState.apiState === \"success\" && getAttributeListState.apiState === \"success\") &&\r\n                    <>\r\n                        <ProductTabs id={getProductViewState.product.id} active=\"variants\" type={getProductViewState.product.type} />\r\n                        {getProductViewState.product.variant_count === 0 &&\r\n                            <>\r\n                                <Row >\r\n                                    <Col span=\"18\">\r\n                                        <Form form={form} layout=\"vertical\" onFinish={handleAttributeForVariantsSubmit}>\r\n                                            <Form.Item\r\n                                                name=\"attributes_for_variants\"\r\n                                                label=\"Select attributes to create variants\"\r\n                                                rules={[{ required: true, message: 'Required' }]}\r\n                                            >\r\n                                                <Select\r\n                                                    onChange={v => set_attributes_for_variants(v)}\r\n                                                    placeholder=\"Select attributes to create variants\"\r\n                                                    mode=\"multiple\"\r\n                                                >\r\n                                                    {getAttributeListState.list.map(attr => (\r\n                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name} (${attr.type})`}</Select.Option>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </Form.Item>\r\n                                            <Button type=\"primary\" htmlType=\"submit\" >NEXT</Button>\r\n                                        </Form>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Divider />\r\n                            </>\r\n                        }\r\n\r\n                        {getProductViewState.product.variant_count > 0 &&\r\n                            <Alert message=\"Do you want to change attribute set for product variant? For that you need to delete below variants.\"\r\n                                type=\"info\" showIcon style={{ marginBottom: 24 }} />\r\n                        }\r\n\r\n                        {getProductViewState.product.attributes_for_variants &&\r\n                            <>\r\n                                <h3>Create Variant</h3>\r\n                                <Form layout=\"vertical\" onFinish={handleCreateVariantSubmit} >\r\n                                    <Row gutter=\"20\" >\r\n                                        {renderVariantForm()}\r\n                                    </Row>\r\n                                    <Button type=\"primary\" htmlType=\"submit\" >CREATE VARIANT</Button>\r\n                                </Form>\r\n                                <Divider />\r\n                            </>\r\n                        }\r\n\r\n                        {(getProductVariantListState.list).length > 0 &&\r\n                            <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n                        }\r\n\r\n                        {/* {getProductViewState.product.attributes_for_variants &&\r\n                            <>\r\n                                <h3 style={{ marginTop: 24 }} >Do you want to display separate products on product-list by attribute?</h3>\r\n\r\n                                <Form form={form2} layout=\"vertical\" >\r\n                                    <Row gutter=\"20\" >\r\n                                        <Col span={3}>\r\n                                            <Form.Item name=\"display_separate\">\r\n                                                <Switch name=\"display_separate\"\r\n                                                    onChange={(checked) => setSeparateProductData({ ...separateProductData, [\"display_separate\"]: checked })}\r\n                                                    defaultChecked={getProductViewState.product.display_separate_product_by_attribute ? true : false}\r\n                                                />\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        {separateProductData.display_separate &&\r\n                                            <>\r\n                                                <Col span={8}>\r\n                                                    <Form.Item name=\"display_separate_attribute_id\">\r\n                                                        <Select\r\n                                                            onChange={v => setSeparateProductData({ ...separateProductData, [\"attribute_id\"]: v })}\r\n                                                            placeholder=\"Select attribute\"\r\n                                                            style={{ width: \"100%\" }}\r\n                                                            name=\"display_separate_attribute_id\"\r\n                                                        >\r\n                                                            {getAttributeListState.list.map(attr => {\r\n                                                                if (attributes_for_variants.includes(attr.id)) {\r\n                                                                    return (\r\n                                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name}`}</Select.Option>\r\n                                                                    )\r\n                                                                }\r\n                                                            }\r\n                                                            )}\r\n                                                        </Select>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n\r\n                                            </>\r\n                                        }\r\n                                        <Col span={4}>\r\n                                            <Button type=\"primary\" onClick={handleSpProdDataSub} >SAVE</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            </>\r\n                        } */}\r\n\r\n\r\n                        {getProductViewState.product.attributes_for_variants &&\r\n                            <>\r\n                                <h3 style={{ marginTop: 24 }} >Do you want to display separate images by attribute?</h3>\r\n\r\n                                <Form form={form3} layout=\"vertical\" >\r\n                                    <Row gutter=\"20\" >\r\n                                        <Col span={3}>\r\n                                            <Form.Item name=\"display_separate_img\">\r\n                                                <Switch name=\"display_separate_img\"\r\n                                                    onChange={(checked) => setSeparateImgData({ ...separateImgData, [\"display_separate\"]: checked })}\r\n                                                    defaultChecked={getProductViewState.product.attribute_for_separate_images ? true : false}\r\n                                                />\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        {separateImgData.display_separate &&\r\n                                            <>\r\n                                                <Col span={8}>\r\n                                                    <Form.Item name=\"display_separate_img_attribute_id\">\r\n                                                        <Select\r\n                                                            onChange={v => setSeparateImgData({ ...separateImgData, [\"attribute_id\"]: v })}\r\n                                                            placeholder=\"Select attribute\"\r\n                                                            style={{ width: \"100%\" }}\r\n                                                            name=\"display_separate_img_attribute_id\"\r\n                                                        >\r\n                                                            {getAttributeListState.list.map(attr => {\r\n                                                                if (attributes_for_variants.includes(attr.id)) {\r\n                                                                    return (\r\n                                                                        <Select.Option key={attr.id} value={attr.id} >{`${attr.name}`}</Select.Option>\r\n                                                                    )\r\n                                                                }\r\n                                                            }\r\n                                                            )}\r\n                                                        </Select>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n\r\n                                            </>\r\n                                        }\r\n                                        <Col span={4}>\r\n                                            <Button type=\"primary\" onClick={handleSpImgDataSub} >SAVE</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            </>\r\n                        }\r\n\r\n\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    getAttributeListState: state.getAttributeList,\r\n    saveAttributeForVariantsState: state.saveAttributeForVariants,\r\n    createProductVariantState: state.createProductVariant,\r\n    getProductVariantListState: state.getProductVariantList,\r\n    saveSpProdDataState: state.saveSpProdData,\r\n    saveSpImgDataState: state.saveSpImgData,\r\n    delProdVarState: state.delProdVar,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    getAttributeList: (params) => dispatch(getAttributeList(params)),\r\n    getAttributeListReset: () => dispatch(getAttributeListReset()),\r\n    saveAttributeForVariants: (params) => dispatch(saveAttributeForVariants(params)),\r\n    saveAttributeForVariantsReset: () => dispatch(saveAttributeForVariantsReset()),\r\n    createProductVariant: (params) => dispatch(createProductVariant(params)),\r\n    createProductVariantReset: () => dispatch(createProductVariantReset()),\r\n    getProductVariantList: (params) => dispatch(getProductVariantList(params)),\r\n    getProductVariantListReset: () => dispatch(getProductVariantListReset()),\r\n    saveSpProdData: (params) => dispatch(saveSpProdData(params)),\r\n    saveSpProdDataReset: () => dispatch(saveSpProdDataReset()),\r\n    saveSpImgData: (params) => dispatch(saveSpImgData(params)),\r\n    saveSpImgDataReset: () => dispatch(saveSpImgDataReset()),\r\n    delProdVar: (params) => dispatch(delProdVar(params)),\r\n    delProdVarReset: () => dispatch(delProdVarReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductVariants)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, Space, Tooltip, Popconfirm, Tag, Divider } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { DeleteOutlined, StarOutlined } from \"@ant-design/icons\"\r\n\r\n/* actions */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { saveProdImg, saveProdImgReset } from \"../../action/saveProdImgAction\"\r\nimport { delProdImg, delProdImgReset } from \"../../action/delProdImgAction\"\r\nimport { markImgThumb, markImgThumbReset } from \"../../action/markImgThumbAction\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\n\r\nconst ProductImages = props => {\r\n    /* variables */\r\n    const product_id = props.match.params.product_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        saveProdImg, saveProdImgReset, saveProdImgState,\r\n        delProdImg, delProdImgReset, delProdImgState,\r\n        markImgThumb, markImgThumbReset, markImgThumbState,\r\n    } = props\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [image, set_image] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [refresh, setRefresh] = useState(0)\r\n    const [imgAttr, setImgAttr] = useState({\r\n        attribute_id: null,\r\n        attribute_option_id: null\r\n    })\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getProductViewReset()\r\n            saveProdImgReset()\r\n            delProdImgReset()\r\n            markImgThumbReset()\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (saveProdImgState.apiState === \"success\") {\r\n            saveProdImgReset()\r\n            setRefresh(refresh + 1)\r\n            message.success(saveProdImgState.message);\r\n            setSubmitLoading(false)\r\n        }\r\n\r\n        if (saveProdImgState.apiState === \"error\") {\r\n            saveProdImgReset()\r\n            message.error(saveProdImgState.message);\r\n            setSubmitLoading(false)\r\n        }\r\n    }, [saveProdImgState])\r\n\r\n    useEffect(() => {\r\n        if (delProdImgState.apiState === \"success\") {\r\n            delProdImgReset()\r\n            setRefresh(refresh + 1)\r\n            message.success(delProdImgState.message);\r\n        }\r\n\r\n        if (delProdImgState.apiState === \"error\") {\r\n            delProdImgReset()\r\n            message.error(delProdImgState.message);\r\n        }\r\n    }, [delProdImgState])\r\n\r\n    useEffect(() => {\r\n        if (markImgThumbState.apiState === \"success\") {\r\n            markImgThumbReset()\r\n            setRefresh(refresh + 1)\r\n            message.success(markImgThumbState.message);\r\n        }\r\n\r\n        if (markImgThumbState.apiState === \"error\") {\r\n            markImgThumbReset()\r\n            message.error(markImgThumbState.message);\r\n        }\r\n    }, [markImgThumbState])\r\n\r\n    /* functions */\r\n    const handleImgSub = async () => {\r\n        let filename = uuidv4()\r\n        let imageValRes = validateImageFile(image)\r\n\r\n        if (!imageValRes.status) {\r\n            alert(\"Image's extension is not allowed.\")\r\n            return\r\n        }\r\n\r\n        setSubmitLoading(true)\r\n\r\n        let s3UrlRes1 = await getS3SingedUrl(filename, imageValRes.ext, image)\r\n        await axios.put(s3UrlRes1.url, image)\r\n\r\n        saveProdImg({\r\n            product_id: product_id,\r\n            image: `${filename}.${imageValRes.ext}`,\r\n            attribute_id: imgAttr.attribute_id,\r\n            attribute_option_id: imgAttr.attribute_option_id,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Edit Product\"\r\n            />\r\n            <PageContainer>\r\n                {getProductViewState.apiState === \"success\" &&\r\n                    <>\r\n                        <ProductTabs id={getProductViewState.product.id} active=\"images\" type={getProductViewState.product.type} />\r\n                        <Form onFinish={handleImgSub}>\r\n                            <Row gutter=\"12\" >\r\n                                <Col span=\"12\">\r\n                                    <Form.Item\r\n                                        label=\"Image\"\r\n                                        name=\"image\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                        extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\r\n                                    >\r\n                                        <Input type=\"file\" name=\"image\"\r\n                                            onChange={e => {\r\n                                                set_image(e.target.files[0])\r\n                                                setImgAttr({\r\n                                                    attribute_id: null,\r\n                                                    attribute_option_id: null,\r\n                                                })\r\n                                            }}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span=\"4\">\r\n                                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SAVE</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n\r\n                        <div style={{ display: \"flex\" }} >\r\n                            {getProductViewState.images.map(img => {\r\n                                if (!img.attribute_option_id) {\r\n                                    return (\r\n                                        <div style={{ marginRight: 4, border: \"solid 1px #f5f5f5\", padding: 4 }} >\r\n                                            <img src={`${cnf.s3_base_url}${img.image}`} alt=\"\" style={{ height: \"auto\", width: 100 }} />\r\n                                            <div style={{ marginTop: 8 }} >\r\n                                                <Space>\r\n                                                    <Popconfirm\r\n                                                        title=\"Are you sure to delete this image?\"\r\n                                                        onConfirm={() => delProdImg({\r\n                                                            product_id: product_id,\r\n                                                            img_id: img.id,\r\n                                                            image: img.image,\r\n                                                            attribute_id: null,\r\n                                                            attribute_option_id: null,\r\n                                                        })}\r\n                                                        okText=\"Delete\"\r\n                                                        cancelText=\"Cancel\"\r\n                                                        okType=\"danger\"\r\n                                                    >\r\n                                                        <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                                                    </Popconfirm>\r\n                                                    {!img.is_thumbnail ?\r\n                                                        <Tooltip title=\"Mark as Thumbnail\" placement=\"bottom\" >\r\n                                                            <Button size=\"small\" icon={<StarOutlined />} onClick={() => markImgThumb({\r\n                                                                img_id: img.id,\r\n                                                                product_id: product_id,\r\n                                                                attribute_id: null,\r\n                                                                attribute_option_id: null,\r\n                                                            })} />\r\n                                                        </Tooltip>\r\n                                                        : <Tag color=\"green\">Thumbnail</Tag>\r\n                                                    }\r\n                                                </Space>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n\r\n                        {getProductViewState.product.attribute_for_separate_images &&\r\n                            <>\r\n                                <Divider />\r\n                                {getProductViewState.attr_data_for_sp_img.map(attr => (\r\n                                    <>\r\n                                        <Form onFinish={handleImgSub} >\r\n                                            <h3>Separate Images for {attr.name}: {attr.option_value}</h3>\r\n                                            <Row gutter=\"12\" >\r\n                                                <Col span=\"12\">\r\n                                                    <Form.Item\r\n                                                        label=\"Image\"\r\n                                                        name=\"image\"\r\n                                                        rules={[{ required: true, message: 'Required' }]}\r\n                                                        extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\r\n                                                    >\r\n                                                        <Input type=\"file\" name=\"image\"\r\n                                                            onChange={e => {\r\n                                                                set_image(e.target.files[0])\r\n                                                                setImgAttr({\r\n                                                                    attribute_id: attr.attribute_id,\r\n                                                                    attribute_option_id: attr.attribute_option_id,\r\n                                                                })\r\n                                                            }}\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col span=\"4\">\r\n                                                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SAVE</Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form>\r\n                                        <div style={{ display: \"flex\" }} >\r\n                                            {getProductViewState.images.map(img => {\r\n                                                if (img.attribute_option_id === attr.attribute_option_id) {\r\n                                                    return (\r\n                                                        <div style={{ marginRight: 4, border: \"solid 1px #f5f5f5\", padding: 4 }} >\r\n                                                            <img src={`${cnf.s3_base_url}${img.image}`} alt=\"\" style={{ height: \"auto\", width: 100 }} />\r\n                                                            <div style={{ marginTop: 8 }} >\r\n                                                                <Space>\r\n                                                                    <Popconfirm\r\n                                                                        title=\"Are you sure to delete this image?\"\r\n                                                                        onConfirm={() => delProdImg({\r\n                                                                            product_id: product_id,\r\n                                                                            img_id: img.id,\r\n                                                                            image: img.image,\r\n                                                                            attribute_id: img.attribute_id,\r\n                                                                            attribute_option_id: img.attribute_option_id,\r\n                                                                        })}\r\n                                                                        okText=\"Delete\"\r\n                                                                        cancelText=\"Cancel\"\r\n                                                                        okType=\"danger\"\r\n                                                                    >\r\n                                                                        <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                                                                    </Popconfirm>\r\n                                                                    {!img.is_thumbnail ?\r\n                                                                        <Tooltip title=\"Mark as Thumbnail\" placement=\"bottom\" >\r\n                                                                            <Button size=\"small\" icon={<StarOutlined />} onClick={() => markImgThumb({\r\n                                                                                img_id: img.id,\r\n                                                                                product_id: product_id,\r\n                                                                                attribute_id: img.attribute_id,\r\n                                                                                attribute_option_id: img.attribute_option_id,\r\n                                                                            })} />\r\n                                                                        </Tooltip>\r\n                                                                        : <Tag color=\"green\">Thumbnail</Tag>\r\n                                                                    }\r\n                                                                </Space>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                        </div>\r\n                                        <Divider />\r\n                                    </>\r\n                                ))}\r\n                            </>\r\n                        }\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    saveProdImgState: state.saveProdImg,\r\n    delProdImgState: state.delProdImg,\r\n    markImgThumbState: state.markImgThumb,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    saveProdImg: (params) => dispatch(saveProdImg(params)),\r\n    saveProdImgReset: () => dispatch(saveProdImgReset()),\r\n    delProdImg: (params) => dispatch(delProdImg(params)),\r\n    delProdImgReset: () => dispatch(delProdImgReset()),\r\n    markImgThumb: (params) => dispatch(markImgThumb(params)),\r\n    markImgThumbReset: () => dispatch(markImgThumbReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductImages)","import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Button, Form, Input, Row, Col, Table, Divider, Popconfirm, Space } from \"antd\"\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n/* actions */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { addDescription, addDescriptionReset } from \"../../action/addDescriptionAction\"\r\nimport { listDescription, listDescriptionReset } from \"../../action/listDescriptionAction\"\r\n\r\n\r\nconst ProductDescription = props => {\r\n    /* variables */\r\n    const product_id = props.match.params.product_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        addDescription, addDescriptionReset, addDescriptionState,\r\n        listDescription, listDescriptionReset, listDescriptionState,\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        product_id: product_id,\r\n        title: \"\"\r\n    })\r\n    const [refresh, setRefresh] = useState(0)\r\n    const columns = [\r\n        {\r\n            title: 'Title',\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n        },\r\n        {\r\n            title: 'Sequence',\r\n            dataIndex: 'sequence',\r\n            key: 'sequence',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: obj => (\r\n                <Space size=\"middle\">\r\n                    <Link to={`/product/${product_id}/edit/description/${obj.key}`}>\r\n                        <Button size=\"small\" icon={<EditOutlined />} />\r\n                    </Link>\r\n                    <Popconfirm\r\n                        title=\"Are you sure to delete?\"\r\n                        onConfirm={() => console.log(\"hello\")}\r\n                        okText=\"DELETE\"\r\n                        cancelText=\"Cancel\"\r\n                        okType=\"danger\"\r\n                    >\r\n                        <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                    </Popconfirm>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            addDescriptionReset()\r\n            listDescription()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n        listDescription({\r\n            product_id: product_id\r\n        })\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (addDescriptionState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n        }\r\n    }, [addDescriptionState])\r\n\r\n    useEffect(() => {\r\n        if (listDescriptionState.apiState === \"success\") {\r\n            let tblData = []\r\n            listDescriptionState.list.map(item => {\r\n                tblData.push({\r\n                    key: item.id,\r\n                    title: item.title,\r\n                    sequence: item.sequence,\r\n                    action: item.id,\r\n                })\r\n            })\r\n            setTableData(tblData)\r\n        }\r\n    }, [listDescriptionState])\r\n\r\n    /* FUNTIONS */\r\n    const handleSubmit = () => {\r\n        addDescription(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Product Description\"\r\n            />\r\n            <PageContainer>\r\n                {getProductViewState.apiState === \"success\" &&\r\n                    <>\r\n                        <ProductTabs id={product_id} active=\"description\" type={getProductViewState.product.type} />\r\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\r\n                            <Row gutter={20}>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Title\"\r\n                                        name=\"title\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Input name=\"title\" placeholder=\"Enter Title\"\r\n                                            onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"primary\" htmlType=\"submit\" >SUBMIT</Button>\r\n                        </Form>\r\n                        <Divider />\r\n                        <Table columns={columns} dataSource={tableData} size='small' />\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    addDescriptionState: state.addDescription,\r\n    listDescriptionState: state.listDescription,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    addDescription: (params) => dispatch(addDescription(params)),\r\n    addDescriptionReset: () => dispatch(addDescriptionReset()),\r\n    listDescription: (params) => dispatch(listDescription(params)),\r\n    listDescriptionReset: () => dispatch(listDescriptionReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescription)","import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Button, Form, Input, Row, Col, InputNumber, message } from \"antd\"\r\nimport { Editor } from '@tinymce/tinymce-react'\r\n\r\n/* CUSTOM COMPONENTS */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n\r\n/* ACTIONS */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { getDescriptionView, getDescriptionViewReset } from \"../../action/getDescriptionViewAction\"\r\nimport { updateDescription, updateDescriptionReset } from \"../../action/updateDescriptionAction\"\r\n\r\n/* OTHERS */\r\nimport cnf from \"../../config\"\r\n\r\nconst ProductDescriptionEdit = props => {\r\n    /* VARIABLES */\r\n    const product_id = props.match.params.product_id\r\n    const description_id = props.match.params.description_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        getDescriptionView, getDescriptionViewReset, getDescriptionViewState,\r\n        updateDescription, updateDescriptionReset, updateDescriptionState,\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        product_id: product_id,\r\n        description_id: description_id,\r\n        title: \"\",\r\n        content: \"\",\r\n        sequence: 1\r\n    })\r\n    const [form] = Form.useForm()\r\n\r\n    /* CALLBACKS */\r\n    useEffect(() => {\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n        getDescriptionView({\r\n            description_id: description_id\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getDescriptionViewState.apiState === \"success\") {\r\n            form.setFieldsValue({\r\n                title: getDescriptionViewState.description.title,\r\n                sequence: getDescriptionViewState.description.sequence,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['title']: getDescriptionViewState.description.title,\r\n                ['sequence']: getDescriptionViewState.description.sequence,\r\n                ['content']: getDescriptionViewState.description.content,\r\n            })\r\n        }\r\n    }, [getDescriptionViewState])\r\n\r\n    useEffect(() => {\r\n        if (updateDescriptionState.apiState === \"success\") {\r\n            updateDescriptionReset()\r\n            message.success(updateDescriptionState.message);\r\n        }\r\n\r\n        if (updateDescriptionState.apiState === \"error\") {\r\n            message.error(updateDescriptionState.message);\r\n        }\r\n    }, [updateDescriptionState])\r\n\r\n    /* FUNTIONS */\r\n    const handleSubmit = () => {\r\n        updateDescription(formData)\r\n    }\r\n\r\n    const handleEditorChange = (content, editor) => {\r\n        setFormData({\r\n            ...formData,\r\n            [\"content\"]: encodeURI(content)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Product Description\"\r\n            />\r\n            <PageContainer>\r\n                {(getProductViewState.apiState === \"success\" && getDescriptionViewState.apiState === \"success\") &&\r\n                    <>\r\n                        <ProductTabs id={product_id} active=\"description\" type={getProductViewState.product.type} />\r\n                        <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\r\n                            <Row gutter={20}>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Title\"\r\n                                        name=\"title\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Input name=\"title\" placeholder=\"Enter Title\"\r\n                                            onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={6} xl={6}>\r\n                                    <Form.Item\r\n                                        label=\"Sequence\"\r\n                                        name=\"sequence\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\r\n                                            onChange={v => setFormData({ ...formData, ['sequence']: v })}\r\n                                            style={{ width: \"100%\" }}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\r\n                                    <Editor\r\n                                        initialValue={decodeURIComponent(getDescriptionViewState.description.content)}\r\n                                        apiKey={cnf.tinyKey}\r\n                                        init={{\r\n                                            height: 500,\r\n                                            menubar: false,\r\n                                            plugins: [\r\n                                                'advlist autolink lists link image charmap print preview anchor',\r\n                                                'searchreplace visualblocks code fullscreen',\r\n                                                'insertdatetime media table paste code help wordcount'\r\n                                            ],\r\n                                            toolbar:\r\n                                                'formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | code | link image | fontsizeselect',\r\n                                            fontsize_formats: '8pt 10pt 12pt 14pt 16pt 18pt 24pt 36pt 48pt'\r\n                                        }}\r\n                                        onEditorChange={handleEditorChange}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: 16 }} >SUBMIT</Button>\r\n                        </Form>\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    getDescriptionViewState: state.getDescriptionView,\r\n    updateDescriptionState: state.updateDescription,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    getDescriptionView: (params) => dispatch(getDescriptionView(params)),\r\n    getDescriptionViewReset: () => dispatch(getDescriptionViewReset()),\r\n    updateDescription: (params) => dispatch(updateDescription(params)),\r\n    updateDescriptionReset: () => dispatch(updateDescriptionReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductDescriptionEdit)","import React, { useState, useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Button, Form, Select, Row, Col, message, Table, Divider, Popconfirm } from \"antd\"\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n/* CUSTOM COMPONENTS */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport ProductTabs from \"../../component/ProductTabs/ProductTabs\"\r\n\r\n/* ACTIONS */\r\nimport { getProductView, getProductViewReset } from \"../../action/getProductViewAction\"\r\nimport { getProductList, getProductListReset } from \"../../action/getProductListAction\"\r\nimport { addRelProd, addRelProdReset } from \"../../action/addRelProdAction\"\r\nimport { listRelProd, listRelProdReset } from \"../../action/listRelProdAction\"\r\nimport { delRelProd, delRelProdReset } from \"../../action/delRelProdAction\"\r\n\r\nconst RelatedProducts = props => {\r\n    /* VARIABLES */\r\n    const product_id = props.match.params.product_id\r\n    const {\r\n        getProductView, getProductViewReset, getProductViewState,\r\n        getProductList, getProductListReset, getProductListState,\r\n        addRelProd, addRelProdReset, addRelProdState,\r\n        listRelProd, listRelProdReset, listRelProdState,\r\n        delRelProd, delRelProdReset, delRelProdState,\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        product_id: product_id,\r\n        related_product_id: \"\"\r\n    })\r\n    const [refresh, setRefresh] = useState(0)\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: obj => (\r\n                <Popconfirm\r\n                    title=\"Are you sure to delete?\"\r\n                    onConfirm={() => delRelProd({\r\n                        product_id: product_id,\r\n                        related_product_id: obj.key,\r\n                    })}\r\n                    okText=\"DELETE\"\r\n                    cancelText=\"Cancel\"\r\n                    okType=\"danger\"\r\n                >\r\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                </Popconfirm>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getProductView({\r\n            product_id: product_id\r\n        })\r\n        getProductList()\r\n        listRelProd({\r\n            product_id: product_id\r\n        })\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (addRelProdState.apiState === \"success\") {\r\n            addRelProdReset()\r\n            setRefresh(refresh + 1)\r\n            message.success(addRelProdState.message);\r\n        }\r\n\r\n        if (addRelProdState.apiState === \"error\") {\r\n            message.error(addRelProdState.message);\r\n        }\r\n    }, [addRelProdState])\r\n\r\n    useEffect(() => {\r\n        if (listRelProdState.apiState === \"success\") {\r\n            let tblData = []\r\n            listRelProdState.list.map(item => {\r\n                tblData.push({\r\n                    key: item.id,\r\n                    name: item.name,\r\n                    action: item.id,\r\n                })\r\n            })\r\n            setTableData(tblData)\r\n        }\r\n    }, [listRelProdState])\r\n\r\n\r\n    useEffect(() => {\r\n        if (delRelProdState.apiState === \"success\") {\r\n            delRelProdReset()\r\n            setRefresh(refresh + 1)\r\n            message.success(delRelProdState.message);\r\n        }\r\n\r\n        if (delRelProdState.apiState === \"error\") {\r\n            message.error(delRelProdState.message);\r\n        }\r\n    }, [delRelProdState])\r\n\r\n\r\n\r\n    /* FUNCTIONS */\r\n    const handleSubmit = () => {\r\n        addRelProd(formData)\r\n    }\r\n\r\n    const handleSelect = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Related Products\"\r\n            />\r\n            <PageContainer>\r\n                {getProductViewState.apiState === \"success\" &&\r\n                    <>\r\n                        <ProductTabs id={product_id} active=\"related_products\" type={getProductViewState.product.type} />\r\n                        <Form layout=\"vertical\" onFinish={handleSubmit} >\r\n                            <Row gutter={20}>\r\n                                <Col xs={24} sm={24} md={12} lg={12} xl={12}>\r\n                                    <Form.Item\r\n                                        label=\"Related Product\"\r\n                                        name=\"related_product_id\"\r\n                                        rules={[{ required: true, message: 'Required' }]}\r\n                                    >\r\n                                        <Select name=\"related_product_id\" placeholder=\"Select Related Product\"\r\n                                            showSearch\r\n                                            filterOption={(input, option) =>\r\n                                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                            onChange={(value) => handleSelect(\"related_product_id\", value)}\r\n                                        >\r\n                                            {getProductListState.list.map(p => (\r\n                                                <Select.Option key={p.id} value={p.id} >{`${p.name}`}</Select.Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"primary\" htmlType=\"submit\" >SAVE</Button>\r\n                            <Divider />\r\n                            <Table columns={columns} dataSource={tableData} size='small' pagination={false} />\r\n                        </Form>\r\n                    </>\r\n                }\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getProductViewState: state.getProductView,\r\n    getProductListState: state.getProductList,\r\n    addRelProdState: state.addRelProd,\r\n    listRelProdState: state.listRelProd,\r\n    delRelProdState: state.delRelProd,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProductView: (params) => dispatch(getProductView(params)),\r\n    getProductViewReset: () => dispatch(getProductViewReset()),\r\n    getProductList: (params) => dispatch(getProductList(params)),\r\n    getProductListReset: () => dispatch(getProductListReset()),\r\n    addRelProd: (params) => dispatch(addRelProd(params)),\r\n    addRelProdReset: () => dispatch(addRelProdReset()),\r\n    listRelProd: (params) => dispatch(listRelProd(params)),\r\n    listRelProdReset: () => dispatch(listRelProdReset()),\r\n    delRelProd: (params) => dispatch(delRelProd(params)),\r\n    delRelProdReset: () => dispatch(delRelProdReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RelatedProducts)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n\r\n/* action */\r\nimport { saveSliderImages, saveSliderImagesReset } from \"../../action/saveSliderImagesAction\"\r\nimport { getSliderList, getSliderListReset } from \"../../action/getSliderListAction\"\r\nimport { delSlider, delSliderReset } from \"../../action/delSliderAction\"\r\n\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\n\r\n\r\n\r\n\r\nconst HomeSlider = props => {\r\n    /* variables */\r\n    const {\r\n        saveSliderImages, saveSliderImagesReset, saveSliderImagesState,\r\n        getSliderList, getSliderListReset, getSliderListState,\r\n        delSlider, delSliderReset, delSliderState,\r\n    } = props\r\n    const initial_values = {\r\n        banner_img: \"\",\r\n        m_banner_img: \"\",\r\n        sequence: 0,\r\n    }\r\n    const [formData, setFormData] = useState(initial_values)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [banner_img, set_banner_img] = useState(null)\r\n    const [m_banner_img, set_m_banner_img] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [refresh, setRefresh] = useState(0)\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 100 }} />)\r\n        },\r\n        {\r\n            title: 'Mobile Image',\r\n            dataIndex: 'mobile_image',\r\n            key: 'mobile_image',\r\n            render: (mobile_image) => (<img src={`${cnf.s3_base_url}${mobile_image}`} alt=\"\" style={{ width: 100 }} />)\r\n        },\r\n        {\r\n            title: 'Sequence',\r\n            dataIndex: 'sequence',\r\n            key: 'sequence',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'id',\r\n            key: 'action',\r\n            render: (id) => (\r\n                <Popconfirm\r\n                    title=\"Are you sure to delete this slider?\"\r\n                    onConfirm={() => delSlider({\r\n                        id: id,\r\n                    })}\r\n                    okText=\"Delete\"\r\n                    cancelText=\"Cancel\"\r\n                    okType=\"danger\"\r\n                >\r\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                </Popconfirm>\r\n            )\r\n        }\r\n    ];\r\n    const [tableData, setTableData] = useState([])\r\n    const [form] = Form.useForm()\r\n\r\n    /* callbakcs */\r\n    useEffect(() => {\r\n        return (() => {\r\n            saveSliderImagesReset()\r\n            getSliderListReset()\r\n            delSliderReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getSliderList()\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (saveSliderImagesState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            form.resetFields()\r\n            setFormData(initial_values)\r\n            setSubmitLoading(false)\r\n            message.success(saveSliderImagesState.message);\r\n        }\r\n\r\n        if (saveSliderImagesState.apiState === \"error\") {\r\n            saveSliderImagesReset()\r\n            setSubmitLoading(false)\r\n            message.error(saveSliderImagesState.message);\r\n        }\r\n    }, [saveSliderImagesState])\r\n\r\n\r\n    useEffect(() => {\r\n        if (delSliderState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            message.success(delSliderState.message);\r\n        }\r\n\r\n        if (delSliderState.apiState === \"error\") {\r\n            delSliderReset()\r\n            message.error(delSliderState.message);\r\n        }\r\n    }, [delSliderState])\r\n\r\n    useEffect(() => {\r\n        if (getSliderListState.apiState === \"success\") {\r\n            let ar = []\r\n            getSliderListState.list.map(obj => {\r\n                ar.push({\r\n                    key: obj.id,\r\n                    image: obj.image,\r\n                    mobile_image: obj.m_image,\r\n                    sequence: obj.sequence,\r\n                    id: obj.id,\r\n                })\r\n            })\r\n            setTableData(ar)\r\n        }\r\n    }, [getSliderListState])\r\n\r\n    /* functions */\r\n    const handleSubmit = async () => {\r\n        let banner_img_filename = uuidv4()\r\n        let m_banner_img_filename = uuidv4()\r\n\r\n        let bannerImageValRes = validateImageFile(banner_img)\r\n        let mBannerImageValRes = validateImageFile(m_banner_img)\r\n\r\n\r\n        if (!bannerImageValRes.status) {\r\n            alert(\"Banner Image's extension is not allowed.\")\r\n            return\r\n        }\r\n        if (!mBannerImageValRes.status) {\r\n            alert(\"Mobile Banner Image's extension is not allowed.\")\r\n            return\r\n        }\r\n\r\n        setSubmitLoading(true)\r\n\r\n        let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\r\n        await axios.put(s3UrlRes2.url, banner_img)\r\n\r\n        let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\r\n        await axios.put(s3UrlRes3.url, m_banner_img)\r\n\r\n        formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\r\n        formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\r\n\r\n        saveSliderImages(formData)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Home Page Sliders\"\r\n            />\r\n            <PageContainer>\r\n\r\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Banner Image\"\r\n                                name=\"banner_img\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"m_banner_img\"\r\n                                    onChange={e => set_banner_img(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Banner Image For Mobile\"\r\n                                name=\"m_banner_img\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"m_banner_img\"\r\n                                    onChange={e => set_m_banner_img(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"4\">\r\n                            <Form.Item\r\n                                label=\"Sequence\"\r\n                                name=\"sequence\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={v => setFormData({ ...formData, [\"sequence\"]: v })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n                </Form>\r\n\r\n                <Divider />\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    saveSliderImagesState: state.saveSliderImages,\r\n    getSliderListState: state.getSliderList,\r\n    delSliderState: state.delSlider,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    saveSliderImages: (params) => dispatch(saveSliderImages(params)),\r\n    saveSliderImagesReset: () => dispatch(saveSliderImagesReset()),\r\n    getSliderList: (params) => dispatch(getSliderList(params)),\r\n    getSliderListReset: () => dispatch(getSliderListReset()),\r\n    delSlider: (params) => dispatch(delSlider(params)),\r\n    delSliderReset: () => dispatch(delSliderReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n\r\n/* action */\r\nimport { saveTestimonial, saveTestimonialReset } from \"../../action/saveTestimonialAction\"\r\nimport { getTestimonialList, getTestimonialListReset } from \"../../action/getTestimonialListAction\"\r\nimport { delTestimonial, delTestimonialReset } from \"../../action/delTestimonialAction\"\r\n\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\n\r\nconst Testimonial = props => {\r\n    /* variables */\r\n    const {\r\n        saveTestimonial, saveTestimonialReset, saveTestimonialState,\r\n        getTestimonialList, getTestimonialListReset, getTestimonialListState,\r\n        delTestimonial, delTestimonialReset, delTestimonialState,\r\n    } = props\r\n    const initial_values = {\r\n        description: \"\",\r\n        image: \"\",\r\n        name: \"\",\r\n        title: \"\",\r\n        sequence: 1,\r\n    }\r\n    const [formData, setFormData] = useState(initial_values)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [image, set_image] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [refresh, setRefresh] = useState(0)\r\n    const columns = [\r\n        {\r\n            title: 'Description',\r\n            dataIndex: 'description',\r\n            key: 'description',\r\n        },\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Title',\r\n            dataIndex: 'title',\r\n            key: 'title',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'id',\r\n            key: 'action',\r\n            render: (id) => (\r\n                <Popconfirm\r\n                    title=\"Are you sure to delete this testimonial?\"\r\n                    onConfirm={() => delTestimonial({\r\n                        id: id,\r\n                    })}\r\n                    okText=\"Delete\"\r\n                    cancelText=\"Cancel\"\r\n                    okType=\"danger\"\r\n                >\r\n                    <Button size=\"small\" icon={<DeleteOutlined />} />\r\n                </Popconfirm>\r\n            )\r\n        }\r\n    ];\r\n    const [tableData, setTableData] = useState([])\r\n    const [form] = Form.useForm()\r\n\r\n    /* callbakcs */\r\n    useEffect(() => {\r\n        return (() => {\r\n            saveTestimonialReset()\r\n            getTestimonialListReset()\r\n            delTestimonialReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getTestimonialList()\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (saveTestimonialState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            form.resetFields()\r\n            setFormData(initial_values)\r\n            setSubmitLoading(false)\r\n            message.success(saveTestimonialState.message);\r\n        }\r\n\r\n        if (saveTestimonialState.apiState === \"error\") {\r\n            saveTestimonialReset()\r\n            setSubmitLoading(false)\r\n            message.error(saveTestimonialState.message);\r\n        }\r\n    }, [saveTestimonialState])\r\n\r\n\r\n    useEffect(() => {\r\n        if (delTestimonialState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            message.success(delTestimonialState.message);\r\n        }\r\n\r\n        if (delTestimonialState.apiState === \"error\") {\r\n            delTestimonialReset()\r\n            message.error(delTestimonialState.message);\r\n        }\r\n    }, [delTestimonialState])\r\n\r\n    useEffect(() => {\r\n        if (getTestimonialListState.apiState === \"success\") {\r\n            let ar = []\r\n            getTestimonialListState.list.map(obj => {\r\n                ar.push({\r\n                    key: obj.id,\r\n                    description: obj.description,\r\n                    image: obj.image,\r\n                    name: obj.name,\r\n                    title: obj.title,\r\n                    id: obj.id,\r\n                })\r\n            })\r\n            setTableData(ar)\r\n        }\r\n    }, [getTestimonialListState])\r\n\r\n    /* functions */\r\n    const handleSubmit = async () => {\r\n        let image_filename\r\n        let imageValRes\r\n        if (image) {\r\n            image_filename = uuidv4()\r\n            imageValRes = validateImageFile(image)\r\n            if (!imageValRes.status) {\r\n                alert(\"Image's extension is not allowed.\")\r\n                return\r\n            }\r\n        }\r\n\r\n\r\n        setSubmitLoading(true)\r\n\r\n        if (image) {\r\n            let s3UrlRes = await getS3SingedUrl(image_filename, imageValRes.ext, image)\r\n            await axios.put(s3UrlRes.url, image)\r\n\r\n            formData.image = `${image_filename}.${imageValRes.ext}`\r\n        }\r\n\r\n        saveTestimonial(formData)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Home Page Testimonials\"\r\n            />\r\n            <PageContainer>\r\n\r\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Description\"\r\n                                name=\"description\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\r\n                                    onChange={e => setFormData({ ...formData, ['description']: e.target.value })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Image\"\r\n                                name=\"image\"\r\n                                extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\r\n                            >\r\n                                <Input type=\"file\" name=\"image\"\r\n                                    onChange={e => set_image(e.target.files[0])}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"name\" placeholder=\"Enter Name\"\r\n                                    onChange={e => setFormData({ ...formData, ['name']: e.target.value })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                            >\r\n                                <Input name=\"title\" placeholder=\"Enter Title\"\r\n                                    onChange={e => setFormData({ ...formData, ['title']: e.target.value })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"4\">\r\n                            <Form.Item\r\n                                label=\"Sequence\"\r\n                                name=\"sequence\"\r\n                            >\r\n                                <InputNumber name=\"sequence\" placeholder=\"Enter Sequence\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={v => setFormData({ ...formData, ['sequence']: v })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n                </Form>\r\n\r\n                <Divider />\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    saveTestimonialState: state.saveTestimonial,\r\n    getTestimonialListState: state.getTestimonialList,\r\n    delTestimonialState: state.delTestimonial,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    saveTestimonial: (params) => dispatch(saveTestimonial(params)),\r\n    saveTestimonialReset: () => dispatch(saveTestimonialReset()),\r\n    getTestimonialList: (params) => dispatch(getTestimonialList(params)),\r\n    getTestimonialListReset: () => dispatch(getTestimonialListReset()),\r\n    delTestimonial: (params) => dispatch(delTestimonial(params)),\r\n    delTestimonialReset: () => dispatch(delTestimonialReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Testimonial)","import React from \"react\"\r\n\r\nconst NotFound = props => {\r\n    return (\r\n        <h1>NotFound</h1>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, { useState, useEffect } from \"react\"\r\nimport { Button, Form, Input } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport { LoginContainer } from \"../../component/Xcomponent\"\r\n\r\n/* actions */\r\nimport { login, loginReset } from \"../../action/loginAction\"\r\n\r\nconst Login = props => {\r\n    /* variables */\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    })\r\n    const { login, loginReset, loginState } = props\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => loginReset())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (loginState.apiState === \"success\") {\r\n            localStorage.setItem(\"PikyUserToken\", loginState.data.token)\r\n            localStorage.setItem(\"PikyUser\", JSON.stringify(loginState.data.user))\r\n            setRedirect([true, '/'])\r\n        }\r\n    }, [loginState])\r\n\r\n    /* function */\r\n    const handleSubmit = () => {\r\n        login(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n\r\n            <LoginContainer>\r\n                <div style={{ padding: 16, border: \"solid 1px #ccc\", background: \"#fff\", borderRadius: 4, minWidth: 350 }} >\r\n                    <Form layout=\"vertical\" onFinish={handleSubmit}>\r\n                        <Form.Item\r\n                            label=\"Email\"\r\n                            name=\"email\"\r\n                            rules={[{ required: true, message: 'Required' }]}\r\n                        >\r\n                            <Input name=\"email\" placeholder=\"Email\" onChange={(e) => setFormData({ ...formData, ['email']: e.target.value })} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            rules={[{ required: true, message: 'Required' }]}\r\n                        >\r\n                            <Input.Password name=\"password\" placeholder=\"Password\" onChange={(e) => setFormData({ ...formData, ['password']: e.target.value })} />\r\n                        </Form.Item>\r\n                        <Button htmlType=\"submit\" type=\"primary\" block >LOGIN</Button>\r\n                    </Form>\r\n                </div>\r\n            </LoginContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ loginState: state.login })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    login: (params) => dispatch(login(params)),\r\n    loginReset: () => dispatch(loginReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React, { useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { notification } from 'antd'\r\n\r\n\r\nconst Logout = props => {\r\n\r\n    useEffect(() => {\r\n        localStorage.removeItem('PikyUserToken')\r\n        localStorage.removeItem('PikyUser')\r\n        notification.success({\r\n            message: \"You are logged out successfully.\",\r\n            placement: \"bottomRight\"\r\n        })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Redirect to=\"/login\" />\r\n    )\r\n}\r\n\r\n\r\nexport default Logout\r\n\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n\r\n/* action */\r\nimport { updateSetting, updateSettingReset } from \"../../action/updateSettingAction\"\r\nimport { getSetting, getSettingReset } from \"../../action/getSettingAction\"\r\n\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\nimport _ from \"lodash\"\r\n\r\n\r\n\r\nconst HomeSlider = props => {\r\n    /* variables */\r\n    const {\r\n        updateSetting, updateSettingReset, updateSettingState,\r\n        getSetting, getSettingReset, getSettingState,\r\n    } = props\r\n    const initial_values = {\r\n        international_price: 0,\r\n        admin_email: \"\",\r\n        offer_strip:\"\",\r\n    }\r\n    const [formData, setFormData] = useState(initial_values)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [banner_img, set_banner_img] = useState(null)\r\n    const [m_banner_img, set_m_banner_img] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [refresh, setRefresh] = useState(0)\r\n    const [form] = Form.useForm()\r\n\r\n    /* callbakcs */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getSettingReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getSetting();\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (getSettingState.apiState === \"success\") {\r\n            let data = getSettingState.list;\r\n            let IP = _.find(data, ['meta_key', \"international_price\"]);\r\n            let AE = _.find(data, ['meta_key', \"admin_email\"]);\r\n            let OS = _.find(data, ['meta_key', \"offer_strip\"]);\r\n\r\n            form.setFieldsValue({\r\n                international_price: IP.meta_value,\r\n                admin_email: AE.meta_value,\r\n                offer_strip: OS.meta_value,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['international_price']: IP.meta_value,\r\n                ['admin_email']: AE.meta_value,\r\n                ['offer_strip']: OS.meta_value,\r\n            })\r\n        }\r\n    }, [getSettingState])\r\n\r\n    useEffect(() => {\r\n        if (updateSettingState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            form.resetFields()\r\n            setFormData(initial_values)\r\n            setSubmitLoading(false)\r\n            message.success(updateSettingState.message);\r\n        }\r\n\r\n        if (updateSettingState.apiState === \"error\") {\r\n            updateSettingReset()\r\n            setSubmitLoading(false)\r\n            message.error(updateSettingState.message);\r\n        }\r\n    }, [updateSettingState])\r\n\r\n    /* functions */\r\n    const handleSubmit = async () => {\r\n        setSubmitLoading(true)\r\n        updateSetting(formData)\r\n    }\r\n\r\n    const handleChange = e => { \r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Setting Configuration\"\r\n            />\r\n            <PageContainer>\r\n\r\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\r\n                    <Row gutter=\"24\" >\r\n\r\n                        <Col span=\"4\">\r\n                        <Form.Item\r\n                                label=\"INR for 1 USD\"\r\n                                name=\"international_price\"\r\n                                rules={[{ required: true, message: 'Required',pattern: new RegExp(/^[0-9]+$/) }]}\r\n                            >\r\n                                <Input name=\"international_price\" placeholder=\"Enter INR for 1 USD\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item> \r\n                        </Col>\r\n                        <Col span=\"8\">\r\n                            <Form.Item\r\n                                label=\"Admin Email\"\r\n                                name=\"admin_email\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"admin_email\" placeholder=\"Enter admin email id\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Offer Strip \"\r\n                                name=\"offer_strip\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"offer_strip\" placeholder=\"Enter offer strip for admin\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    updateSettingState: state.updateSetting,\r\n    getSettingState: state.getSetting,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateSetting: (params) => dispatch(updateSetting(params)),\r\n    updateSettingReset: () => dispatch(updateSettingReset()),\r\n    getSetting: (params) => dispatch(getSetting(params)),\r\n    getSettingReset: (params) => dispatch(getSettingReset(params)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Input, Row, Col, TreeSelect, Button, message, InputNumber, Divider, Popconfirm, Table } from \"antd\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport axios from 'axios'\r\nimport { DeleteOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n\r\n/* action */\r\nimport { updateShipping, updateShippingReset } from \"../../action/updateShippingAction\"\r\nimport { getSetting, getSettingReset } from \"../../action/getSettingAction\"\r\n\r\n\r\n/* others */\r\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\r\nimport cnf from \"../../config\"\r\nimport _ from \"lodash\"\r\n\r\n\r\n\r\nconst HomeSlider = props => {\r\n    /* variables */\r\n    const {\r\n        updateShipping, updateShippingReset, updateShippingState,\r\n        getSetting, getSettingReset, getSettingState,\r\n    } = props\r\n    const initial_values = {\r\n        minimun_cart_value: 0,\r\n        shipping_price: 0,\r\n        international_shipping: 0,\r\n    }\r\n    const [formData, setFormData] = useState(initial_values)\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [banner_img, set_banner_img] = useState(null)\r\n    const [m_banner_img, set_m_banner_img] = useState(null)\r\n    const [submitLoading, setSubmitLoading] = useState(false)\r\n    const [refresh, setRefresh] = useState(0)\r\n    const [form] = Form.useForm()\r\n\r\n    /* callbakcs */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getSettingReset()\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getSetting();\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (getSettingState.apiState === \"success\") {\r\n            let data = getSettingState.list;\r\n            let SP = _.find(data, ['meta_key', \"shipping_charge\"]);\r\n            let MCV = _.find(data, ['meta_key', \"minimun_cart_value\"]);\r\n            let ISP = _.find(data, ['meta_key', \"international_shipping\"]);\r\n\r\n            form.setFieldsValue({\r\n                minimun_cart_value: MCV.meta_value,\r\n                shipping_price: SP.meta_value,\r\n                international_shipping: ISP.meta_value,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['minimun_cart_value']: MCV.meta_value,\r\n                ['shipping_price']: SP.meta_value,\r\n                ['international_shipping']: ISP.meta_value,\r\n            })\r\n        }\r\n    }, [getSettingState])\r\n\r\n    useEffect(() => {\r\n        if (updateShippingState.apiState === \"success\") {\r\n            setRefresh(refresh + 1)\r\n            form.resetFields()\r\n            setFormData(initial_values)\r\n            setSubmitLoading(false)\r\n            message.success(updateShippingState.message);\r\n        }\r\n\r\n        if (updateShippingState.apiState === \"error\") {\r\n            updateShippingReset()\r\n            setSubmitLoading(false)\r\n            message.error(updateShippingState.message);\r\n        }\r\n    }, [updateShippingState])\r\n\r\n    /* functions */\r\n    const handleSubmit = async () => {\r\n        setSubmitLoading(true)\r\n        updateShipping(formData)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Shipping Charge Configuration\"\r\n            />\r\n            <PageContainer>\r\n\r\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit} >\r\n                    <Row gutter=\"24\" >\r\n\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Minimun Cart Value\"\r\n                                name=\"minimun_cart_value\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"minimun_cart_value\" placeholder=\"Enter minimun cart value\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={v => setFormData({ ...formData, [\"minimun_cart_value\"]: v })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Shipping Price\"\r\n                                name=\"shipping_price\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"shipping_price\" placeholder=\"Enter shipping price\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={v => setFormData({ ...formData, [\"shipping_price\"]: v })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"International Shipping Price\"\r\n                                name=\"international_shipping\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"international_shipping\" placeholder=\"Enter international shipping price\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={v => setFormData({ ...formData, [\"international_shipping\"]: v })}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    updateShippingState: state.updateShipping,\r\n    getSettingState: state.getSetting,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateShipping: (params) => dispatch(updateShipping(params)),\r\n    updateShippingReset: () => dispatch(updateShippingReset()),\r\n    getSetting: (params) => dispatch(getSetting(params)),\r\n    getSettingReset: (params) => dispatch(getSettingReset(params)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeSlider)","import styled, { css } from 'styled-components'\r\n\r\nexport const Indicator = styled.div`\r\n    height: 10px;\r\n    width: 10px;\r\n    border-radius: 5px;\r\n    background-color: grey;\r\n\r\n    ${props => props.green && css`\r\n        background-color: #03c503;\r\n    `}\r\n\r\n    ${props => props.red && css`\r\n        background-color: red;\r\n    `}\r\n`","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Badge } from \"antd\"\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport { Indicator } from \"./VoucherListStyle\"\r\n\r\n/* actions */\r\nimport { getVoucherList, getVoucherListReset } from \"../../action/getVoucherListAction\"\r\n\r\n\r\nconst VoucherList = props => {\r\n    /* variables */\r\n    const { getVoucherList, getVoucherListReset, getVoucherListState } = props\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Code',\r\n            dataIndex: 'code',\r\n            key: 'code',\r\n            render: code => <span>{code}</span>\r\n        },\r\n        {\r\n            title: 'Discount',\r\n            dataIndex: 'discountData',\r\n            key: 'discountData',\r\n            render: (obj) => (\r\n                <Space>\r\n                    {obj.type === \"percentage\" ?\r\n                        <span>{obj.discount}%</span>\r\n                        : <span>₹{obj.discount}</span>\r\n                    }\r\n\r\n                </Space>\r\n            )\r\n        },\r\n        {\r\n            title: 'Valid From',\r\n            dataIndex: 'valid_from',\r\n            key: 'valid_from',\r\n            render: (valid_from) => {\r\n                var date = new Date(valid_from);\r\n                var month = date.getMonth() +1;//months (0-11)\r\n                var day = date.getDate();//day (1-31)\r\n                var year = date.getFullYear();\r\n\r\n                var formattedDate = month + \"/\" + day + \"/\" + year;\r\n                return (\r\n                    <span>{formattedDate}</span>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: 'Valid To',\r\n            dataIndex: 'valid_to',\r\n            key: 'valid_to',\r\n            render: (valid_to) => {\r\n                var date = new Date(valid_to);\r\n                var month = date.getMonth() +1 + 1;\r\n                var day = date.getDate();\r\n                var year = date.getFullYear();\r\n                var formattedDate = month + \"/\" + day + \"/\" + year;\r\n                return (\r\n                    <span>{formattedDate}</span>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            render: (status) => status === \"active\" ? <Indicator green /> : <Indicator red />\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'id',\r\n            key: 'action',\r\n            render: (id) => (\r\n                <Link to={`/voucher_management/${id}/edit`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\r\n            )\r\n        },\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getVoucherList()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getVoucherListState.apiState === \"success\") {\r\n            let tableData = []\r\n            getVoucherListState.list.map(row => {\r\n                tableData.push({\r\n                    key: row.id,\r\n                    name: row.name,\r\n                    code: row.code,\r\n                    valid_from: row.valid_from,\r\n                    valid_to: row.valid_to,\r\n                    discountData: { type: row.type, discount: row.discount },\r\n                    status: row.status,\r\n                    id: row.id,\r\n                })\r\n            })\r\n            setTableData(tableData)\r\n        }\r\n    }, [getVoucherListState])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Voucher List\"\r\n                actionBtn={<Link to='/voucher_management/add'><Button >New</Button></Link>}\r\n            />\r\n            <PageContainer list >\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getVoucherListState: state.getVoucherList,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getVoucherList: (params) => dispatch(getVoucherList(params)),\r\n    getVoucherListReset: () => dispatch(getVoucherListReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherList)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, DatePicker, Space } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* actions */\r\nimport { createVoucher, createVoucherReset } from \"../../action/createVoucherAction\"\r\nconst { RangePicker } = DatePicker;\r\nconst VoucherAdd = props => {\r\n    /* variables */\r\n    const {\r\n        createVoucher, createVoucherReset, createVoucherState\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        type: \"percentage\",\r\n        status: \"active\",\r\n        name: \"\",\r\n        code: \"\",\r\n        description: \"\",\r\n        no_of_usage_for_all: \"\",\r\n        discount: \"\",\r\n        minimum_cart_value: \"\",\r\n        maximum_discount_amount: \"\",\r\n        valid_from: \"\",\r\n        valid_to: \"\",\r\n\r\n    })\r\n    const [form] = Form.useForm()\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => createVoucherReset())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            status: \"active\",\r\n            type: \"percentage\"\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (createVoucherState.apiState === \"success\") {\r\n            setRedirect([true, '/voucher_management/list'])\r\n            message.success(createVoucherState.message);\r\n        }\r\n\r\n        if (createVoucherState.apiState === \"error\") {\r\n            createVoucherReset()\r\n            message.error(createVoucherState.message);\r\n        }\r\n    }, [createVoucherState])\r\n\r\n    /* functions */\r\n    const handleChange = e => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleNumberChange = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n    const handleDatePickerChange = (date, dateString) => {\r\n        setFormData(({\r\n            ...formData,\r\n            [\"valid_from\"]: dateString[0],\r\n            [\"valid_to\"]: dateString[1]\r\n        }))\r\n    }\r\n\r\n    const handleSelect = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        createVoucher(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Add Voucher\"\r\n            />\r\n            <PageContainer>\r\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"name\" placeholder=\"Enter Coupon Name\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Code\"\r\n                                name=\"code\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"code\" placeholder=\"Enter Coupon Code\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"24\">\r\n                            <Form.Item\r\n                                label=\"Description\"\r\n                                name=\"description\"\r\n                            >\r\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"No of usage for all\"\r\n                                name=\"no_of_usage_for_all\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"no_of_usage_for_all\" placeholder=\"No of usage for all\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        {/* <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"No of usage for a customer\"\r\n                                name=\"no_of_usage_for_a_customer\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"no_of_usage_for_a_customer\" placeholder=\"No of usage for a customer\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col> */}\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Validity\"\r\n                                name=\"validity\"\r\n                                rules={[\r\n                                    { required: true, message: 'Required' },\r\n                                ]}\r\n                            >\r\n                                <RangePicker showTime format=\"DD-MM-YYYY HH:mm:ss\" onChange={handleDatePickerChange} />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\">\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Type\"\r\n                                name=\"type\"\r\n                            >\r\n                                <Select name=\"type\" placeholder=\"Select Type\" defaultValue=\"percentage\"\r\n                                    onSelect={v => handleNumberChange(\"type\", v)}\r\n                                >\r\n                                    <Select.Option key=\"percentage\" value=\"percentage\">Percentage</Select.Option>\r\n                                    <Select.Option key=\"flat\" value=\"flat\">Flat</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Discount\"\r\n                                name=\"discount\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"discount\" placeholder=\"Enter discount\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"discount\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Minimum cart value\"\r\n                                name=\"minimum_cart_value\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"minimum_cart_value\" placeholder=\"Enter minimum cart value\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"minimum_cart_value\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Maximum discount amount\"\r\n                                name=\"maximum_discount_amount\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"maximum_discount_amount\" placeholder=\"Enter maximum discount amount\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"maximum_discount_amount\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Status\"\r\n                                name=\"status\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Select name=\"status\" placeholder=\"Select Status\"\r\n                                    onSelect={v => handleNumberChange(\"status\", v)}\r\n                                >\r\n                                    <Select.Option key=\"active\" value=\"active\" >Active</Select.Option>\r\n                                    <Select.Option key=\"inactive\" value=\"inactive\">Inactive</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={createVoucherState.apiState === \"loading\"} >SUBMIT</Button>\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    createVoucherState: state.createVoucher,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    createVoucher: (params) => dispatch(createVoucher(params)),\r\n    createVoucherReset: () => dispatch(createVoucherReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherAdd)","import React, { useState, useEffect } from \"react\"\r\nimport { Form, Row, Col, Select, Button, Input, InputNumber, message, DatePicker, Space } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport moment from 'moment'\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* actions */\r\nimport { updateVoucher, updateVoucherReset } from \"../../action/updateVoucherAction\"\r\nimport { getVoucherView, getVoucherViewReset } from \"../../action/getVoucherViewAction\"\r\nconst { RangePicker } = DatePicker;\r\nconst VoucherEdit = props => {\r\n    /* variables */\r\n    const voucher_id = props.match.params.voucher_id\r\n    const {\r\n        updateVoucher, updateVoucherReset, updateVoucherState,\r\n        getVoucherView, getVoucherViewReset, getVoucherViewState,\r\n    } = props\r\n    const [formData, setFormData] = useState({\r\n        voucher_id: voucher_id,\r\n        type: \"percentage\",\r\n        status: \"active\",\r\n        name: \"\",\r\n        code: \"\",\r\n        description: \"\",\r\n        no_of_usage_for_all: \"\",\r\n        discount: \"\",\r\n        minimum_cart_value: \"\",\r\n        maximum_discount_amount: \"\",\r\n        valid_from: \"\",\r\n        valid_to: \"\",\r\n\r\n    })\r\n    const [form] = Form.useForm()\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        return (() => {\r\n            getVoucherViewReset()\r\n            updateVoucherReset()\r\n        })\r\n    }, [])\r\n    useEffect(() => {\r\n        getVoucherView({\r\n            voucher_id: voucher_id\r\n        })\r\n    }, [])\r\n    useEffect(() => {\r\n        if (getVoucherViewState.apiState === \"success\") {\r\n            form.setFieldsValue({\r\n                type: getVoucherViewState.coupon.type,\r\n                status: getVoucherViewState.coupon.status,\r\n                name: getVoucherViewState.coupon.name,\r\n                code: getVoucherViewState.coupon.code,\r\n                description: getVoucherViewState.coupon.description,\r\n                no_of_usage_for_all: getVoucherViewState.coupon.no_of_usage_for_all,\r\n                discount: getVoucherViewState.coupon.discount,\r\n                minimum_cart_value: getVoucherViewState.coupon.minimum_cart_value,\r\n                maximum_discount_amount: getVoucherViewState.coupon.maximum_discount_amount,\r\n                validity: [moment(moment(getVoucherViewState.coupon.valid_from).format(\"YYYY-MM-DD HH:mm:ss\"), 'YYYY-MM-DD HH:mm:ss'), moment(moment(getVoucherViewState.coupon.valid_to).format(\"YYYY-MM-DD HH:mm:ss\"), 'YYYY-MM-DD HH:mm:ss')],\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['type']: getVoucherViewState.coupon.type,\r\n                ['status']: getVoucherViewState.coupon.status,\r\n                ['name']: getVoucherViewState.coupon.name,\r\n                ['code']: getVoucherViewState.coupon.code,\r\n                ['description']: getVoucherViewState.coupon.description,\r\n                ['no_of_usage_for_all']: getVoucherViewState.coupon.no_of_usage_for_all,\r\n                ['discount']: getVoucherViewState.coupon.discount,\r\n                ['minimum_cart_value']: getVoucherViewState.coupon.minimum_cart_value,\r\n                ['maximum_discount_amount']: getVoucherViewState.coupon.maximum_discount_amount,\r\n                [\"valid_from\"]: moment(getVoucherViewState.coupon.valid_from).format(\"DD-MM-YYYY HH:mm:ss\"),\r\n                [\"valid_to\"]: moment(getVoucherViewState.coupon.valid_to).format(\"DD-MM-YYYY HH:mm:ss\"),\r\n            })\r\n        }\r\n    }, [getVoucherViewState])\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            status: \"active\",\r\n            type: \"percentage\"\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (updateVoucherState.apiState === \"success\") {\r\n            setRedirect([true, '/voucher_management/list'])\r\n            message.success(updateVoucherState.message);\r\n        }\r\n\r\n        if (updateVoucherState.apiState === \"error\") {\r\n            updateVoucherReset()\r\n            message.error(updateVoucherState.message);\r\n        }\r\n    }, [updateVoucherState])\r\n\r\n    /* functions */\r\n    const handleChange = e => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleNumberChange = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n    const handleDatePickerChange = (date, dateString) => {\r\n        setFormData(({\r\n            ...formData,\r\n            [\"valid_from\"]: dateString[0],\r\n            [\"valid_to\"]: dateString[1]\r\n        }))\r\n    }\r\n\r\n    const handleSelect = (name, value) => {\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        updateVoucher(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n\r\n            <Header\r\n                title=\"Add Voucher\"\r\n            />\r\n            <PageContainer>\r\n                <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"name\" placeholder=\"Enter Coupon Name\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Code\"\r\n                                name=\"code\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"code\" placeholder=\"Enter Coupon Code\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"24\">\r\n                            <Form.Item\r\n                                label=\"Description\"\r\n                                name=\"description\"\r\n                            >\r\n                                <Input.TextArea name=\"description\" placeholder=\"Enter Description\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"No of usage for all\"\r\n                                name=\"no_of_usage_for_all\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"no_of_usage_for_all\" placeholder=\"No of usage for all\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        {/* <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"No of usage for a customer\"\r\n                                name=\"no_of_usage_for_a_customer\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Input name=\"no_of_usage_for_a_customer\" placeholder=\"No of usage for a customer\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col> */}\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"12\">\r\n                            <Form.Item\r\n                                label=\"Validity\"\r\n                                name=\"validity\"\r\n                                rules={[\r\n                                    { required: true, message: 'Required' },\r\n                                ]}\r\n                            >\r\n                                <RangePicker showTime format=\"DD-MM-YYYY HH:mm:ss\" onChange={handleDatePickerChange} />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row gutter=\"24\">\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Type\"\r\n                                name=\"type\"\r\n                            >\r\n                                <Select name=\"type\" placeholder=\"Select Type\" defaultValue=\"percentage\"\r\n                                    onSelect={v => handleNumberChange(\"type\", v)}\r\n                                >\r\n                                    <Select.Option key=\"percentage\" value=\"percentage\">Percentage</Select.Option>\r\n                                    <Select.Option key=\"flat\" value=\"flat\">Flat</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Discount\"\r\n                                name=\"discount\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"discount\" placeholder=\"Enter discount\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"discount\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter=\"24\" >\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Minimum cart value\"\r\n                                name=\"minimum_cart_value\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"minimum_cart_value\" placeholder=\"Enter minimum cart value\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"minimum_cart_value\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Maximum discount amount\"\r\n                                name=\"maximum_discount_amount\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <InputNumber name=\"maximum_discount_amount\" placeholder=\"Enter maximum discount amount\" style={{ width: \"100%\" }} min={0}\r\n                                    onChange={v => handleNumberChange(\"maximum_discount_amount\", v)}\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span=\"6\">\r\n                            <Form.Item\r\n                                label=\"Status\"\r\n                                name=\"status\"\r\n                                rules={[{ required: true, message: 'Required' }]}\r\n                            >\r\n                                <Select name=\"status\" placeholder=\"Select Status\"\r\n                                    onSelect={v => handleNumberChange(\"status\", v)}\r\n                                >\r\n                                    <Select.Option key=\"active\" value=\"active\" >Active</Select.Option>\r\n                                    <Select.Option key=\"inactive\" value=\"inactive\">Inactive</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={updateVoucherState.apiState === \"loading\"} >SUBMIT</Button>\r\n                </Form>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    updateVoucherState: state.updateVoucher,\r\n    getVoucherViewState: state.getVoucherView,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateVoucher: (params) => dispatch(updateVoucher(params)),\r\n    updateVoucherReset: () => dispatch(updateVoucherReset()),\r\n    getVoucherView: (params) => dispatch(getVoucherView(params)),\r\n    getVoucherViewReset: () => dispatch(getVoucherViewReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VoucherEdit)","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Tag } from \"antd\"\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\nimport { CopyOutlined, EditOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport { Indicator } from \"./OrderListStyle\"\r\n\r\n/* actions */\r\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\r\n\r\n\r\nconst OrderList = props => {\r\n    /* variables */\r\n    const { getOrderList, getOrderListReset, getOrderListState } = props\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Customer Name',\r\n            dataIndex: 'customer_name',\r\n            key: 'customer_name',\r\n        },\r\n        // {\r\n        //     title: 'Email',\r\n        //     dataIndex: 's_email',\r\n        //     key: 's_email',\r\n        //     render: s_email => <span>{s_email}</span>\r\n        // },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 's_phone',\r\n            key: 's_phone',\r\n            render: s_phone => <span>{s_phone}</span>\r\n        },\r\n        {\r\n            title: 'Order No',\r\n            dataIndex: 'order_no',\r\n            key: 'order_no',\r\n            render: order_no => <span>{order_no}</span>\r\n        },\r\n        {\r\n            title: 'Order Date',\r\n            dataIndex: 'order_date',\r\n            key: 'order_date',\r\n            render: (order_date) => {\r\n                var date = new Date(order_date);\r\n                var month = date.getMonth() +1;//months (0-11)\r\n                var day = date.getDate();//day (1-31)\r\n                var year = date.getFullYear();\r\n\r\n                var formattedDate = month + \"/\" + day + \"/\" + year;\r\n                return (\r\n                    <span>{formattedDate}</span>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: 'Total Amount',\r\n            dataIndex: 'total',\r\n            key: 'total',\r\n            render: (obj) => <span>{obj.payment_type == \"USD\" ? <>$</> : <>₹</>}{obj.total}</span>\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            render: status => {\r\n                if (status == \"processing\")\r\n                    return (<Tag color=\"#e39f19\">{status.toUpperCase()}</Tag>)\r\n\r\n                if (status == \"shipped\")\r\n                    return (<Tag color=\"#1973e3\">{status.toUpperCase()}</Tag>)\r\n\r\n                if (status == \"delivered\")\r\n                    return (<Tag color=\"#87d068\">{status.toUpperCase()}</Tag>)\r\n\r\n                if (status == \"cancelled\")\r\n                    return (<Tag color=\"#d93a3a\">{status.toUpperCase()}</Tag>)\r\n            }\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'id',\r\n            key: 'action',\r\n            render: (id) => (\r\n                <>\r\n                    <Link to={`/order/${id}/details`}><Button size=\"small\" icon={<CopyOutlined />} /></Link> &nbsp;\r\n                    <Link to={`/order/${id}/update`}><Button size=\"small\" icon={<EditOutlined />} /></Link>\r\n\r\n                </>\r\n            )\r\n        },\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getOrderList()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getOrderListState.apiState === \"success\") {\r\n            let tableData = []\r\n            getOrderListState.list.map(row => {\r\n                tableData.push({\r\n                    key: row.id,\r\n                    customer_name: row.s_fname + ' ' + row.s_lname,\r\n                    s_email: row.s_email,\r\n                    s_phone: row.s_phone,\r\n                    order_no: row.order_no,\r\n                    order_date: row.order_date,\r\n                    total: { \"total\": row.total, \"payment_type\": row.payment_type, },\r\n                    status: row.status,\r\n                    id: row.id,\r\n                })\r\n            })\r\n            setTableData(tableData)\r\n        }\r\n    }, [getOrderListState])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Order List\"\r\n            />\r\n            <PageContainer list >\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getOrderListState: state.getOrderList,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getOrderList: (params) => dispatch(getOrderList(params)),\r\n    getOrderListReset: () => dispatch(getOrderListReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","import styled, { css } from 'styled-components'\r\n\r\nexport const Indicator = styled.div`\r\n    height: 10px;\r\n    width: 10px;\r\n    border-radius: 5px;\r\n    background-color: grey;\r\n\r\n    ${props => props.green && css`\r\n        background-color: #03c503;\r\n    `}\r\n\r\n    ${props => props.red && css`\r\n        background-color: red;\r\n    `}\r\n`","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Badge } from \"antd\"\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\"\r\nimport { EditOutlined } from \"@ant-design/icons\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\n\r\n/* actions */\r\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\r\nimport { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\r\n\r\n\r\nconst CustomerList = props => {\r\n    /* variables */\r\n    const {\r\n        getOrderList, getOrderListReset, getOrderListState,\r\n        getCustomerList, getCustomerListReset, getCustomerListState,\r\n    } = props\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Customer Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n            render: email => <span>{email}</span>\r\n        },\r\n        {\r\n            title: 'Register Date',\r\n            dataIndex: 'created_at',\r\n            key: 'created_at',\r\n            render: (created_at) => {\r\n                var date = new Date(created_at);\r\n                var month = date.getMonth() + 1;//months (0-11)\r\n                var day = date.getDate();//day (1-31)\r\n                var year = date.getFullYear();\r\n\r\n                var formattedDate = month + \"/\" + day + \"/\" + year;\r\n                return (\r\n                    <span>{formattedDate}</span>\r\n                )\r\n            }\r\n        },\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getCustomerList()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"hello\", getCustomerListState.list);\r\n        if (getCustomerListState.apiState === \"success\") {\r\n            let tableData = []\r\n            getCustomerListState.list.map(row => {\r\n                tableData.push({\r\n                    key: row.id,\r\n                    name: row.name,\r\n                    email: row.email,\r\n                    created_at: row.created_at,\r\n                    id: row.id,\r\n                })\r\n            })\r\n            setTableData(tableData)\r\n        }\r\n    }, [getCustomerListState])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Customer List\"\r\n            />\r\n            <PageContainer list >\r\n                <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    getOrderListState: state.getOrderList,\r\n    getCustomerListState: state.getCustomerList,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getOrderList: (params) => dispatch(getOrderList(params)),\r\n    getOrderListReset: () => dispatch(getOrderListReset()),\r\n    getCustomerList: (params) => dispatch(getCustomerList(params)),\r\n    getCustomerListReset: () => dispatch(getCustomerListReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Badge } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\n\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport cnf from \"../../config\"\r\n/* actions */\r\nimport { getOrderDetails, getOrderDetailsReset } from \"../../action/getOrderDetailsAction\"\r\n\r\n\r\nconst OrderList = props => {\r\n    /* variables */\r\n    const order_id = props.match.params.order_id\r\n    const { getOrderDetails, getOrderDetailsReset, getOrderDetailsState } = props\r\n    const [orderData, setOrderData] = useState([])\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\r\n        },\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            render: (product_name) => (<span>{product_name}</span>)\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            render: (quantity) => (<span>{quantity}</span>)\r\n        },\r\n        {\r\n            title: 'Buy Price',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n            render: (price) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{price}</span>)\r\n        },\r\n        {\r\n            title: 'Total',\r\n            dataIndex: 'total',\r\n            key: 'total',\r\n            render: (total) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{total}</span>)\r\n        }\r\n    ];\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getOrderDetails({ order_id: order_id })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getOrderDetailsState.apiState === \"success\") {\r\n            setOrderData(getOrderDetailsState.order)\r\n            let ar = []\r\n            getOrderDetailsState.order.items.map(obj => {\r\n                ar.push({\r\n                    key: obj.product_id,\r\n                    product_name: obj.product_name,\r\n                    image: obj.thumbnail,\r\n                    quantity: obj.quantity,\r\n                    price: obj.price,\r\n                    total: obj.total,\r\n                    id: obj.product_id,\r\n                })\r\n            })\r\n            setTableData(ar)\r\n        }\r\n    }, [getOrderDetailsState])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Order Details\"\r\n            />\r\n            <PageContainer >\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20 }} >\r\n                    <table width=\"100%\" >\r\n                        <tr>\r\n                            <td width=\"20%\" height=\"30px\"><b>Order ID: </b></td>\r\n                            <td width=\"30%\">#{orderData.order_no}</td>\r\n                            <td width=\"20%\"><b> Order Status:</b></td>\r\n                            <td width=\"30%\">{orderData.status}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Customer Name:</b></td>\r\n                            <td>{orderData.b_fname + ' ' + orderData.b_lname}</td>\r\n                            <td><b>E-Mail:</b></td>\r\n                            <td>{orderData.b_email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Order Date:</b></td>\r\n                            <td>{orderData.order_date}</td>\r\n                            <td><b>Order Total:</b></td>\r\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.grand_total}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Payment Mode:</b></td>\r\n                            <td>{orderData.payment_mode}</td>\r\n                            <td><b>Shipping Charge</b></td>\r\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.shipping_charge}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Coupon Code:</b></td>\r\n                            <td>{orderData.coupon_code}</td>\r\n                            <td><b>Order Discount:</b></td>\r\n                            <td>{orderData.discount}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\r\n                    <h3>Item Details</h3>\r\n                    <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n                </div>\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\r\n                    <h3>Billing Address</h3>\r\n                    <table width=\"100%\" >\r\n                        <tr>\r\n                            <td width=\"20%\" height=\"30px\"><b>Frist Name: </b></td>\r\n                            <td width=\"30%\">#{orderData.b_fname}</td>\r\n                            <td width=\"20%\"><b> Last Name:</b></td>\r\n                            <td width=\"30%\">{orderData.b_lname}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Phone:</b></td>\r\n                            <td>{orderData.b_phone}</td>\r\n                            <td><b>Email:</b></td>\r\n                            <td>{orderData.b_email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Company Name:</b></td>\r\n                            <td>{orderData.b_company_name}</td>\r\n                            <td><b>Country:</b></td>\r\n                            <td>{orderData.b_country}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>State:</b></td>\r\n                            <td>{orderData.b_state}</td>\r\n                            <td><b>City:</b></td>\r\n                            <td>{orderData.b_city}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Street:</b></td>\r\n                            <td>{orderData.b_street}</td>\r\n                            <td><b>Landmark:</b></td>\r\n                            <td>{orderData.b_landmark}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\r\n                    <h3>Shipping Address</h3>\r\n                    <table width=\"100%\" >\r\n                        <tr>\r\n                            <td width=\"20%\" height=\"30px\"><b>Frist Name: </b></td>\r\n                            <td width=\"30%\">#{orderData.s_fname}</td>\r\n                            <td width=\"20%\"><b> Last Name:</b></td>\r\n                            <td width=\"30%\">{orderData.s_lname}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Phone:</b></td>\r\n                            <td>{orderData.s_phone}</td>\r\n                            <td><b>Email:</b></td>\r\n                            <td>{orderData.s_email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Company Name:</b></td>\r\n                            <td>{orderData.s_company_name}</td>\r\n                            <td><b>Country:</b></td>\r\n                            <td>{orderData.s_country}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>State:</b></td>\r\n                            <td>{orderData.s_state}</td>\r\n                            <td><b>City:</b></td>\r\n                            <td>{orderData.s_city}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Street:</b></td>\r\n                            <td>{orderData.s_street}</td>\r\n                            <td><b>Landmark:</b></td>\r\n                            <td>{orderData.s_landmark}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getOrderDetailsState: state.getOrderDetails,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getOrderDetails: (params) => dispatch(getOrderDetails(params)),\r\n    getOrderDetailsReset: () => dispatch(getOrderDetailsReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Space, Select, Form, Row, Col, message } from \"antd\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\n/* custom component */\r\nimport Header from \"../../component/Header/Header\"\r\nimport { PageContainer } from \"../../component/Xcomponent\"\r\nimport cnf from \"../../config\"\r\n/* actions */\r\nimport { getOrderDetails, getOrderDetailsReset } from \"../../action/getOrderDetailsAction\"\r\nimport { updateOrder, updateOrderReset } from \"../../action/updateOrderAction\"\r\n\r\n\r\nconst OrderList = props => {\r\n    /* variables */\r\n    const [form] = Form.useForm()\r\n    const order_id = props.match.params.order_id\r\n    const {\r\n        getOrderDetails, getOrderDetailsReset, getOrderDetailsState,\r\n        updateOrder, updateOrderReset, updateOrderState\r\n    } = props\r\n    const [redirect, setRedirect] = useState([false, ''])\r\n    const [orderData, setOrderData] = useState([])\r\n    const [tableData, setTableData] = useState([])\r\n    const columns = [\r\n        {\r\n            title: 'Image',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            render: (image) => (<img src={`${cnf.s3_base_url}${image}`} alt=\"\" style={{ width: 50 }} />)\r\n        },\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            render: (product_name) => (<span>{product_name}</span>)\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            render: (quantity) => (<span>{quantity}</span>)\r\n        },\r\n        {\r\n            title: 'Buy Price',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n            render: (price) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{price}</span>)\r\n        },\r\n        {\r\n            title: 'Total',\r\n            dataIndex: 'total',\r\n            key: 'total',\r\n            render: (total) => (<span>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{total}</span>)\r\n        }\r\n    ];\r\n    const [formData, setFormData] = useState({\r\n        status: \"\",\r\n        order_id: order_id,\r\n        currencyType: getOrderDetailsState.order.payment_type,\r\n    })\r\n\r\n    /* callbacks */\r\n    useEffect(() => {\r\n        getOrderDetails({ order_id: order_id })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getOrderDetailsState.apiState === \"success\") {\r\n            setOrderData(getOrderDetailsState.order)\r\n            let ar = []\r\n            getOrderDetailsState.order.items.map(obj => {\r\n                ar.push({\r\n                    key: obj.product_id,\r\n                    product_name: obj.product_name,\r\n                    image: obj.thumbnail,\r\n                    quantity: obj.quantity,\r\n                    price: obj.price,\r\n                    total: obj.total,\r\n                    id: obj.product_id,\r\n                })\r\n            })\r\n            setTableData(ar)\r\n            // Form set \r\n            form.setFieldsValue({\r\n                status: getOrderDetailsState.order.status,\r\n            })\r\n            setFormData({\r\n                ...formData,\r\n                ['status']: getOrderDetailsState.order.status,\r\n            })\r\n        }\r\n    }, [getOrderDetailsState])\r\n\r\n    useEffect(() => {\r\n        if (updateOrderState.apiState === \"success\") {\r\n            setRedirect([true, '/order_management/list'])\r\n            message.success(updateOrderState.message);\r\n        }\r\n\r\n        if (updateOrderState.apiState === \"error\") {\r\n            updateOrderReset()\r\n            message.error(updateOrderState.message);\r\n        }\r\n    }, [updateOrderState])\r\n\r\n    const handleNumberChange = (name, value) => {\r\n        console.log(name, value)\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n    const handleSubmit = () => {\r\n        updateOrder(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {redirect[0] &&\r\n                <Redirect to={redirect[1]} />}\r\n            <Header\r\n                title=\"Order Details\"\r\n            />\r\n            <PageContainer >\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20 }} >\r\n                    <table width=\"100%\" >\r\n                        <tr>\r\n                            <td width=\"20%\" height=\"30px\"><b>Order ID: </b></td>\r\n                            <td width=\"30%\">#{orderData.order_no}</td>\r\n                            <td width=\"20%\"><b> Order Status:</b></td>\r\n                            <td width=\"30%\">{orderData.status}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Customer Name:</b></td>\r\n                            <td>{orderData.b_fname + ' ' + orderData.b_lname}</td>\r\n                            <td><b>E-Mail:</b></td>\r\n                            <td>{orderData.b_email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Order Date:</b></td>\r\n                            <td>{orderData.order_date}</td>\r\n                            <td><b>Order Total:</b></td>\r\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.grand_total}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Payment Mode:</b></td>\r\n                            <td>{orderData.payment_mode}</td>\r\n                            <td><b>Shipping Charge</b></td>\r\n                            <td>{orderData.payment_type == \"USD\" ? <>$</> : <>₹</>}{orderData.shipping_charge}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td height=\"30px\"><b>Coupon Code:</b></td>\r\n                            <td>{orderData.coupon_code}</td>\r\n                            <td><b>Order Discount:</b></td>\r\n                            <td>{orderData.discount}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                {/* <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\r\n                    <h3>Item Details</h3>\r\n                    <Table dataSource={tableData} columns={columns} size=\"small\" pagination={false} />\r\n                </div> */}\r\n                <div style={{ border: \"solid 1px #ccc\", padding: 20, marginTop: \"10px\" }} >\r\n                    <h3>Update Status</h3>\r\n                    <Form layout=\"vertical\" form={form} onFinish={handleSubmit} >\r\n                        <Row gutter=\"24\" >\r\n                            <Col span=\"12\">\r\n                                <Form.Item\r\n                                    label=\"Status\"\r\n                                    name=\"status\"\r\n                                    rules={[{ required: true, message: 'Required' }]}\r\n                                >\r\n                                    <Select name=\"status\" placeholder=\"Select Status\"\r\n                                        onSelect={v => handleNumberChange(\"status\", v)}\r\n                                    >\r\n                                        <Select.Option key=\"processing\" value=\"processing\" >Processing</Select.Option>\r\n                                        <Select.Option key=\"shipped\" value=\"shipped\">Shipped</Select.Option>\r\n                                        <Select.Option key=\"delivered\" value=\"delivered\">Delivered</Select.Option>\r\n                                        <Select.Option key=\"cancelled\" value=\"cancelled\">Cancelled</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Button type=\"primary\" htmlType=\"submit\">SUBMIT</Button>\r\n                    </Form>\r\n                </div>\r\n\r\n            </PageContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    getOrderDetailsState: state.getOrderDetails,\r\n    updateOrderState: state.updateOrder,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getOrderDetails: (params) => dispatch(getOrderDetails(params)),\r\n    getOrderDetailsReset: () => dispatch(getOrderDetailsReset()),\r\n    updateOrder: (params) => dispatch(updateOrder(params)),\r\n    updateOrderReset: () => dispatch(updateOrderReset()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","const size = {\r\n    mobileS: '320px',\r\n    mobileM: '375px',\r\n    mobileL: '425px',\r\n    mobileXL: '500px',\r\n    tablet: '768px',\r\n    laptopS: '930px',\r\n    laptop: '1024px',\r\n    laptopL: '1440px',\r\n    desktop: '2560px'\r\n}\r\n\r\nconst theme = {\r\n    device: {\r\n        mobileS: `(max-width: ${size.mobileS})`,\r\n        mobileM: `(max-width: ${size.mobileM})`,\r\n        mobileL: `(max-width: ${size.mobileL})`,\r\n        mobileXL: `(max-width: ${size.mobileXL})`,\r\n        tablet: `(max-width: ${size.tablet})`,\r\n        laptopS: `(max-width: ${size.laptopS})`,\r\n        laptop: `(max-width: ${size.laptop})`,\r\n        laptopL: `(max-width: ${size.laptopL})`,\r\n        desktop: `(max-width: ${size.desktop})`,\r\n        desktopL: `(max-width: ${size.desktop})`\r\n    },\r\n    colors: {\r\n        primary: \"#08979C\",\r\n        black: \"#000\"\r\n    },\r\n\r\n}\r\n\r\nexport default theme","import React from \"react\"\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport \"antd/dist/antd.less\"\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { Provider } from \"react-redux\"\r\n\r\nimport store from \"./store\"\r\n\r\nimport { Layout } from 'antd';\r\n\r\nimport Sidebar from \"./component/Sidebar/Sidebar\"\r\nimport PrivateRoute from \"./component/PrivateRoute\";\r\n\r\nimport Home from \"./page/Home/Home\"\r\nimport CategoryAdd from \"./page/CategoryAdd/CategoryAdd\"\r\nimport CategoryList from \"./page/CategoryList/CategoryList\"\r\nimport CategoryEdit from \"./page/CategoryEdit/CategoryEdit\"\r\nimport ProductList from \"./page/ProductList/ProductList\"\r\nimport ProductAdd from \"./page/ProductAdd/ProductAdd\"\r\nimport ProductEdit from \"./page/ProductEdit/ProductEdit\"\r\nimport ProductVariants from \"./page/ProductVariants/ProductVariants\"\r\nimport ProductImages from \"./page/ProductImages/ProductImages\"\r\nimport ProductDescription from \"./page/ProductDescription/ProductDescription\"\r\nimport ProductDescriptionEdit from \"./page/ProductDescriptionEdit/ProductDescriptionEdit\"\r\nimport RelatedProducts from \"./page/RelatedProducts/RelatedProducts\"\r\nimport HomeSlider from \"./page/HomeSlider/HomeSlider\"\r\nimport Testimonial from \"./page/Testimonial/Testimonial\"\r\nimport NotFound from \"./page/NotFound/NotFound\"\r\nimport Login from \"./page/Login/Login\"\r\nimport Logout from \"./page/Logout\"\r\nimport setting from \"./page/Setting/setting\"\r\nimport ShippingCharge from \"./page/ShippingCharge/ShippingCharge\"\r\nimport VoucherList from \"./page/VoucherList/VoucherList\"\r\nimport VoucherAdd from \"./page/VoucherAdd/VoucherAdd\"\r\nimport VoucherEdit from \"./page/VoucherEdit/VoucherEdit\"\r\nimport OrderList from \"./page/OrderList/OrderList\"\r\nimport CustomerList from \"./page/CustomerList/CustomerList\"\r\nimport OrderDetails from \"./page/OrderDetails/OrderDetails\"\r\nimport OrderUpdate from \"./page/OrderUpdate/OrderUpdate\"\r\n// others\r\nimport theme from './theme'\r\n\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route path={[\r\n                            '/',\r\n                            '/category/list',\r\n                            '/category/add',\r\n                            '/category/:category_id/edit',\r\n                            '/product/list',\r\n                            '/product/add',\r\n                            '/product/:product_id/edit',\r\n                            '/product/:product_id/edit/variants',\r\n                            '/product/:product_id/edit/images',\r\n                            '/product/:product_id/edit/description',\r\n                            '/product/:product_id/edit/description/:description_id',\r\n                            '/product/:product_id/edit/related-products',\r\n                            '/home/slider',\r\n                            '/home/testimonial',\r\n                            '/setting',\r\n                            '/shipping_configuration',\r\n                            '/voucher_management/list',\r\n                            '/voucher_management/add',\r\n                            '/voucher_management/:voucher_id/edit',\r\n                            '/order_management/list',\r\n                            '/customer/list',\r\n                            '/order/:order_id/details',\r\n                            '/order/:order_id/update',\r\n\r\n\r\n                        ]} exact >\r\n\r\n                            <Layout>\r\n                                <Sider style={{ overflow: 'auto', height: '100vh', position: 'fixed', left: 0, }} >\r\n                                    <Sidebar />\r\n                                </Sider>\r\n                                <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\r\n                                    <Content style={{ overflow: 'initial', background: \"#fff\" }}>\r\n                                        <Switch>\r\n                                            <PrivateRoute exact path=\"/\" component={Home} />\r\n                                            <PrivateRoute exact path=\"/category/list\" component={CategoryList} />\r\n                                            <PrivateRoute exact path=\"/category/add\" component={CategoryAdd} />\r\n                                            <PrivateRoute exact path=\"/category/:category_id/edit\" component={CategoryEdit} />\r\n                                            <PrivateRoute exact path=\"/product/list\" component={ProductList} />\r\n                                            <PrivateRoute exact path=\"/product/add\" component={ProductAdd} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit\" component={ProductEdit} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/variants\" component={ProductVariants} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/images\" component={ProductImages} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/description\" component={ProductDescription} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/description/:description_id\" component={ProductDescriptionEdit} />\r\n                                            <PrivateRoute exact path=\"/product/:product_id/edit/related-products\" component={RelatedProducts} />\r\n                                            <PrivateRoute exact path=\"/home/slider\" component={HomeSlider} />\r\n                                            <PrivateRoute exact path=\"/home/testimonial\" component={Testimonial} />\r\n                                            <PrivateRoute exact path=\"/setting\" component={setting} />\r\n                                            <PrivateRoute exact path=\"/shipping_configuration\" component={ShippingCharge} />\r\n                                            <PrivateRoute exact path=\"/voucher_management/list\" component={VoucherList} />\r\n                                            <PrivateRoute exact path=\"/voucher_management/add\" component={VoucherAdd} />\r\n                                            <PrivateRoute exact path=\"/voucher_management/:voucher_id/edit\" component={VoucherEdit} />\r\n                                            <PrivateRoute exact path=\"/order_management/list\" component={OrderList} />\r\n                                            <PrivateRoute exact path=\"/customer/list\" component={CustomerList} />\r\n                                            <PrivateRoute exact path=\"/order/:order_id/details\" component={OrderDetails} />\r\n                                            <PrivateRoute exact path=\"/order/:order_id/update\" component={OrderUpdate} />\r\n\r\n                                        </Switch>\r\n                                    </Content>\r\n                                </Layout>\r\n                            </Layout>\r\n                        </Route>\r\n\r\n                        <Route path={['/login', '/logout']} exact >\r\n                            <Switch>\r\n                                <Route exact path=\"/login\" component={Login} />\r\n                                <Route exact path=\"/logout\" component={Logout} />\r\n                            </Switch>\r\n                        </Route>\r\n\r\n                        <Route path=\"*\" component={NotFound} status={404} />\r\n                    </Switch>\r\n                </Router>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
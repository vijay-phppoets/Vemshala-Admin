{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\"; // @custom-component-imports ------------------------------------------------------------------------ \n\nimport DataTable from 'react-data-table-component';\nimport DataTableExtensions from 'react-data-table-component-extensions';\nimport 'react-data-table-component-extensions/dist/index.css';\nimport { Button, Modal, Space } from 'antd';\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\"; // @actions-imports ----------------------------------------------------------------------------------\n\nimport { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\";\nimport { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"; //-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n  const {\n    getCustomerList,\n    getCustomerListState\n  } = props;\n  const [modal, contextHolder] = Modal.useModal();\n  const [tableData, setTableData] = useState([]);\n  const ReachableContext = createContext(null);\n  const UnreachableContext = createContext(null);\n  const config = {\n    title: 'Use Hook!',\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReachableContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, name => `Reachable: ${name}!`), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(UnreachableContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, name => `Unreachable: ${name}!`))\n  };\n  const [columns, setColumns] = useState([{\n    name: 'Customer Name',\n    selector: data => data.name,\n    sortable: true\n  }, {\n    name: 'Customer Email',\n    selector: data => data.email,\n    sortable: true\n  }, {\n    name: 'Customer Contact No.',\n    selector: data => data.contact_no,\n    sortable: true\n  }, {\n    name: 'Customer Status',\n    selector: data => data.status,\n    sortable: true\n  }, {\n    name: 'Register Date',\n    selector: data => data.date,\n    sortable: true\n  }, {\n    name: 'Action',\n    selector: data => /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        modal.confirm(config);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 31\n      }\n    }, \"Deactivate\"),\n    sortable: true\n  }]);\n  /* callbacks -------------------------------------------------------------------------------------------------*/\n\n  useEffect(() => {\n    getCustomerList();\n  }, []);\n  useEffect(() => {\n    if (getCustomerListState.apiState === \"success\") {\n      const customerList = getCustomerListState.list.map(data => {\n        const serverDate = date => date.toISOString().slice(0, 10);\n\n        data.created_at = serverDate(new Date(data.created_at));\n        return {\n          name: data.name,\n          email: data.email,\n          date: data.created_at,\n          status: data.status,\n          contact_no: data.contact_no\n        };\n      });\n      setTableData(customerList);\n    }\n  }, [getCustomerListState]);\n  /* ----------------------------------------------------------------------------------------------------------*/\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    title: \"Customer List\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DataTableExtensions, {\n    print: false,\n    columns: columns,\n    data: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    noHeader: true,\n    defaultSortField: \"id\",\n    defaultSortAsc: false,\n    pagination: true,\n    highlightOnHover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  getOrderListState: state.getOrderList,\n  getCustomerListState: state.getCustomerList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getOrderList: params => dispatch(getOrderList(params)),\n  getOrderListReset: () => dispatch(getOrderListReset()),\n  getCustomerList: params => dispatch(getCustomerList(params)),\n  getCustomerListReset: () => dispatch(getCustomerListReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CustomerList/CustomerList.js"],"names":["React","useEffect","useState","connect","DataTable","DataTableExtensions","Button","Modal","Space","Header","PageContainer","getOrderList","getOrderListReset","getCustomerList","getCustomerListReset","CustomerList","props","getCustomerListState","modal","contextHolder","useModal","tableData","setTableData","ReachableContext","createContext","UnreachableContext","config","title","content","name","columns","setColumns","selector","data","sortable","email","contact_no","status","date","confirm","apiState","customerList","list","map","serverDate","toISOString","slice","created_at","Date","mapStateToProps","state","getOrderListState","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\n\n// @custom-component-imports ------------------------------------------------------------------------ \n\n    import DataTable from 'react-data-table-component';\n    import DataTableExtensions from 'react-data-table-component-extensions';\n    import 'react-data-table-component-extensions/dist/index.css';\n    import {  Button, Modal, Space  } from 'antd'\n\n    import Header from \"../../component/Header/Header\"\n    import { PageContainer } from \"../../component/Xcomponent\"\n    \n\n// @actions-imports ----------------------------------------------------------------------------------\n\n    import { getOrderList, getOrderListReset } from \"../../action/getOrderListAction\"\n    import { getCustomerList, getCustomerListReset } from \"../../action/getCustomerListAction\"\n \n//-----------------------------------------------------------------------------------------------------\n\nconst CustomerList = props => {\n   \n    const { getCustomerList, getCustomerListState } = props\n    const [modal, contextHolder]    = Modal.useModal();\n    const [tableData, setTableData] = useState([])\n\n    const ReachableContext = createContext(null);\n    const UnreachableContext = createContext(null);\n    const config = {\n        title: 'Use Hook!',\n        content: (\n          <>\n            <ReachableContext.Consumer>{(name) => `Reachable: ${name}!`}</ReachableContext.Consumer>\n            <br />\n            <UnreachableContext.Consumer>{(name) => `Unreachable: ${name}!`}</UnreachableContext.Consumer>\n          </>\n        ),\n      };\n\n    const [columns,setColumns] = useState([{\n            name: 'Customer Name',\n            selector: data => data.name,\n            sortable: true,\n        },{\n            name: 'Customer Email',\n            selector: data => data.email,\n            sortable: true,\n        },{\n            name: 'Customer Contact No.',\n            selector: data => data.contact_no,\n            sortable: true,\n        },{\n            name: 'Customer Status',\n            selector: data => data.status,\n            sortable: true,\n        },{\n            name: 'Register Date',\n            selector: data => data.date,\n            sortable: true,\n        },{\n            name: 'Action',\n            selector: data => <Button onClick={() => { modal.confirm(config) }}>Deactivate</Button>,\n            sortable: true,\n        }\n    ])\n\n    \n\n/* callbacks -------------------------------------------------------------------------------------------------*/\n\n    useEffect(() => { getCustomerList()}, [])\n    useEffect(() => {\n        \n        if (getCustomerListState.apiState === \"success\") {\n\n            const customerList = getCustomerListState.list.map(data => {\n\n                const serverDate = date => date.toISOString().slice(0, 10);\n\n                data.created_at = serverDate(new Date(data.created_at))\n       \n                return  {\n                    name   : data.name,\n                    email  : data.email,\n                    date   : data.created_at,\n                    status : data.status,\n                    contact_no: data.contact_no,\n                }\n            })\n\n            setTableData(customerList);\n        }\n    }, [getCustomerListState])\n\n/* ----------------------------------------------------------------------------------------------------------*/\n\n    return (\n        <React.Fragment>\n            <Header title=\"Customer List\"/>\n            <PageContainer>\n                <DataTableExtensions print={false} columns={columns} data={tableData} >\n                    <DataTable\n                        noHeader\n                        defaultSortField=\"id\"\n                        defaultSortAsc={false}\n                        pagination\n                        highlightOnHover\n                    />\n                </DataTableExtensions>\n            </PageContainer>\n        </React.Fragment>\n    )\n}\nconst mapStateToProps = (state) => ({\n    getOrderListState    : state.getOrderList,\n    getCustomerListState : state.getCustomerList,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrderList:         (params) => dispatch(getOrderList(params)),\n    getOrderListReset:    ()       => dispatch(getOrderListReset()),\n    getCustomerList:      (params) => dispatch(getCustomerList(params)),\n    getCustomerListReset: ()       => dispatch(getCustomerListReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryEdit/CategoryEdit.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Input, Row, Col, TreeSelect, Button, message, Skeleton } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport _ from \"lodash\";\n/* custom component */\n\nimport Header from \"../../component/Header/Header\";\nimport { PageContainer } from \"../../component/Xcomponent\";\n/* action */\n\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\";\nimport { getCategoryView, getCategoryViewReset } from \"../../action/getCategoryViewAction\";\nimport { updateCategory, updateCategoryReset } from \"../../action/updateCategoryAction\";\n/* others */\n\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\";\nimport cnf from \"../../config\";\nconst {\n  TreeNode\n} = TreeSelect;\n\nconst CategoryEdit = props => {\n  /* variables */\n  const category_id = props.match.params.category_id;\n  const {\n    getCategoryTree,\n    getCategoryTreeReset,\n    getCategoryTreeState,\n    getCategoryView,\n    getCategoryViewReset,\n    getCategoryViewState,\n    updateCategory,\n    updateCategoryReset,\n    updateCategoryState\n  } = props;\n  const [formData, setFormData] = useState({\n    category_id: category_id,\n    parent_category_id: null,\n    name: \"\",\n    url_key: \"\",\n    image: \"\",\n    banner_img: \"\",\n    m_banner_img: \"\"\n  });\n  const [image, set_image] = useState(null);\n  const [banner_img, set_banner_img] = useState(null);\n  const [m_banner_img, set_m_banner_img] = useState(null);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [redirect, setRedirect] = useState([false, '']);\n  const [form] = Form.useForm();\n  const [imgChanged, setImgChanged] = useState({\n    image: false,\n    banner_img: false,\n    m_banner_img: false\n  });\n  /* callbacks */\n\n  useEffect(() => {\n    return () => {\n      getCategoryTreeReset();\n      getCategoryViewReset();\n      updateCategoryReset();\n    };\n  }, []);\n  useEffect(() => {\n    getCategoryTree();\n    getCategoryView({\n      category_id: category_id\n    });\n  }, []);\n  useEffect(() => {\n    if (getCategoryViewState.apiState === \"success\") {\n      form.setFieldsValue({\n        parent_category_id: getCategoryViewState.category.parent_category_id,\n        name: getCategoryViewState.category.name,\n        url_key: getCategoryViewState.category.url_key\n      });\n      setFormData({ ...formData,\n        ['parent_category_id']: getCategoryViewState.category.parent_category_id,\n        ['name']: getCategoryViewState.category.name,\n        ['url_key']: getCategoryViewState.category.url_key,\n        ['image']: getCategoryViewState.category.image,\n        ['banner_img']: getCategoryViewState.category.banner_img,\n        ['m_banner_img']: getCategoryViewState.category.m_banner_img\n      });\n    }\n  }, [getCategoryViewState]);\n  useEffect(() => {\n    if (updateCategoryState.apiState === \"success\") {\n      setRedirect([true, '/category/list']);\n      message.success(updateCategoryState.message);\n    }\n\n    if (updateCategoryState.apiState === \"error\") {\n      updateCategoryReset();\n      message.error(updateCategoryState.message);\n      setSubmitLoading(false);\n    }\n  }, [updateCategoryState]);\n  /* function */\n\n  const categoryOptions = tree => {\n    let finalJsx = [];\n    tree.map(node => {\n      if (node.children.length > 0) {\n        finalJsx.push( /*#__PURE__*/React.createElement(TreeNode, {\n          value: node.id,\n          title: node.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }\n        }, categoryOptions(node.children)));\n      } else {\n        finalJsx.push( /*#__PURE__*/React.createElement(TreeNode, {\n          value: node.id,\n          title: node.name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        }));\n      }\n    });\n    return finalJsx;\n  };\n\n  const handleSubmit = async () => {\n    if (category_id == formData.parent_category_id) {\n      alert(\"You can't select same category as parent category!\");\n      return;\n    }\n\n    let image_filename = uuidv4();\n    let banner_img_filename = uuidv4();\n    let m_banner_img_filename = uuidv4();\n    let imageValRes;\n    let bannerImageValRes;\n    let mBannerImageValRes;\n\n    if (imgChanged.image) {\n      imageValRes = validateImageFile(image);\n\n      if (!imageValRes.status) {\n        alert(\"Image's extension is not allowed.\");\n        return;\n      }\n    }\n\n    if (imgChanged.banner_img) {\n      bannerImageValRes = validateImageFile(banner_img);\n\n      if (!bannerImageValRes.status) {\n        alert(\"Banner Image's extension is not allowed.\");\n        return;\n      }\n    }\n\n    if (imgChanged.m_banner_img) {\n      mBannerImageValRes = validateImageFile(m_banner_img);\n\n      if (!mBannerImageValRes.status) {\n        alert(\"Mobile Banner Image's extension is not allowed.\");\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n\n    if (imgChanged.image) {\n      console.log(\"hello\", \"uploading image\");\n      let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image);\n      await axios.put(s3UrlRes1.url, image);\n      formData.image = `${image_filename}.${imageValRes.ext}`;\n    }\n\n    if (imgChanged.banner_img) {\n      console.log(\"hello\", \"uploading banner_img\");\n      let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img);\n      await axios.put(s3UrlRes2.url, banner_img);\n      formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`;\n    }\n\n    if (imgChanged.m_banner_img) {\n      console.log(\"hello\", \"uploading m_banner_img\");\n      let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img);\n      await axios.put(s3UrlRes3.url, m_banner_img);\n      formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`;\n    }\n\n    updateCategory(_.merge(formData, {\n      imgChanged: imgChanged\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    title: \"Category Edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, getCategoryViewState.apiState === \"loading\" && /*#__PURE__*/React.createElement(Skeleton, {\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }), getCategoryViewState.apiState === \"error\" && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, getCategoryViewState.message), getCategoryViewState.apiState === \"success\" && /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Parent Category (Empty for Root level category)\",\n    name: \"parent_category_id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TreeSelect, {\n    showSearch: true,\n    filterTreeNode: (input, treeNode) => treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    style: {\n      width: '100%'\n    },\n    dropdownStyle: {\n      maxHeight: 400,\n      overflow: 'auto'\n    },\n    placeholder: \"Blank for root category\",\n    allowClear: true,\n    treeDefaultExpandAll: true,\n    onChange: (value, node) => setFormData({ ...formData,\n      ['parent_category_id']: value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 37\n    }\n  }, categoryOptions(getCategoryTreeState.tree)))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Name\",\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"name\",\n    placeholder: \"Enter Category Name\",\n    onChange: e => setFormData({ ...formData,\n      ['name']: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"URL Key\",\n    name: \"url_key\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n      message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"url_key\",\n    placeholder: \"Enter Category URL Key\",\n    onChange: e => setFormData({ ...formData,\n      ['url_key']: e.target.value\n    }),\n    addonBefore: cnf.domain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Image\",\n    name: \"image\",\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 44\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 1:1 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 33\n    }\n  }, !imgChanged.image && /*#__PURE__*/React.createElement(\"img\", {\n    src: `${cnf.s3_base_url}${getCategoryViewState.category.image}`,\n    alt: \"\",\n    style: {\n      maxWidth: \"100%\",\n      maxHeight: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"image\",\n    onChange: e => {\n      setImgChanged({ ...imgChanged,\n        ['image']: true\n      });\n      set_image(e.target.files[0]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Banner Image\",\n    name: \"banner_img\",\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 44\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 4:1 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 33\n    }\n  }, !imgChanged.banner_img && /*#__PURE__*/React.createElement(\"img\", {\n    src: `${cnf.s3_base_url}${getCategoryViewState.category.banner_img}`,\n    alt: \"\",\n    style: {\n      maxWidth: \"100%\",\n      maxHeight: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"banner_img\",\n    onChange: e => {\n      setImgChanged({ ...imgChanged,\n        ['banner_img']: true\n      });\n      set_banner_img(e.target.files[0]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Banner Image For Mobile\",\n    name: \"m_banner_img\",\n    extra: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 44\n      }\n    }, \"JPEG, JPG, PNG, WEBP | 3:2 Ratio  \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 33\n    }\n  }, !imgChanged.m_banner_img && /*#__PURE__*/React.createElement(\"img\", {\n    src: `${cnf.s3_base_url}${getCategoryViewState.category.m_banner_img}`,\n    alt: \"\",\n    style: {\n      maxWidth: \"100%\",\n      maxHeight: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: \"file\",\n    name: \"m_banner_img\",\n    onChange: e => {\n      setImgChanged({ ...imgChanged,\n        ['m_banner_img']: true\n      });\n      set_m_banner_img(e.target.files[0]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submitLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 25\n    }\n  }, \"SUBMIT\"))));\n};\n\nconst mapStateToProps = state => ({\n  getCategoryTreeState: state.getCategoryTree,\n  getCategoryViewState: state.getCategoryView,\n  updateCategoryState: state.updateCategory\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCategoryTree: params => dispatch(getCategoryTree(params)),\n  getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n  getCategoryView: params => dispatch(getCategoryView(params)),\n  getCategoryViewReset: () => dispatch(getCategoryViewReset()),\n  updateCategory: params => dispatch(updateCategory(params)),\n  updateCategoryReset: () => dispatch(updateCategoryReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryEdit);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala-Admin/src/page/CategoryEdit/CategoryEdit.js"],"names":["React","useState","useEffect","Form","Input","Row","Col","TreeSelect","Button","message","Skeleton","connect","v4","uuidv4","axios","Redirect","_","Header","PageContainer","getCategoryTree","getCategoryTreeReset","getCategoryView","getCategoryViewReset","updateCategory","updateCategoryReset","validateImageFile","getS3SingedUrl","cnf","TreeNode","CategoryEdit","props","category_id","match","params","getCategoryTreeState","getCategoryViewState","updateCategoryState","formData","setFormData","parent_category_id","name","url_key","image","banner_img","m_banner_img","set_image","set_banner_img","set_m_banner_img","submitLoading","setSubmitLoading","redirect","setRedirect","form","useForm","imgChanged","setImgChanged","apiState","setFieldsValue","category","success","error","categoryOptions","tree","finalJsx","map","node","children","length","push","id","handleSubmit","alert","image_filename","banner_img_filename","m_banner_img_filename","imageValRes","bannerImageValRes","mBannerImageValRes","status","console","log","s3UrlRes1","ext","put","url","s3UrlRes2","s3UrlRes3","merge","input","treeNode","title","toLowerCase","indexOf","width","maxHeight","overflow","value","required","e","target","pattern","RegExp","domain","s3_base_url","maxWidth","files","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Form, Input, Row, Col, TreeSelect, Button, message, Skeleton } from \"antd\"\nimport { connect } from \"react-redux\"\nimport { v4 as uuidv4 } from 'uuid'\nimport axios from 'axios'\nimport { Redirect } from \"react-router-dom\"\nimport _ from \"lodash\"\n\n/* custom component */\nimport Header from \"../../component/Header/Header\"\nimport { PageContainer } from \"../../component/Xcomponent\"\n\n/* action */\nimport { getCategoryTree, getCategoryTreeReset } from \"../../action/getCategoryTreeAction\"\nimport { getCategoryView, getCategoryViewReset } from \"../../action/getCategoryViewAction\"\nimport { updateCategory, updateCategoryReset } from \"../../action/updateCategoryAction\"\n\n/* others */\nimport { validateImageFile, getS3SingedUrl } from \"../../utils\"\nimport cnf from \"../../config\"\n\nconst { TreeNode } = TreeSelect\n\nconst CategoryEdit = props => {\n    /* variables */\n    const category_id = props.match.params.category_id\n    const {\n        getCategoryTree, getCategoryTreeReset, getCategoryTreeState,\n        getCategoryView, getCategoryViewReset, getCategoryViewState,\n        updateCategory, updateCategoryReset, updateCategoryState,\n    } = props\n    const [formData, setFormData] = useState({\n        category_id: category_id,\n        parent_category_id: null,\n        name: \"\",\n        url_key: \"\",\n        image: \"\",\n        banner_img: \"\",\n        m_banner_img: \"\"\n    })\n    const [image, set_image] = useState(null)\n    const [banner_img, set_banner_img] = useState(null)\n    const [m_banner_img, set_m_banner_img] = useState(null)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [redirect, setRedirect] = useState([false, ''])\n    const [form] = Form.useForm()\n    const [imgChanged, setImgChanged] = useState({\n        image: false,\n        banner_img: false,\n        m_banner_img: false,\n    })\n\n    /* callbacks */\n    useEffect(() => {\n        return (() => {\n            getCategoryTreeReset()\n            getCategoryViewReset()\n            updateCategoryReset()\n        })\n    }, [])\n\n    useEffect(() => {\n        getCategoryTree()\n        getCategoryView({ category_id: category_id })\n    }, [])\n\n    useEffect(() => {\n        if (getCategoryViewState.apiState === \"success\") {\n            form.setFieldsValue({\n                parent_category_id: getCategoryViewState.category.parent_category_id,\n                name: getCategoryViewState.category.name,\n                url_key: getCategoryViewState.category.url_key,\n            })\n            setFormData({\n                ...formData,\n                ['parent_category_id']: getCategoryViewState.category.parent_category_id,\n                ['name']: getCategoryViewState.category.name,\n                ['url_key']: getCategoryViewState.category.url_key,\n                ['image']: getCategoryViewState.category.image,\n                ['banner_img']: getCategoryViewState.category.banner_img,\n                ['m_banner_img']: getCategoryViewState.category.m_banner_img,\n            })\n        }\n    }, [getCategoryViewState])\n\n    useEffect(() => {\n        if (updateCategoryState.apiState === \"success\") {\n            setRedirect([true, '/category/list'])\n            message.success(updateCategoryState.message);\n        }\n\n        if (updateCategoryState.apiState === \"error\") {\n            updateCategoryReset()\n            message.error(updateCategoryState.message);\n            setSubmitLoading(false)\n        }\n    }, [updateCategoryState])\n\n\n\n    /* function */\n    const categoryOptions = (tree) => {\n        let finalJsx = []\n        tree.map(node => {\n            if (node.children.length > 0) {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name}>{categoryOptions(node.children)}</TreeNode>\n                )\n            } else {\n                finalJsx.push(\n                    <TreeNode value={node.id} title={node.name} />\n                )\n            }\n        })\n        return finalJsx\n    }\n\n    const handleSubmit = async () => {\n        if (category_id == formData.parent_category_id) {\n            alert(\"You can't select same category as parent category!\")\n            return\n        }\n\n\n        let image_filename = uuidv4()\n        let banner_img_filename = uuidv4()\n        let m_banner_img_filename = uuidv4()\n\n        let imageValRes\n        let bannerImageValRes\n        let mBannerImageValRes\n\n        if (imgChanged.image) {\n            imageValRes = validateImageFile(image)\n            if (!imageValRes.status) {\n                alert(\"Image's extension is not allowed.\")\n                return\n            }\n        }\n\n        if (imgChanged.banner_img) {\n            bannerImageValRes = validateImageFile(banner_img)\n            if (!bannerImageValRes.status) {\n                alert(\"Banner Image's extension is not allowed.\")\n                return\n            }\n        }\n\n        if (imgChanged.m_banner_img) {\n            mBannerImageValRes = validateImageFile(m_banner_img)\n            if (!mBannerImageValRes.status) {\n                alert(\"Mobile Banner Image's extension is not allowed.\")\n                return\n            }\n        }\n\n\n        setSubmitLoading(true)\n\n        if (imgChanged.image) {\n            console.log(\"hello\", \"uploading image\");\n            let s3UrlRes1 = await getS3SingedUrl(image_filename, imageValRes.ext, image)\n            await axios.put(s3UrlRes1.url, image)\n            formData.image = `${image_filename}.${imageValRes.ext}`\n        }\n\n        if (imgChanged.banner_img) {\n            console.log(\"hello\", \"uploading banner_img\");\n            let s3UrlRes2 = await getS3SingedUrl(banner_img_filename, bannerImageValRes.ext, banner_img)\n            await axios.put(s3UrlRes2.url, banner_img)\n            formData.banner_img = `${banner_img_filename}.${bannerImageValRes.ext}`\n        }\n\n        if (imgChanged.m_banner_img) {\n            console.log(\"hello\", \"uploading m_banner_img\");\n            let s3UrlRes3 = await getS3SingedUrl(m_banner_img_filename, mBannerImageValRes.ext, m_banner_img)\n            await axios.put(s3UrlRes3.url, m_banner_img)\n            formData.m_banner_img = `${m_banner_img_filename}.${mBannerImageValRes.ext}`\n        }\n\n        updateCategory(_.merge(formData, { imgChanged: imgChanged }))\n\n    }\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n\n            <Header\n                title=\"Category Edit\"\n            />\n            <PageContainer>\n                {getCategoryViewState.apiState === \"loading\" &&\n                    <Skeleton active />\n                }\n\n                {getCategoryViewState.apiState === \"error\" &&\n                    <p>{getCategoryViewState.message}</p>\n                }\n\n                {getCategoryViewState.apiState === \"success\" &&\n                    <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\">\n                                <Form.Item\n                                    label=\"Parent Category (Empty for Root level category)\"\n                                    name=\"parent_category_id\"\n                                >\n                                    <TreeSelect\n                                        showSearch\n                                        filterTreeNode={(input, treeNode) =>\n                                            treeNode.title.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                        }\n                                        style={{ width: '100%' }}\n                                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                                        placeholder=\"Blank for root category\"\n                                        allowClear\n                                        treeDefaultExpandAll\n                                        onChange={(value, node) => setFormData({ ...formData, ['parent_category_id']: value })}\n                                    >\n                                        {categoryOptions(getCategoryTreeState.tree)}\n                                    </TreeSelect>\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Name\"\n                                    name=\"name\"\n                                    rules={[{ required: true, message: 'Required' }]}\n                                >\n                                    <Input name=\"name\" placeholder=\"Enter Category Name\"\n                                        onChange={(e) => setFormData({ ...formData, ['name']: e.target.value })}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"URL Key\"\n                                    name=\"url_key\"\n                                    rules={[\n                                        { required: true, message: 'Required' },\n                                        {\n                                            pattern: new RegExp('^[a-zA-Z0-9-.]+$'),\n                                            message: \"This field must be a valid url. It should only contain alphanumeric character, dash(-) and dot(.)\"\n                                        }\n                                    ]}\n                                >\n                                    <Input name=\"url_key\" placeholder=\"Enter Category URL Key\"\n                                        onChange={(e) => setFormData({ ...formData, ['url_key']: e.target.value })}\n                                        addonBefore={cnf.domain}\n                                    />\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Image\"\n                                    name=\"image\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 1:1 Ratio  </span>}\n                                >\n                                    {!imgChanged.image &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.image}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"image\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['image']: true })\n                                            set_image(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Row gutter=\"24\" >\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Banner Image\"\n                                    name=\"banner_img\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 4:1 Ratio  </span>}\n                                >\n                                    {!imgChanged.banner_img &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"banner_img\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['banner_img']: true })\n                                            set_banner_img(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n\n                            <Col span=\"12\" >\n                                <Form.Item\n                                    label=\"Banner Image For Mobile\"\n                                    name=\"m_banner_img\"\n                                    extra={<span>JPEG, JPG, PNG, WEBP | 3:2 Ratio  </span>}\n                                >\n                                    {!imgChanged.m_banner_img &&\n                                        <img src={`${cnf.s3_base_url}${getCategoryViewState.category.m_banner_img}`} alt=\"\" style={{ maxWidth: \"100%\", maxHeight: 150 }} />}\n                                    <Input type=\"file\" name=\"m_banner_img\"\n                                        onChange={e => {\n                                            setImgChanged({ ...imgChanged, ['m_banner_img']: true })\n                                            set_m_banner_img(e.target.files[0])\n                                        }}\n                                    />\n                                </Form.Item>\n                            </Col>\n                        </Row>\n\n                        <Button type=\"primary\" htmlType=\"submit\" loading={submitLoading} >SUBMIT</Button>\n\n                    </Form>\n                }\n            </PageContainer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    getCategoryTreeState: state.getCategoryTree,\n    getCategoryViewState: state.getCategoryView,\n    updateCategoryState: state.updateCategory,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    getCategoryTree: (params) => dispatch(getCategoryTree(params)),\n    getCategoryTreeReset: () => dispatch(getCategoryTreeReset()),\n    getCategoryView: (params) => dispatch(getCategoryView(params)),\n    getCategoryViewReset: () => dispatch(getCategoryViewReset()),\n    updateCategory: (params) => dispatch(updateCategory(params)),\n    updateCategoryReset: () => dispatch(updateCategoryReset()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryEdit)"]},"metadata":{},"sourceType":"module"}